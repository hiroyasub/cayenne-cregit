begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FlowLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ImageIcon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JEditorPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTabbedPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|WindowConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|CayenneModelerFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneWidgetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ModelerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|LocalizedStringsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|util
operator|.
name|UIStrings
import|;
end_import

begin_comment
comment|/**   * Displays the Cayenne license and build information.  */
end_comment

begin_comment
comment|// Implementation note - the data displayed here is
end_comment

begin_comment
comment|// static and very simple, so there is no need to implement complex Scope MVC
end_comment

begin_comment
comment|// triad, though it might be beneficial to use strings file
end_comment

begin_class
specifier|public
class|class
name|AboutDialog
extends|extends
name|CayenneDialog
block|{
specifier|private
specifier|static
name|String
name|licenseString
decl_stmt|;
specifier|private
specifier|static
name|String
name|infoString
decl_stmt|;
specifier|private
specifier|static
name|ImageIcon
name|logoImage
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Dimension
name|infoAreaSize
init|=
operator|new
name|Dimension
argument_list|(
literal|450
argument_list|,
literal|350
argument_list|)
decl_stmt|;
specifier|static
specifier|synchronized
name|ImageIcon
name|getLogoImage
parameter_list|()
block|{
if|if
condition|(
name|logoImage
operator|==
literal|null
condition|)
block|{
name|logoImage
operator|=
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"logo.jpg"
argument_list|)
expr_stmt|;
block|}
return|return
name|logoImage
return|;
block|}
comment|/**      * Builds and returns CayenneModeler info string.      */
specifier|static
specifier|synchronized
name|String
name|getInfoString
parameter_list|()
block|{
if|if
condition|(
name|infoString
operator|==
literal|null
condition|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"<font size='-1' face='Arial,Helvetica'>"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|UIStrings
operator|.
name|get
argument_list|(
literal|"cayenne.modeler.about.info"
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"</font>"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"<font size='-2' face='Arial,Helvetica'>"
argument_list|)
expr_stmt|;
name|String
name|version
init|=
name|LocalizedStringsHandler
operator|.
name|getString
argument_list|(
literal|"cayenne.version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"<br>Version: "
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
name|String
name|buildDate
init|=
name|LocalizedStringsHandler
operator|.
name|getString
argument_list|(
literal|"cayenne.build.date"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|buildDate
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|buildDate
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"</font>"
argument_list|)
expr_stmt|;
name|infoString
operator|=
name|buffer
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|infoString
return|;
block|}
comment|/**       * Reads Cayenne license from cayenne.jar file and returns it as a string.      */
specifier|static
specifier|synchronized
name|String
name|getLicenseString
parameter_list|()
block|{
if|if
condition|(
name|licenseString
operator|==
literal|null
condition|)
block|{
name|BufferedReader
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InputStream
name|licenseIn
init|=
name|AboutDialog
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"META-INF/LICENSE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|licenseIn
operator|!=
literal|null
condition|)
block|{
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|licenseIn
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// strip comments
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"/*"
argument_list|)
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|" */"
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// strip separators
if|if
condition|(
name|line
operator|.
name|indexOf
argument_list|(
literal|"================="
argument_list|)
operator|>=
literal|0
condition|)
block|{
continue|continue;
block|}
comment|// strip beginning of the line
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|" *"
argument_list|)
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|licenseString
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
comment|// ignoring
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
comment|// ignoring
block|}
block|}
block|}
comment|// if license is not initialized for whatever reason,
comment|// send them to the website
if|if
condition|(
name|licenseString
operator|==
literal|null
condition|)
block|{
name|licenseString
operator|=
literal|"Latest Cayenne license can be found at http://apache.org/licenses/LICENSE-2.0"
expr_stmt|;
block|}
block|}
return|return
name|licenseString
return|;
block|}
specifier|public
name|AboutDialog
parameter_list|(
name|CayenneModelerFrame
name|frame
parameter_list|)
block|{
name|super
argument_list|(
name|frame
argument_list|,
literal|"About CayenneModeler"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|this
operator|.
name|setDefaultCloseOperation
argument_list|(
name|WindowConstants
operator|.
name|DISPOSE_ON_CLOSE
argument_list|)
expr_stmt|;
name|this
operator|.
name|pack
argument_list|()
expr_stmt|;
name|this
operator|.
name|centerWindow
argument_list|()
expr_stmt|;
name|this
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**       * Sets up the graphical components.       */
specifier|private
name|void
name|init
parameter_list|()
block|{
comment|// create widgets
name|JButton
name|okButton
init|=
name|CayenneWidgetFactory
operator|.
name|createButton
argument_list|(
literal|"Close"
argument_list|)
decl_stmt|;
name|okButton
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|AboutDialog
operator|.
name|this
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// assemble info section
name|JTabbedPane
name|tabPanel
init|=
operator|new
name|JTabbedPane
argument_list|()
block|{
specifier|public
name|Dimension
name|getPreferredSize
parameter_list|()
block|{
return|return
name|infoAreaSize
return|;
block|}
block|}
decl_stmt|;
name|tabPanel
operator|.
name|setTabPlacement
argument_list|(
name|SwingConstants
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|tabPanel
operator|.
name|addTab
argument_list|(
literal|"About CayenneModeler"
argument_list|,
operator|new
name|JScrollPane
argument_list|(
name|initInfoPanel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tabPanel
operator|.
name|addTab
argument_list|(
literal|"License"
argument_list|,
operator|new
name|JScrollPane
argument_list|(
name|initLicensePanel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// assemble button
name|JPanel
name|buttonPanel
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|FlowLayout
argument_list|(
name|FlowLayout
operator|.
name|RIGHT
argument_list|)
argument_list|)
decl_stmt|;
name|buttonPanel
operator|.
name|add
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
comment|// assemble dialog
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|tabPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|buttonPanel
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JComponent
name|initInfoPanel
parameter_list|()
block|{
name|JLabel
name|image
init|=
operator|new
name|JLabel
argument_list|(
name|getLogoImage
argument_list|()
argument_list|)
decl_stmt|;
name|image
operator|.
name|setBounds
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|JEditorPane
name|infoPanel
init|=
operator|new
name|JEditorPane
argument_list|(
literal|"text/html"
argument_list|,
name|getInfoString
argument_list|()
argument_list|)
decl_stmt|;
name|infoPanel
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|infoPanel
operator|.
name|addHyperlinkListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|infoPanel
operator|.
name|setBackground
argument_list|(
name|getParent
argument_list|()
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
name|JPanel
name|panel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|panel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|image
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|infoPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
return|return
name|panel
return|;
block|}
specifier|private
name|JComponent
name|initLicensePanel
parameter_list|()
block|{
name|JTextArea
name|licenseText
init|=
operator|new
name|JTextArea
argument_list|(
name|getLicenseString
argument_list|()
argument_list|)
decl_stmt|;
name|licenseText
operator|.
name|setBackground
argument_list|(
name|Color
operator|.
name|WHITE
argument_list|)
expr_stmt|;
name|licenseText
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|licenseText
operator|.
name|setLineWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|licenseText
operator|.
name|setWrapStyleWord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|licenseText
return|;
block|}
block|}
end_class

end_unit

