begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|path
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_class
specifier|public
class|class
name|LongPathTrimmer
implements|implements
name|PathTrimmer
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PATH_SEPARATOR
init|=
name|File
operator|.
name|separator
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PATH_LENGTH_THRESHOLD
init|=
literal|8
decl_stmt|;
specifier|private
name|String
index|[]
name|splitPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|split
argument_list|(
name|PATH_SEPARATOR
argument_list|)
return|;
block|}
specifier|private
name|String
name|joinPath
parameter_list|(
name|String
index|[]
name|components
parameter_list|)
block|{
if|if
condition|(
name|components
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|components
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|components
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|PATH_SEPARATOR
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|components
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|trim
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
index|[]
name|components
init|=
name|splitPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|components
operator|.
name|length
operator|<=
name|PATH_LENGTH_THRESHOLD
operator|+
literal|1
condition|)
block|{
return|return
name|path
return|;
block|}
name|String
index|[]
name|strippedComponents
init|=
operator|new
name|String
index|[
name|PATH_LENGTH_THRESHOLD
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|half
init|=
name|PATH_LENGTH_THRESHOLD
operator|/
literal|2
decl_stmt|;
name|int
name|end
init|=
name|components
operator|.
name|length
operator|-
name|half
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|boolean
name|trimAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|components
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|half
operator|||
name|i
operator|>=
name|end
condition|)
block|{
name|strippedComponents
index|[
name|idx
operator|++
index|]
operator|=
name|components
index|[
name|i
index|]
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|trimAdded
condition|)
block|{
name|strippedComponents
index|[
name|idx
operator|++
index|]
operator|=
literal|"..."
expr_stmt|;
name|trimAdded
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|joinPath
argument_list|(
name|strippedComponents
argument_list|)
return|;
block|}
block|}
end_class

end_unit

