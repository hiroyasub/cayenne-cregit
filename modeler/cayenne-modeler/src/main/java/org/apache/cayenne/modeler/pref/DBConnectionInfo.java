begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|DataSourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|DriverDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|AutoAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ClassLoadingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_class
specifier|public
class|class
name|DBConnectionInfo
extends|extends
name|_DBConnectionInfo
block|{
comment|/**      * Creates a DbAdapter based on configured values.      */
specifier|public
name|DbAdapter
name|makeAdapter
parameter_list|(
name|ClassLoadingService
name|classLoader
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|adapterClassName
init|=
name|getDbAdapter
argument_list|()
decl_stmt|;
if|if
condition|(
name|adapterClassName
operator|==
literal|null
operator|||
name|AutoAdapter
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|adapterClassName
argument_list|)
condition|)
block|{
return|return
operator|new
name|AutoAdapter
argument_list|(
name|makeDataSource
argument_list|(
name|classLoader
argument_list|)
argument_list|)
return|;
block|}
try|try
block|{
return|return
operator|(
name|DbAdapter
operator|)
name|classLoader
operator|.
name|loadClass
argument_list|(
name|adapterClassName
argument_list|)
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|th
operator|=
name|Util
operator|.
name|unwindException
argument_list|(
name|th
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"DbAdapter load error: "
operator|+
name|th
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns a DataSource that uses connection information from this object. Returned      * DataSource is not pooling its connections. It can be wrapped in PoolManager if      * pooling is needed.      */
specifier|public
name|DataSource
name|makeDataSource
parameter_list|(
name|ClassLoadingService
name|classLoader
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// validate...
if|if
condition|(
name|getJdbcDriver
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"No JDBC driver set."
argument_list|)
throw|;
block|}
if|if
condition|(
name|getUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"No DB URL set."
argument_list|)
throw|;
block|}
comment|// load driver...
name|Driver
name|driver
decl_stmt|;
try|try
block|{
name|driver
operator|=
operator|(
name|Driver
operator|)
name|classLoader
operator|.
name|loadClass
argument_list|(
name|getJdbcDriver
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|th
operator|=
name|Util
operator|.
name|unwindException
argument_list|(
name|th
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Driver load error: "
operator|+
name|th
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|DriverDataSource
argument_list|(
name|driver
argument_list|,
name|getUrl
argument_list|()
argument_list|,
name|getUserName
argument_list|()
argument_list|,
name|getPassword
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Updates another DBConnectionInfo with this object's values.      */
specifier|public
name|boolean
name|copyTo
parameter_list|(
name|DBConnectionInfo
name|dataSourceInfo
parameter_list|)
block|{
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getUrl
argument_list|()
argument_list|,
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
name|dataSourceInfo
operator|.
name|setUrl
argument_list|(
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getUserName
argument_list|()
argument_list|,
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
name|dataSourceInfo
operator|.
name|setUserName
argument_list|(
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getPassword
argument_list|()
argument_list|,
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|dataSourceInfo
operator|.
name|setPassword
argument_list|(
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getJdbcDriver
argument_list|()
argument_list|,
name|getJdbcDriver
argument_list|()
argument_list|)
condition|)
block|{
name|dataSourceInfo
operator|.
name|setJdbcDriver
argument_list|(
name|getJdbcDriver
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getDbAdapter
argument_list|()
argument_list|,
name|getDbAdapter
argument_list|()
argument_list|)
condition|)
block|{
name|dataSourceInfo
operator|.
name|setDbAdapter
argument_list|(
name|getDbAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|updated
return|;
block|}
comment|/**      * Updates DataSourceInfo with this object's values.      *<p>      *<i>Currently doesn't set the adapter property. Need to change the UI to handle      * adapter via DataSourceInfo first, and then it should be safe to do an adapter      * update here.</i>      *</p>      */
specifier|public
name|boolean
name|copyTo
parameter_list|(
name|DataSourceInfo
name|dataSourceInfo
parameter_list|)
block|{
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getDataSourceUrl
argument_list|()
argument_list|,
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
name|dataSourceInfo
operator|.
name|setDataSourceUrl
argument_list|(
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getUserName
argument_list|()
argument_list|,
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
name|dataSourceInfo
operator|.
name|setUserName
argument_list|(
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getPassword
argument_list|()
argument_list|,
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|dataSourceInfo
operator|.
name|setPassword
argument_list|(
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getJdbcDriver
argument_list|()
argument_list|,
name|getJdbcDriver
argument_list|()
argument_list|)
condition|)
block|{
name|dataSourceInfo
operator|.
name|setJdbcDriver
argument_list|(
name|getJdbcDriver
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|updated
return|;
block|}
specifier|public
name|boolean
name|copyFrom
parameter_list|(
name|DataSourceInfo
name|dataSourceInfo
parameter_list|)
block|{
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getDataSourceUrl
argument_list|()
argument_list|,
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
name|setUrl
argument_list|(
name|dataSourceInfo
operator|.
name|getDataSourceUrl
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getUserName
argument_list|()
argument_list|,
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
name|setUserName
argument_list|(
name|dataSourceInfo
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getPassword
argument_list|()
argument_list|,
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|setPassword
argument_list|(
name|dataSourceInfo
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataSourceInfo
operator|.
name|getJdbcDriver
argument_list|()
argument_list|,
name|getJdbcDriver
argument_list|()
argument_list|)
condition|)
block|{
name|setJdbcDriver
argument_list|(
name|dataSourceInfo
operator|.
name|getJdbcDriver
argument_list|()
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|updated
return|;
block|}
block|}
end_class

end_unit

