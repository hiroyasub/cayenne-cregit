begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|EntityMergeSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
operator|.
name|DefaultObjectNameGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|db
operator|.
name|DbLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|db
operator|.
name|DbLoaderConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|db
operator|.
name|DefaultDbLoaderDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|CatalogFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|SchemaFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|pref
operator|.
name|TreeEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|// TODO: rewrite this whole thing...
end_comment

begin_class
class|class
name|ModelerDbLoader
extends|extends
name|DbLoader
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ModelerDbLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TreeEditor
name|treeEditor
decl_stmt|;
specifier|private
name|ReverseEngineeringController
name|reverseEngineeringController
decl_stmt|;
specifier|public
name|ModelerDbLoader
parameter_list|(
name|ReverseEngineeringController
name|reverseEngineeringController
parameter_list|,
name|TreeEditor
name|treeEditor
parameter_list|,
name|Connection
name|connection
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|reverseEngineeringController
operator|.
name|adapter
argument_list|,
operator|new
name|DefaultDbLoaderDelegate
argument_list|()
argument_list|,
operator|new
name|EntityMergeSupport
argument_list|(
operator|new
name|DefaultObjectNameGenerator
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|treeEditor
operator|=
name|treeEditor
expr_stmt|;
name|this
operator|.
name|reverseEngineeringController
operator|=
name|reverseEngineeringController
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DataMap
name|load
parameter_list|(
name|DbLoaderConfiguration
name|config
parameter_list|)
throws|throws
name|SQLException
block|{
name|DataMap
name|dataMap
init|=
operator|new
name|DataMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|procedureMap
init|=
name|loadProcedures
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|load
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|addProcedures
argument_list|(
name|procedureMap
argument_list|)
expr_stmt|;
return|return
name|dataMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|)
throws|throws
name|SQLException
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Schema loading..."
argument_list|)
expr_stmt|;
name|String
index|[]
name|types
init|=
name|getTableTypes
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|boolean
name|isNullDetected
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CatalogFilter
name|catalog
range|:
name|config
operator|.
name|getFiltersConfig
argument_list|()
operator|.
name|catalogs
control|)
block|{
for|for
control|(
name|SchemaFilter
name|schema
range|:
name|catalog
operator|.
name|schemas
control|)
block|{
if|if
condition|(
name|schema
operator|.
name|name
operator|==
literal|null
operator|&&
name|catalog
operator|.
name|name
operator|==
literal|null
condition|)
block|{
name|isNullDetected
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isNullDetected
condition|)
block|{
name|createIfNull
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createIfNotNull
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addProcedures
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|procedureMap
parameter_list|)
throws|throws
name|SQLException
block|{
name|DBElement
name|currentDBCatalog
decl_stmt|;
name|DBElement
name|currentDBSchema
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|procedure
range|:
name|procedureMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|supportCatalogs
argument_list|()
condition|)
block|{
name|String
name|dbCatalogName
init|=
name|procedure
operator|.
name|getValue
argument_list|()
operator|.
name|getCatalog
argument_list|()
decl_stmt|;
name|DBElement
name|dbCatalog
init|=
name|reverseEngineeringController
operator|.
name|dbModel
operator|.
name|getExistingElement
argument_list|(
name|dbCatalogName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbCatalog
operator|!=
literal|null
condition|)
block|{
name|currentDBCatalog
operator|=
name|dbCatalog
expr_stmt|;
block|}
else|else
block|{
name|currentDBCatalog
operator|=
operator|new
name|DBCatalog
argument_list|(
name|dbCatalogName
argument_list|)
expr_stmt|;
name|reverseEngineeringController
operator|.
name|dbModel
operator|.
name|addElement
argument_list|(
name|currentDBCatalog
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|supportSchemas
argument_list|()
condition|)
block|{
name|String
name|dbSchemaName
init|=
name|procedure
operator|.
name|getValue
argument_list|()
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|DBElement
name|dbSchema
init|=
name|currentDBCatalog
operator|.
name|getExistingElement
argument_list|(
name|dbSchemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbSchema
operator|!=
literal|null
condition|)
block|{
name|currentDBSchema
operator|=
name|dbSchema
expr_stmt|;
block|}
else|else
block|{
name|currentDBSchema
operator|=
operator|new
name|DBSchema
argument_list|(
name|dbSchemaName
argument_list|)
expr_stmt|;
name|currentDBCatalog
operator|.
name|addElement
argument_list|(
name|currentDBSchema
argument_list|)
expr_stmt|;
block|}
name|DBProcedure
name|currentProcedure
init|=
operator|new
name|DBProcedure
argument_list|(
name|procedure
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|currentDBSchema
operator|.
name|addElement
argument_list|(
name|currentProcedure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DBProcedure
name|currentProcedure
init|=
operator|new
name|DBProcedure
argument_list|(
name|procedure
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|currentDBCatalog
operator|.
name|addElement
argument_list|(
name|currentProcedure
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|supportSchemas
argument_list|()
condition|)
block|{
name|String
name|dbSchemaName
init|=
name|procedure
operator|.
name|getValue
argument_list|()
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|DBElement
name|dbSchema
init|=
name|reverseEngineeringController
operator|.
name|dbModel
operator|.
name|getExistingElement
argument_list|(
name|dbSchemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbSchema
operator|!=
literal|null
condition|)
block|{
name|currentDBSchema
operator|=
name|dbSchema
expr_stmt|;
block|}
else|else
block|{
name|currentDBSchema
operator|=
operator|new
name|DBSchema
argument_list|(
name|dbSchemaName
argument_list|)
expr_stmt|;
name|reverseEngineeringController
operator|.
name|dbModel
operator|.
name|addElement
argument_list|(
name|currentDBSchema
argument_list|)
expr_stmt|;
block|}
name|DBProcedure
name|currentProcedure
init|=
operator|new
name|DBProcedure
argument_list|(
name|procedure
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|currentDBSchema
operator|.
name|addElement
argument_list|(
name|currentProcedure
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createIfNotNull
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|SQLException
block|{
name|treeEditor
operator|.
name|setRoot
argument_list|(
name|reverseEngineeringController
operator|.
name|dataSourceKey
argument_list|)
expr_stmt|;
name|reverseEngineeringController
operator|.
name|dbModel
operator|=
operator|new
name|DBModel
argument_list|(
name|reverseEngineeringController
operator|.
name|dataSourceKey
argument_list|)
expr_stmt|;
name|boolean
name|catalogSetted
init|=
literal|false
decl_stmt|;
name|DBElement
name|currentDBCatalog
init|=
literal|null
decl_stmt|;
name|DBElement
name|currentDBSchema
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CatalogFilter
name|catalog
range|:
name|config
operator|.
name|getFiltersConfig
argument_list|()
operator|.
name|catalogs
control|)
block|{
for|for
control|(
name|SchemaFilter
name|schema
range|:
name|catalog
operator|.
name|schemas
control|)
block|{
name|List
argument_list|<
name|DbEntity
argument_list|>
name|entityList
init|=
name|createTableLoader
argument_list|(
name|catalog
operator|.
name|name
argument_list|,
name|schema
operator|.
name|name
argument_list|,
name|schema
operator|.
name|tables
argument_list|)
operator|.
name|loadDbEntities
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|,
name|types
argument_list|)
decl_stmt|;
name|DbEntity
name|entityFromLoader
init|=
name|entityList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityFromLoader
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|catalogSetted
operator|&&
name|entityFromLoader
operator|.
name|getCatalog
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|currentDBCatalog
operator|=
operator|new
name|DBCatalog
argument_list|(
name|entityFromLoader
operator|.
name|getCatalog
argument_list|()
argument_list|)
expr_stmt|;
name|reverseEngineeringController
operator|.
name|dbModel
operator|.
name|addElement
argument_list|(
name|currentDBCatalog
argument_list|)
expr_stmt|;
name|catalogSetted
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|entityFromLoader
operator|.
name|getSchema
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|currentDBSchema
operator|=
operator|new
name|DBSchema
argument_list|(
name|entityFromLoader
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentDBCatalog
operator|!=
literal|null
condition|)
block|{
name|currentDBCatalog
operator|.
name|addElement
argument_list|(
name|currentDBSchema
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reverseEngineeringController
operator|.
name|dbModel
operator|.
name|addElement
argument_list|(
name|currentDBSchema
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DBEntity
name|currentDBEntity
decl_stmt|;
if|if
condition|(
name|currentDBSchema
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DbEntity
name|dbEntity
range|:
name|entityList
control|)
block|{
name|currentDBEntity
operator|=
operator|new
name|DBEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|currentDBSchema
operator|.
name|addElement
argument_list|(
name|currentDBEntity
argument_list|)
expr_stmt|;
for|for
control|(
name|DbAttribute
name|dbColumn
range|:
name|dbEntity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|currentDBEntity
operator|.
name|addElement
argument_list|(
operator|new
name|DBColumn
argument_list|(
name|dbColumn
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|DbEntity
name|dbEntity
range|:
name|entityList
control|)
block|{
name|currentDBEntity
operator|=
operator|new
name|DBEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DbAttribute
name|dbColumn
range|:
name|dbEntity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|currentDBEntity
operator|.
name|addElement
argument_list|(
operator|new
name|DBColumn
argument_list|(
name|dbColumn
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentDBCatalog
operator|.
name|addElement
argument_list|(
name|currentDBEntity
argument_list|)
expr_stmt|;
block|}
block|}
name|currentDBSchema
operator|=
literal|null
expr_stmt|;
block|}
name|catalogSetted
operator|=
literal|false
expr_stmt|;
name|currentDBCatalog
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createIfNull
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|SQLException
block|{
name|treeEditor
operator|.
name|setRoot
argument_list|(
name|reverseEngineeringController
operator|.
name|dataSourceKey
argument_list|)
expr_stmt|;
name|reverseEngineeringController
operator|.
name|dbModel
operator|=
operator|new
name|DBModel
argument_list|(
name|reverseEngineeringController
operator|.
name|dataSourceKey
argument_list|)
expr_stmt|;
name|DBElement
name|currentDBCatalog
decl_stmt|;
name|DBElement
name|currentDBSchema
decl_stmt|;
for|for
control|(
name|CatalogFilter
name|catalog
range|:
name|config
operator|.
name|getFiltersConfig
argument_list|()
operator|.
name|catalogs
control|)
block|{
for|for
control|(
name|SchemaFilter
name|schema
range|:
name|catalog
operator|.
name|schemas
control|)
block|{
name|List
argument_list|<
name|DbEntity
argument_list|>
name|entityList
init|=
name|createTableLoader
argument_list|(
name|catalog
operator|.
name|name
argument_list|,
name|schema
operator|.
name|name
argument_list|,
name|schema
operator|.
name|tables
argument_list|)
operator|.
name|loadDbEntities
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|,
name|types
argument_list|)
decl_stmt|;
for|for
control|(
name|DbEntity
name|dbEntity
range|:
name|entityList
control|)
block|{
if|if
condition|(
name|supportCatalogs
argument_list|()
condition|)
block|{
name|String
name|dbCatalogName
init|=
name|dbEntity
operator|.
name|getCatalog
argument_list|()
decl_stmt|;
name|DBElement
name|dbCatalog
init|=
name|reverseEngineeringController
operator|.
name|dbModel
operator|.
name|getExistingElement
argument_list|(
name|dbCatalogName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbCatalog
operator|!=
literal|null
condition|)
block|{
name|currentDBCatalog
operator|=
name|dbCatalog
expr_stmt|;
block|}
else|else
block|{
name|currentDBCatalog
operator|=
operator|new
name|DBCatalog
argument_list|(
name|dbCatalogName
argument_list|)
expr_stmt|;
name|reverseEngineeringController
operator|.
name|dbModel
operator|.
name|addElement
argument_list|(
name|currentDBCatalog
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|supportSchemas
argument_list|()
condition|)
block|{
name|String
name|dbSchemaName
init|=
name|dbEntity
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|DBElement
name|dbSchema
init|=
name|currentDBCatalog
operator|.
name|getExistingElement
argument_list|(
name|dbSchemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbSchema
operator|!=
literal|null
condition|)
block|{
name|currentDBSchema
operator|=
name|dbSchema
expr_stmt|;
block|}
else|else
block|{
name|currentDBSchema
operator|=
operator|new
name|DBSchema
argument_list|(
name|dbSchemaName
argument_list|)
expr_stmt|;
name|currentDBCatalog
operator|.
name|addElement
argument_list|(
name|currentDBSchema
argument_list|)
expr_stmt|;
block|}
name|DBEntity
name|currentDBEntity
init|=
operator|new
name|DBEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|currentDBSchema
operator|.
name|addElement
argument_list|(
name|currentDBEntity
argument_list|)
expr_stmt|;
for|for
control|(
name|DbAttribute
name|dbColumn
range|:
name|dbEntity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|currentDBEntity
operator|.
name|addElement
argument_list|(
operator|new
name|DBColumn
argument_list|(
name|dbColumn
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|DBEntity
name|currentDBEntity
init|=
operator|new
name|DBEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|currentDBCatalog
operator|.
name|addElement
argument_list|(
name|currentDBEntity
argument_list|)
expr_stmt|;
for|for
control|(
name|DbAttribute
name|dbColumn
range|:
name|dbEntity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|currentDBEntity
operator|.
name|addElement
argument_list|(
operator|new
name|DBColumn
argument_list|(
name|dbColumn
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|supportSchemas
argument_list|()
condition|)
block|{
name|String
name|dbSchemaName
init|=
name|dbEntity
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|DBElement
name|dbSchema
init|=
name|reverseEngineeringController
operator|.
name|dbModel
operator|.
name|getExistingElement
argument_list|(
name|dbSchemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbSchema
operator|!=
literal|null
condition|)
block|{
name|currentDBSchema
operator|=
name|dbSchema
expr_stmt|;
block|}
else|else
block|{
name|currentDBSchema
operator|=
operator|new
name|DBSchema
argument_list|(
name|dbSchemaName
argument_list|)
expr_stmt|;
name|reverseEngineeringController
operator|.
name|dbModel
operator|.
name|addElement
argument_list|(
name|currentDBSchema
argument_list|)
expr_stmt|;
block|}
name|DBEntity
name|currentDBEntity
init|=
operator|new
name|DBEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|currentDBSchema
operator|.
name|addElement
argument_list|(
name|currentDBEntity
argument_list|)
expr_stmt|;
for|for
control|(
name|DbAttribute
name|dbColumn
range|:
name|dbEntity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|currentDBEntity
operator|.
name|addElement
argument_list|(
operator|new
name|DBColumn
argument_list|(
name|dbColumn
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

