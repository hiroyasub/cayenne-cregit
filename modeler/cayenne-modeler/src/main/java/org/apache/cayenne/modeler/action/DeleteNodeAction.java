begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|FilterContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|PatternParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ReverseEngineering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
operator|.
name|DbImportTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|DbImportModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|DbImportView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|DraggableTreePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
operator|.
name|DbImportTreeUndoableEdit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultTreeModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|DeleteNodeAction
extends|extends
name|TreeManipulationAction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_NAME
init|=
literal|"Delete"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ICON_NAME
init|=
literal|"icon-trash.png"
decl_stmt|;
specifier|private
name|DraggableTreePanel
name|panel
decl_stmt|;
name|DeleteNodeAction
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|ACTION_NAME
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getIconName
parameter_list|()
block|{
return|return
name|ICON_NAME
return|;
block|}
specifier|private
name|void
name|removePatternParams
parameter_list|(
name|FilterContainer
name|container
parameter_list|,
name|Object
name|selectedObject
parameter_list|)
block|{
name|container
operator|.
name|getExcludeTables
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
name|container
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
name|container
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
name|container
operator|.
name|getIncludeProcedures
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
name|container
operator|.
name|getExcludeProcedures
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteChilds
parameter_list|(
name|Catalog
name|catalog
parameter_list|)
block|{
name|Object
name|selectedObject
init|=
name|this
operator|.
name|selectedElement
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedObject
operator|instanceof
name|Schema
condition|)
block|{
name|catalog
operator|.
name|getSchemas
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selectedObject
operator|instanceof
name|IncludeTable
condition|)
block|{
name|catalog
operator|.
name|getIncludeTables
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selectedObject
operator|instanceof
name|PatternParam
condition|)
block|{
name|removePatternParams
argument_list|(
name|catalog
argument_list|,
name|selectedObject
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteChilds
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|Object
name|selectedObject
init|=
name|this
operator|.
name|selectedElement
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedObject
operator|instanceof
name|IncludeTable
condition|)
block|{
name|schema
operator|.
name|getIncludeTables
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selectedObject
operator|instanceof
name|PatternParam
condition|)
block|{
name|removePatternParams
argument_list|(
name|schema
argument_list|,
name|selectedObject
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteChilds
parameter_list|(
name|IncludeTable
name|includeTable
parameter_list|)
block|{
name|Object
name|selectedObject
init|=
name|this
operator|.
name|selectedElement
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
name|includeTable
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteChilds
parameter_list|(
name|ReverseEngineering
name|reverseEngineering
parameter_list|)
block|{
name|Object
name|selectedObject
init|=
name|this
operator|.
name|selectedElement
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedObject
operator|instanceof
name|Catalog
condition|)
block|{
name|reverseEngineering
operator|.
name|getCatalogs
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selectedObject
operator|instanceof
name|Schema
condition|)
block|{
name|reverseEngineering
operator|.
name|getSchemas
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selectedObject
operator|instanceof
name|IncludeTable
condition|)
block|{
name|reverseEngineering
operator|.
name|getIncludeTables
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selectedObject
operator|instanceof
name|ExcludeTable
condition|)
block|{
name|reverseEngineering
operator|.
name|getExcludeTables
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selectedObject
operator|instanceof
name|IncludeColumn
condition|)
block|{
name|reverseEngineering
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selectedObject
operator|instanceof
name|ExcludeColumn
condition|)
block|{
name|reverseEngineering
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selectedObject
operator|instanceof
name|IncludeProcedure
condition|)
block|{
name|reverseEngineering
operator|.
name|getIncludeProcedures
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|selectedObject
operator|instanceof
name|ExcludeProcedure
condition|)
block|{
name|reverseEngineering
operator|.
name|getExcludeProcedures
argument_list|()
operator|.
name|remove
argument_list|(
name|selectedObject
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateParentChilds
parameter_list|()
block|{
name|DbImportModel
name|model
init|=
operator|(
name|DbImportModel
operator|)
name|tree
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|removeNodeFromParent
argument_list|(
name|selectedElement
argument_list|)
expr_stmt|;
name|getProjectController
argument_list|()
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|model
operator|.
name|reload
argument_list|(
name|parentElement
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|performAction
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|tree
operator|.
name|stopEditing
argument_list|()
expr_stmt|;
specifier|final
name|TreePath
index|[]
name|paths
init|=
name|tree
operator|.
name|getSelectionPaths
argument_list|()
decl_stmt|;
specifier|final
name|DbImportView
name|rootParent
init|=
operator|(
operator|(
name|DbImportView
operator|)
name|panel
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|)
decl_stmt|;
name|rootParent
operator|.
name|getLoadDbSchemaButton
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rootParent
operator|.
name|getReverseEngineeringProgress
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
block|{
name|ReverseEngineering
name|reverseEngineeringOldCopy
init|=
operator|new
name|ReverseEngineering
argument_list|(
name|tree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|)
decl_stmt|;
name|rootParent
operator|.
name|lockToolbarButtons
argument_list|()
expr_stmt|;
for|for
control|(
name|TreePath
name|path
range|:
name|paths
control|)
block|{
name|selectedElement
operator|=
operator|(
name|DbImportTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
expr_stmt|;
name|parentElement
operator|=
operator|(
name|DbImportTreeNode
operator|)
name|selectedElement
operator|.
name|getParent
argument_list|()
expr_stmt|;
if|if
condition|(
name|parentElement
operator|!=
literal|null
condition|)
block|{
name|Object
name|parentUserObject
init|=
name|parentElement
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentUserObject
operator|instanceof
name|ReverseEngineering
condition|)
block|{
name|ReverseEngineering
name|reverseEngineering
init|=
operator|(
name|ReverseEngineering
operator|)
name|parentUserObject
decl_stmt|;
name|deleteChilds
argument_list|(
name|reverseEngineering
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parentUserObject
operator|instanceof
name|Catalog
condition|)
block|{
name|Catalog
name|catalog
init|=
operator|(
name|Catalog
operator|)
name|parentUserObject
decl_stmt|;
name|deleteChilds
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parentUserObject
operator|instanceof
name|Schema
condition|)
block|{
name|Schema
name|schema
init|=
operator|(
name|Schema
operator|)
name|parentUserObject
decl_stmt|;
name|deleteChilds
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parentUserObject
operator|instanceof
name|IncludeTable
condition|)
block|{
name|IncludeTable
name|includeTable
init|=
operator|(
name|IncludeTable
operator|)
name|parentUserObject
decl_stmt|;
name|deleteChilds
argument_list|(
name|includeTable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|paths
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|getProjectController
argument_list|()
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DbImportTreeNode
argument_list|>
name|expandList
init|=
name|tree
operator|.
name|getTreeExpandList
argument_list|()
decl_stmt|;
name|tree
operator|.
name|translateReverseEngineeringToTree
argument_list|(
name|tree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tree
operator|.
name|expandTree
argument_list|(
name|expandList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateParentChilds
argument_list|()
expr_stmt|;
block|}
name|ReverseEngineering
name|reverseEngineeringNewCopy
init|=
operator|new
name|ReverseEngineering
argument_list|(
name|tree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|)
decl_stmt|;
name|getProjectController
argument_list|()
operator|.
name|getApplication
argument_list|()
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|DbImportTreeUndoableEdit
argument_list|(
name|reverseEngineeringOldCopy
argument_list|,
name|reverseEngineeringNewCopy
argument_list|,
name|tree
argument_list|,
name|getProjectController
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rootParent
operator|.
name|getLoadDbSchemaButton
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rootParent
operator|.
name|getReverseEngineeringProgress
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setPanel
parameter_list|(
name|DraggableTreePanel
name|panel
parameter_list|)
block|{
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
block|}
block|}
end_class

end_unit

