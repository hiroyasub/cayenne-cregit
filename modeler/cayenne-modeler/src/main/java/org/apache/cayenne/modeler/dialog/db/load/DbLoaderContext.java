begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
operator|.
name|NameBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|DbImportConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ReverseEngineering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
operator|.
name|DbLoaderDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|FiltersConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|DataSourceWizard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|DBConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DbLoaderContext
block|{
specifier|private
specifier|static
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DbLoaderContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DbImportConfiguration
name|config
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|ProjectController
name|projectController
decl_stmt|;
specifier|private
name|boolean
name|existingMap
decl_stmt|;
specifier|private
name|DataMap
name|dataMap
decl_stmt|;
specifier|private
name|boolean
name|stopping
decl_stmt|;
specifier|private
name|String
name|loadStatusNote
decl_stmt|;
specifier|public
name|DbLoaderContext
parameter_list|()
block|{
block|}
name|DataMap
name|getDataMap
parameter_list|()
block|{
return|return
name|dataMap
return|;
block|}
name|boolean
name|isExistingDataMap
parameter_list|()
block|{
return|return
name|existingMap
return|;
block|}
specifier|public
name|void
name|setProjectController
parameter_list|(
name|ProjectController
name|projectController
parameter_list|)
block|{
name|this
operator|.
name|projectController
operator|=
name|projectController
expr_stmt|;
block|}
name|ProjectController
name|getProjectController
parameter_list|()
block|{
return|return
name|projectController
return|;
block|}
name|void
name|setConfig
parameter_list|(
name|DbImportConfiguration
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
name|DbImportConfiguration
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
specifier|public
name|void
name|setConnection
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
specifier|public
name|boolean
name|isStopping
parameter_list|()
block|{
return|return
name|stopping
return|;
block|}
name|void
name|setStopping
parameter_list|(
name|boolean
name|stopping
parameter_list|)
block|{
name|this
operator|.
name|stopping
operator|=
name|stopping
expr_stmt|;
block|}
name|String
name|getStatusNote
parameter_list|()
block|{
return|return
name|loadStatusNote
return|;
block|}
name|void
name|setStatusNote
parameter_list|(
name|String
name|loadStatusNote
parameter_list|)
block|{
name|this
operator|.
name|loadStatusNote
operator|=
name|loadStatusNote
expr_stmt|;
block|}
specifier|public
name|boolean
name|buildConfig
parameter_list|(
name|DataSourceWizard
name|connectionWizard
parameter_list|,
name|DbLoaderOptionsDialog
name|dialog
parameter_list|)
block|{
if|if
condition|(
name|dialog
operator|==
literal|null
operator|||
name|connectionWizard
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Build filters
name|ReverseEngineering
name|reverseEngineering
init|=
operator|new
name|ReverseEngineering
argument_list|()
decl_stmt|;
name|reverseEngineering
operator|.
name|addCatalog
argument_list|(
operator|new
name|Catalog
argument_list|(
name|dialog
operator|.
name|getSelectedCatalog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reverseEngineering
operator|.
name|addSchema
argument_list|(
operator|new
name|Schema
argument_list|(
name|dialog
operator|.
name|getSelectedSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reverseEngineering
operator|.
name|addIncludeTable
argument_list|(
operator|new
name|IncludeTable
argument_list|(
name|dialog
operator|.
name|getTableIncludePattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dialog
operator|.
name|getTableExcludePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|reverseEngineering
operator|.
name|addExcludeTable
argument_list|(
operator|new
name|ExcludeTable
argument_list|(
name|dialog
operator|.
name|getTableExcludePattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add here auto_pk_support table
name|reverseEngineering
operator|.
name|addExcludeTable
argument_list|(
operator|new
name|ExcludeTable
argument_list|(
literal|"auto_pk_support|AUTO_PK_SUPPORT"
argument_list|)
argument_list|)
expr_stmt|;
name|reverseEngineering
operator|.
name|addIncludeProcedure
argument_list|(
operator|new
name|IncludeProcedure
argument_list|(
name|dialog
operator|.
name|getProcedureNamePattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FiltersConfigBuilder
name|filtersConfigBuilder
init|=
operator|new
name|FiltersConfigBuilder
argument_list|(
name|reverseEngineering
argument_list|)
decl_stmt|;
name|DbImportConfiguration
name|config
init|=
operator|new
name|DbImportConfiguration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DbLoaderDelegate
name|createLoaderDelegate
parameter_list|()
block|{
return|return
operator|new
name|LoaderDelegate
argument_list|(
name|DbLoaderContext
operator|.
name|this
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// Build config
name|DBConnectionInfo
name|connectionInfo
init|=
name|connectionWizard
operator|.
name|getConnectionInfo
argument_list|()
decl_stmt|;
name|config
operator|.
name|setAdapter
argument_list|(
name|connectionWizard
operator|.
name|getAdapter
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUsername
argument_list|(
name|connectionInfo
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setPassword
argument_list|(
name|connectionInfo
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setDriver
argument_list|(
name|connectionInfo
operator|.
name|getJdbcDriver
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUrl
argument_list|(
name|connectionInfo
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|getDbLoaderConfig
argument_list|()
operator|.
name|setFiltersConfig
argument_list|(
name|filtersConfigBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMeaningfulPkTables
argument_list|(
name|dialog
operator|.
name|getMeaningfulPk
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setNamingStrategy
argument_list|(
name|dialog
operator|.
name|getNamingStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|prepareDataMap
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|prepareDataMap
parameter_list|()
block|{
name|dataMap
operator|=
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataMap
argument_list|()
expr_stmt|;
name|existingMap
operator|=
name|dataMap
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|existingMap
condition|)
block|{
name|ConfigurationNode
name|root
init|=
name|getProjectController
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|dataMap
operator|=
operator|new
name|DataMap
argument_list|()
expr_stmt|;
name|dataMap
operator|.
name|setName
argument_list|(
name|NameBuilder
operator|.
name|builder
argument_list|(
name|dataMap
argument_list|,
name|root
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataMap
operator|.
name|getConfigurationSource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getConfig
argument_list|()
operator|.
name|setTargetDataMap
argument_list|(
operator|new
name|File
argument_list|(
name|dataMap
operator|.
name|getConfigurationSource
argument_list|()
operator|.
name|getURL
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processWarn
parameter_list|(
specifier|final
name|Throwable
name|th
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|th
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processException
parameter_list|(
specifier|final
name|Throwable
name|th
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Exception on reverse engineering"
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|th
argument_list|)
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|th
operator|.
name|getMessage
argument_list|()
argument_list|,
name|message
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

