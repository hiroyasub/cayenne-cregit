begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_class
specifier|public
class|class
name|BevelArrowIcon
implements|implements
name|Icon
block|{
specifier|public
specifier|static
specifier|final
name|int
name|UP
init|=
literal|0
decl_stmt|;
comment|// direction
specifier|public
specifier|static
specifier|final
name|int
name|DOWN
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_SIZE
init|=
literal|11
decl_stmt|;
specifier|private
name|Color
name|edge1
decl_stmt|;
specifier|private
name|Color
name|edge2
decl_stmt|;
specifier|private
name|Color
name|fill
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
specifier|private
name|int
name|direction
decl_stmt|;
specifier|public
name|BevelArrowIcon
parameter_list|(
name|int
name|direction
parameter_list|,
name|boolean
name|isRaisedView
parameter_list|,
name|boolean
name|isPressedView
parameter_list|)
block|{
if|if
condition|(
name|isRaisedView
condition|)
block|{
if|if
condition|(
name|isPressedView
condition|)
block|{
name|init
argument_list|(
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlLtHighlight"
argument_list|)
argument_list|,
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlDkShadow"
argument_list|)
argument_list|,
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlShadow"
argument_list|)
argument_list|,
name|DEFAULT_SIZE
argument_list|,
name|direction
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|init
argument_list|(
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlHighlight"
argument_list|)
argument_list|,
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlShadow"
argument_list|)
argument_list|,
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"control"
argument_list|)
argument_list|,
name|DEFAULT_SIZE
argument_list|,
name|direction
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isPressedView
condition|)
block|{
name|init
argument_list|(
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlDkShadow"
argument_list|)
argument_list|,
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlLtHighlight"
argument_list|)
argument_list|,
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlShadow"
argument_list|)
argument_list|,
name|DEFAULT_SIZE
argument_list|,
name|direction
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|init
argument_list|(
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlShadow"
argument_list|)
argument_list|,
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlHighlight"
argument_list|)
argument_list|,
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"control"
argument_list|)
argument_list|,
name|DEFAULT_SIZE
argument_list|,
name|direction
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|BevelArrowIcon
parameter_list|(
name|Color
name|edge1
parameter_list|,
name|Color
name|edge2
parameter_list|,
name|Color
name|fill
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|direction
parameter_list|)
block|{
name|init
argument_list|(
name|edge1
argument_list|,
name|edge2
argument_list|,
name|fill
argument_list|,
name|size
argument_list|,
name|direction
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|paintIcon
parameter_list|(
name|Component
name|c
parameter_list|,
name|Graphics
name|g
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
switch|switch
condition|(
name|direction
condition|)
block|{
case|case
name|DOWN
case|:
name|drawDownArrow
argument_list|(
name|g
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
break|break;
case|case
name|UP
case|:
name|drawUpArrow
argument_list|(
name|g
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|int
name|getIconWidth
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|int
name|getIconHeight
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|Color
name|edge1
parameter_list|,
name|Color
name|edge2
parameter_list|,
name|Color
name|fill
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|direction
parameter_list|)
block|{
name|this
operator|.
name|edge1
operator|=
name|edge1
expr_stmt|;
name|this
operator|.
name|edge2
operator|=
name|edge2
expr_stmt|;
name|this
operator|.
name|fill
operator|=
name|fill
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
specifier|private
name|void
name|drawDownArrow
parameter_list|(
name|Graphics
name|g
parameter_list|,
name|int
name|xo
parameter_list|,
name|int
name|yo
parameter_list|)
block|{
name|g
operator|.
name|setColor
argument_list|(
name|edge1
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|xo
argument_list|,
name|yo
argument_list|,
name|xo
operator|+
name|size
operator|-
literal|1
argument_list|,
name|yo
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|xo
argument_list|,
name|yo
operator|+
literal|1
argument_list|,
name|xo
operator|+
name|size
operator|-
literal|3
argument_list|,
name|yo
operator|+
literal|1
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|edge2
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|xo
operator|+
name|size
operator|-
literal|2
argument_list|,
name|yo
operator|+
literal|1
argument_list|,
name|xo
operator|+
name|size
operator|-
literal|1
argument_list|,
name|yo
operator|+
literal|1
argument_list|)
expr_stmt|;
name|int
name|x
init|=
name|xo
operator|+
literal|1
decl_stmt|;
name|int
name|y
init|=
name|yo
operator|+
literal|2
decl_stmt|;
name|int
name|dx
init|=
name|size
operator|-
literal|6
decl_stmt|;
while|while
condition|(
name|y
operator|+
literal|1
operator|<
name|yo
operator|+
name|size
condition|)
block|{
name|g
operator|.
name|setColor
argument_list|(
name|edge1
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|x
operator|+
literal|1
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|<
name|dx
condition|)
block|{
name|g
operator|.
name|setColor
argument_list|(
name|fill
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
operator|+
literal|2
argument_list|,
name|y
argument_list|,
name|x
operator|+
literal|1
operator|+
name|dx
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
operator|+
literal|2
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|x
operator|+
literal|1
operator|+
name|dx
argument_list|,
name|y
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|setColor
argument_list|(
name|edge2
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
operator|+
name|dx
operator|+
literal|2
argument_list|,
name|y
argument_list|,
name|x
operator|+
name|dx
operator|+
literal|3
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
operator|+
name|dx
operator|+
literal|2
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|x
operator|+
name|dx
operator|+
literal|3
argument_list|,
name|y
operator|+
literal|1
argument_list|)
expr_stmt|;
name|x
operator|+=
literal|1
expr_stmt|;
name|y
operator|+=
literal|2
expr_stmt|;
name|dx
operator|-=
literal|2
expr_stmt|;
block|}
name|g
operator|.
name|setColor
argument_list|(
name|edge1
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|xo
operator|+
operator|(
name|size
operator|/
literal|2
operator|)
argument_list|,
name|yo
operator|+
name|size
operator|-
literal|1
argument_list|,
name|xo
operator|+
operator|(
name|size
operator|/
literal|2
operator|)
argument_list|,
name|yo
operator|+
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|drawUpArrow
parameter_list|(
name|Graphics
name|g
parameter_list|,
name|int
name|xo
parameter_list|,
name|int
name|yo
parameter_list|)
block|{
name|g
operator|.
name|setColor
argument_list|(
name|edge1
argument_list|)
expr_stmt|;
name|int
name|x
init|=
name|xo
operator|+
operator|(
name|size
operator|/
literal|2
operator|)
decl_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
argument_list|,
name|yo
argument_list|,
name|x
argument_list|,
name|yo
argument_list|)
expr_stmt|;
name|x
operator|--
expr_stmt|;
name|int
name|y
init|=
name|yo
operator|+
literal|1
decl_stmt|;
name|int
name|dx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|y
operator|+
literal|3
operator|<
name|yo
operator|+
name|size
condition|)
block|{
name|g
operator|.
name|setColor
argument_list|(
name|edge1
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|x
operator|+
literal|1
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|x
operator|+
literal|1
argument_list|,
name|y
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|<
name|dx
condition|)
block|{
name|g
operator|.
name|setColor
argument_list|(
name|fill
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
operator|+
literal|2
argument_list|,
name|y
argument_list|,
name|x
operator|+
literal|1
operator|+
name|dx
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
operator|+
literal|2
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|x
operator|+
literal|1
operator|+
name|dx
argument_list|,
name|y
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|setColor
argument_list|(
name|edge2
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
operator|+
name|dx
operator|+
literal|2
argument_list|,
name|y
argument_list|,
name|x
operator|+
name|dx
operator|+
literal|3
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|x
operator|+
name|dx
operator|+
literal|2
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|x
operator|+
name|dx
operator|+
literal|3
argument_list|,
name|y
operator|+
literal|1
argument_list|)
expr_stmt|;
name|x
operator|-=
literal|1
expr_stmt|;
name|y
operator|+=
literal|2
expr_stmt|;
name|dx
operator|+=
literal|2
expr_stmt|;
block|}
name|g
operator|.
name|setColor
argument_list|(
name|edge1
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|xo
argument_list|,
name|yo
operator|+
name|size
operator|-
literal|3
argument_list|,
name|xo
operator|+
literal|1
argument_list|,
name|yo
operator|+
name|size
operator|-
literal|3
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|edge2
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|xo
operator|+
literal|2
argument_list|,
name|yo
operator|+
name|size
operator|-
literal|2
argument_list|,
name|xo
operator|+
name|size
operator|-
literal|1
argument_list|,
name|yo
operator|+
name|size
operator|-
literal|2
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawLine
argument_list|(
name|xo
argument_list|,
name|yo
operator|+
name|size
operator|-
literal|1
argument_list|,
name|xo
operator|+
name|size
argument_list|,
name|yo
operator|+
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

