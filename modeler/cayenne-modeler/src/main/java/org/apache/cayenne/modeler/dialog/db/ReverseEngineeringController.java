begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbimport
operator|.
name|ReverseEngineering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|DbLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|DbLoaderConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|DefaultDbLoaderDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|FiltersConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|CatalogFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|SchemaFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ClassLoadingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|pref
operator|.
name|PreferenceDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|pref
operator|.
name|TreeEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|pref
operator|.
name|XMLFileEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|DBConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|BindingBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|ObjectBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A component for performing reverse engineering. Users can choose required dataMap and execute  * reverse engineering. Also they can see tree view of db objects clicking on sync button.  */
end_comment

begin_class
specifier|public
class|class
name|ReverseEngineeringController
extends|extends
name|CayenneController
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReverseEngineeringController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ProjectController
name|projectController
decl_stmt|;
specifier|protected
name|ReverseEngineeringView
name|view
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|DataMapViewModel
argument_list|>
name|reverseEngineeringMap
decl_stmt|;
specifier|protected
name|DBModel
name|dbModel
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|DbAdapter
name|adapter
decl_stmt|;
specifier|protected
name|DBConnectionInfo
name|connectionInfo
decl_stmt|;
specifier|protected
name|ObjectBinding
name|dataSourceBinding
decl_stmt|;
specifier|protected
name|Map
name|dataSources
decl_stmt|;
specifier|protected
name|String
name|dataSourceKey
decl_stmt|;
specifier|protected
name|boolean
name|canceled
decl_stmt|;
specifier|public
name|ReverseEngineeringController
parameter_list|(
name|ProjectController
name|controller
parameter_list|,
name|ReverseEngineeringView
name|source
parameter_list|)
block|{
name|super
argument_list|(
name|controller
argument_list|)
expr_stmt|;
name|this
operator|.
name|projectController
operator|=
name|controller
expr_stmt|;
name|this
operator|.
name|view
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|connectionInfo
operator|=
operator|new
name|DBConnectionInfo
argument_list|()
expr_stmt|;
name|this
operator|.
name|reverseEngineeringMap
operator|=
name|view
operator|.
name|getReverseEngineeringViewMap
argument_list|()
expr_stmt|;
name|initBindings
argument_list|()
expr_stmt|;
name|refreshDataSources
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initBindings
parameter_list|()
block|{
name|BindingBuilder
name|builder
init|=
operator|new
name|BindingBuilder
argument_list|(
name|getApplication
argument_list|()
operator|.
name|getBindingFactory
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|dataSourceBinding
operator|=
name|builder
operator|.
name|bindToComboSelection
argument_list|(
name|view
operator|.
name|getDataSources
argument_list|()
argument_list|,
literal|"dataSourceKey"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|view
operator|.
name|getSyncButton
argument_list|()
argument_list|,
literal|"syncAction()"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|view
operator|.
name|getExecuteButton
argument_list|()
argument_list|,
literal|"executeAction()"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|view
operator|.
name|getConfigButton
argument_list|()
argument_list|,
literal|"dataSourceConfigAction()"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|buildDBProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoadingService
name|classLoader
init|=
name|getApplication
argument_list|()
operator|.
name|getClassLoadingService
argument_list|()
decl_stmt|;
name|this
operator|.
name|connection
operator|=
name|connectionInfo
operator|.
name|makeDataSource
argument_list|(
name|classLoader
argument_list|)
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|this
operator|.
name|adapter
operator|=
name|connectionInfo
operator|.
name|makeAdapter
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|syncAction
parameter_list|()
throws|throws
name|SQLException
block|{
specifier|final
name|TreeEditor
name|treeEditor
init|=
name|view
operator|.
name|getTreeEditor
argument_list|()
decl_stmt|;
name|XMLFileEditor
name|xmlFileEditor
init|=
name|view
operator|.
name|getXmlFileEditor
argument_list|()
decl_stmt|;
name|xmlFileEditor
operator|.
name|removeAlertMessage
argument_list|()
expr_stmt|;
try|try
block|{
name|buildDBProperties
argument_list|()
expr_stmt|;
specifier|final
name|DbLoader
name|dbLoader
init|=
operator|new
name|DbLoader
argument_list|(
name|connection
argument_list|,
name|adapter
argument_list|,
operator|new
name|DefaultDbLoaderDelegate
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|DataMap
name|load
parameter_list|(
name|DbLoaderConfiguration
name|config
parameter_list|)
throws|throws
name|SQLException
block|{
name|DataMap
name|dataMap
init|=
operator|new
name|DataMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|procedureMap
init|=
name|loadProcedures
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|load
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|addProcedures
argument_list|(
name|procedureMap
argument_list|)
expr_stmt|;
return|return
name|dataMap
return|;
block|}
specifier|private
name|void
name|addProcedures
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|procedureMap
parameter_list|)
throws|throws
name|SQLException
block|{
name|DBElement
name|currentDBCatalog
decl_stmt|;
name|DBElement
name|currentDBSchema
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|procedure
range|:
name|procedureMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|supportCatalogs
argument_list|()
condition|)
block|{
name|String
name|dbCatalogName
init|=
name|procedure
operator|.
name|getValue
argument_list|()
operator|.
name|getCatalog
argument_list|()
decl_stmt|;
name|DBElement
name|dbCatalog
init|=
name|dbModel
operator|.
name|getExistingElement
argument_list|(
name|dbCatalogName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbCatalog
operator|!=
literal|null
condition|)
block|{
name|currentDBCatalog
operator|=
name|dbCatalog
expr_stmt|;
block|}
else|else
block|{
name|currentDBCatalog
operator|=
operator|new
name|DBCatalog
argument_list|(
name|dbCatalogName
argument_list|)
expr_stmt|;
name|dbModel
operator|.
name|addElement
argument_list|(
name|currentDBCatalog
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|supportSchemas
argument_list|()
condition|)
block|{
name|String
name|dbSchemaName
init|=
name|procedure
operator|.
name|getValue
argument_list|()
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|DBElement
name|dbSchema
init|=
name|currentDBCatalog
operator|.
name|getExistingElement
argument_list|(
name|dbSchemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbSchema
operator|!=
literal|null
condition|)
block|{
name|currentDBSchema
operator|=
name|dbSchema
expr_stmt|;
block|}
else|else
block|{
name|currentDBSchema
operator|=
operator|new
name|DBSchema
argument_list|(
name|dbSchemaName
argument_list|)
expr_stmt|;
name|currentDBCatalog
operator|.
name|addElement
argument_list|(
name|currentDBSchema
argument_list|)
expr_stmt|;
block|}
name|DBProcedure
name|currentProcedure
init|=
operator|new
name|DBProcedure
argument_list|(
name|procedure
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|currentDBSchema
operator|.
name|addElement
argument_list|(
name|currentProcedure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DBProcedure
name|currentProcedure
init|=
operator|new
name|DBProcedure
argument_list|(
name|procedure
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|currentDBCatalog
operator|.
name|addElement
argument_list|(
name|currentProcedure
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|supportSchemas
argument_list|()
condition|)
block|{
name|String
name|dbSchemaName
init|=
name|procedure
operator|.
name|getValue
argument_list|()
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|DBElement
name|dbSchema
init|=
name|dbModel
operator|.
name|getExistingElement
argument_list|(
name|dbSchemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbSchema
operator|!=
literal|null
condition|)
block|{
name|currentDBSchema
operator|=
name|dbSchema
expr_stmt|;
block|}
else|else
block|{
name|currentDBSchema
operator|=
operator|new
name|DBSchema
argument_list|(
name|dbSchemaName
argument_list|)
expr_stmt|;
name|dbModel
operator|.
name|addElement
argument_list|(
name|currentDBSchema
argument_list|)
expr_stmt|;
block|}
name|DBProcedure
name|currentProcedure
init|=
operator|new
name|DBProcedure
argument_list|(
name|procedure
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|currentDBSchema
operator|.
name|addElement
argument_list|(
name|currentProcedure
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createIfNotNull
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|SQLException
block|{
name|treeEditor
operator|.
name|setRoot
argument_list|(
name|dataSourceKey
argument_list|)
expr_stmt|;
name|dbModel
operator|=
operator|new
name|DBModel
argument_list|(
name|dataSourceKey
argument_list|)
expr_stmt|;
name|boolean
name|catalogSetted
init|=
literal|false
decl_stmt|;
name|DBElement
name|currentDBCatalog
init|=
literal|null
decl_stmt|;
name|DBElement
name|currentDBSchema
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CatalogFilter
name|catalog
range|:
name|config
operator|.
name|getFiltersConfig
argument_list|()
operator|.
name|catalogs
control|)
block|{
for|for
control|(
name|SchemaFilter
name|schema
range|:
name|catalog
operator|.
name|schemas
control|)
block|{
name|List
argument_list|<
name|DbEntity
argument_list|>
name|entityList
init|=
name|createTableLoader
argument_list|(
name|catalog
operator|.
name|name
argument_list|,
name|schema
operator|.
name|name
argument_list|,
name|schema
operator|.
name|tables
argument_list|)
operator|.
name|loadDbEntities
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|,
name|types
argument_list|)
decl_stmt|;
name|DbEntity
name|entityFromLoader
init|=
name|entityList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityFromLoader
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|catalogSetted
operator|&&
name|entityFromLoader
operator|.
name|getCatalog
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|currentDBCatalog
operator|=
operator|new
name|DBCatalog
argument_list|(
name|entityFromLoader
operator|.
name|getCatalog
argument_list|()
argument_list|)
expr_stmt|;
name|dbModel
operator|.
name|addElement
argument_list|(
name|currentDBCatalog
argument_list|)
expr_stmt|;
name|catalogSetted
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|entityFromLoader
operator|.
name|getSchema
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|currentDBSchema
operator|=
operator|new
name|DBSchema
argument_list|(
name|entityFromLoader
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentDBCatalog
operator|!=
literal|null
condition|)
block|{
name|currentDBCatalog
operator|.
name|addElement
argument_list|(
name|currentDBSchema
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dbModel
operator|.
name|addElement
argument_list|(
name|currentDBSchema
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DBEntity
name|currentDBEntity
decl_stmt|;
if|if
condition|(
name|currentDBSchema
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DbEntity
name|dbEntity
range|:
name|entityList
control|)
block|{
name|currentDBEntity
operator|=
operator|new
name|DBEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|currentDBSchema
operator|.
name|addElement
argument_list|(
name|currentDBEntity
argument_list|)
expr_stmt|;
for|for
control|(
name|DbAttribute
name|dbColumn
range|:
name|dbEntity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|currentDBEntity
operator|.
name|addElement
argument_list|(
operator|new
name|DBColumn
argument_list|(
name|dbColumn
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|DbEntity
name|dbEntity
range|:
name|entityList
control|)
block|{
name|currentDBEntity
operator|=
operator|new
name|DBEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DbAttribute
name|dbColumn
range|:
name|dbEntity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|currentDBEntity
operator|.
name|addElement
argument_list|(
operator|new
name|DBColumn
argument_list|(
name|dbColumn
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentDBCatalog
operator|.
name|addElement
argument_list|(
name|currentDBEntity
argument_list|)
expr_stmt|;
block|}
block|}
name|currentDBSchema
operator|=
literal|null
expr_stmt|;
block|}
name|catalogSetted
operator|=
literal|false
expr_stmt|;
name|currentDBCatalog
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createIfNull
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|SQLException
block|{
name|treeEditor
operator|.
name|setRoot
argument_list|(
name|dataSourceKey
argument_list|)
expr_stmt|;
name|dbModel
operator|=
operator|new
name|DBModel
argument_list|(
name|dataSourceKey
argument_list|)
expr_stmt|;
name|DBElement
name|currentDBCatalog
decl_stmt|;
name|DBElement
name|currentDBSchema
decl_stmt|;
for|for
control|(
name|CatalogFilter
name|catalog
range|:
name|config
operator|.
name|getFiltersConfig
argument_list|()
operator|.
name|catalogs
control|)
block|{
for|for
control|(
name|SchemaFilter
name|schema
range|:
name|catalog
operator|.
name|schemas
control|)
block|{
name|List
argument_list|<
name|DbEntity
argument_list|>
name|entityList
init|=
name|createTableLoader
argument_list|(
name|catalog
operator|.
name|name
argument_list|,
name|schema
operator|.
name|name
argument_list|,
name|schema
operator|.
name|tables
argument_list|)
operator|.
name|loadDbEntities
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|,
name|types
argument_list|)
decl_stmt|;
for|for
control|(
name|DbEntity
name|dbEntity
range|:
name|entityList
control|)
block|{
if|if
condition|(
name|supportCatalogs
argument_list|()
condition|)
block|{
name|String
name|dbCatalogName
init|=
name|dbEntity
operator|.
name|getCatalog
argument_list|()
decl_stmt|;
name|DBElement
name|dbCatalog
init|=
name|dbModel
operator|.
name|getExistingElement
argument_list|(
name|dbCatalogName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbCatalog
operator|!=
literal|null
condition|)
block|{
name|currentDBCatalog
operator|=
name|dbCatalog
expr_stmt|;
block|}
else|else
block|{
name|currentDBCatalog
operator|=
operator|new
name|DBCatalog
argument_list|(
name|dbCatalogName
argument_list|)
expr_stmt|;
name|dbModel
operator|.
name|addElement
argument_list|(
name|currentDBCatalog
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|supportSchemas
argument_list|()
condition|)
block|{
name|String
name|dbSchemaName
init|=
name|dbEntity
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|DBElement
name|dbSchema
init|=
name|currentDBCatalog
operator|.
name|getExistingElement
argument_list|(
name|dbSchemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbSchema
operator|!=
literal|null
condition|)
block|{
name|currentDBSchema
operator|=
name|dbSchema
expr_stmt|;
block|}
else|else
block|{
name|currentDBSchema
operator|=
operator|new
name|DBSchema
argument_list|(
name|dbSchemaName
argument_list|)
expr_stmt|;
name|currentDBCatalog
operator|.
name|addElement
argument_list|(
name|currentDBSchema
argument_list|)
expr_stmt|;
block|}
name|DBEntity
name|currentDBEntity
init|=
operator|new
name|DBEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|currentDBSchema
operator|.
name|addElement
argument_list|(
name|currentDBEntity
argument_list|)
expr_stmt|;
for|for
control|(
name|DbAttribute
name|dbColumn
range|:
name|dbEntity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|currentDBEntity
operator|.
name|addElement
argument_list|(
operator|new
name|DBColumn
argument_list|(
name|dbColumn
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|DBEntity
name|currentDBEntity
init|=
operator|new
name|DBEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|currentDBCatalog
operator|.
name|addElement
argument_list|(
name|currentDBEntity
argument_list|)
expr_stmt|;
for|for
control|(
name|DbAttribute
name|dbColumn
range|:
name|dbEntity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|currentDBEntity
operator|.
name|addElement
argument_list|(
operator|new
name|DBColumn
argument_list|(
name|dbColumn
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|supportSchemas
argument_list|()
condition|)
block|{
name|String
name|dbSchemaName
init|=
name|dbEntity
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|DBElement
name|dbSchema
init|=
name|dbModel
operator|.
name|getExistingElement
argument_list|(
name|dbSchemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbSchema
operator|!=
literal|null
condition|)
block|{
name|currentDBSchema
operator|=
name|dbSchema
expr_stmt|;
block|}
else|else
block|{
name|currentDBSchema
operator|=
operator|new
name|DBSchema
argument_list|(
name|dbSchemaName
argument_list|)
expr_stmt|;
name|dbModel
operator|.
name|addElement
argument_list|(
name|currentDBSchema
argument_list|)
expr_stmt|;
block|}
name|DBEntity
name|currentDBEntity
init|=
operator|new
name|DBEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|currentDBSchema
operator|.
name|addElement
argument_list|(
name|currentDBEntity
argument_list|)
expr_stmt|;
for|for
control|(
name|DbAttribute
name|dbColumn
range|:
name|dbEntity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|currentDBEntity
operator|.
name|addElement
argument_list|(
operator|new
name|DBColumn
argument_list|(
name|dbColumn
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|load
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|)
throws|throws
name|SQLException
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Schema loading..."
argument_list|)
expr_stmt|;
name|String
index|[]
name|types
init|=
name|config
operator|.
name|getTableTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|types
operator|=
name|getDefaultTableTypes
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isNullDetected
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CatalogFilter
name|catalog
range|:
name|config
operator|.
name|getFiltersConfig
argument_list|()
operator|.
name|catalogs
control|)
block|{
for|for
control|(
name|SchemaFilter
name|schema
range|:
name|catalog
operator|.
name|schemas
control|)
block|{
if|if
condition|(
name|schema
operator|.
name|name
operator|==
literal|null
operator|&&
name|catalog
operator|.
name|name
operator|==
literal|null
condition|)
block|{
name|isNullDetected
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isNullDetected
condition|)
block|{
name|createIfNull
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createIfNotNull
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|ReverseEngineering
name|reverseEngineering
init|=
name|xmlFileEditor
operator|.
name|convertTextIntoReverseEngineering
argument_list|()
decl_stmt|;
name|FiltersConfigBuilder
name|filtersConfigBuilder
init|=
operator|new
name|FiltersConfigBuilder
argument_list|(
name|reverseEngineering
argument_list|)
decl_stmt|;
name|DbLoaderConfiguration
name|dbLoaderConfiguration
init|=
operator|new
name|DbLoaderConfiguration
argument_list|()
decl_stmt|;
name|dbLoaderConfiguration
operator|.
name|setFiltersConfig
argument_list|(
name|filtersConfigBuilder
operator|.
name|filtersConfig
argument_list|()
argument_list|)
expr_stmt|;
name|dbLoader
operator|.
name|load
argument_list|(
name|dbLoaderConfiguration
argument_list|)
expr_stmt|;
name|String
name|mapName
init|=
name|projectController
operator|.
name|getCurrentDataMap
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|DataMapViewModel
name|dataMapViewModel
init|=
operator|new
name|DataMapViewModel
argument_list|(
name|mapName
argument_list|)
decl_stmt|;
name|dataMapViewModel
operator|.
name|setReverseEngineeringTree
argument_list|(
name|dbModel
argument_list|)
expr_stmt|;
name|dataMapViewModel
operator|.
name|setReverseEngineeringText
argument_list|(
name|xmlFileEditor
operator|.
name|getView
argument_list|()
operator|.
name|getEditorPane
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|reverseEngineeringMap
operator|.
name|put
argument_list|(
name|mapName
argument_list|,
name|dataMapViewModel
argument_list|)
expr_stmt|;
name|treeEditor
operator|.
name|convertTreeViewIntoTreeNode
argument_list|(
name|dbModel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|xmlFileEditor
operator|.
name|addAlertMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|executeAction
parameter_list|()
block|{
name|XMLFileEditor
name|xmlFileEditor
init|=
name|view
operator|.
name|getXmlFileEditor
argument_list|()
decl_stmt|;
name|xmlFileEditor
operator|.
name|removeAlertMessage
argument_list|()
expr_stmt|;
try|try
block|{
name|buildDBProperties
argument_list|()
expr_stmt|;
name|ReverseEngineering
name|reverseEngineering
init|=
name|xmlFileEditor
operator|.
name|convertTextIntoReverseEngineering
argument_list|()
decl_stmt|;
specifier|final
name|DbLoaderHelper
name|helper
init|=
operator|new
name|DbLoaderHelper
argument_list|(
name|projectController
argument_list|,
name|connection
argument_list|,
name|adapter
argument_list|,
name|connectionInfo
argument_list|,
name|reverseEngineering
argument_list|)
decl_stmt|;
name|Thread
name|th
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|helper
operator|.
name|execute
argument_list|()
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|application
operator|.
name|getUndoManager
argument_list|()
operator|.
name|discardAllEdits
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|th
operator|.
name|start
argument_list|()
expr_stmt|;
name|view
operator|.
name|setTempDataMap
argument_list|(
name|projectController
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|xmlFileEditor
operator|.
name|addAlertMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns configured DB connection.      */
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
comment|/**      * Returns configured DbAdapter.      */
specifier|public
name|DbAdapter
name|getAdapter
parameter_list|()
block|{
return|return
name|adapter
return|;
block|}
specifier|public
name|String
name|getDataSourceKey
parameter_list|()
block|{
return|return
name|dataSourceKey
return|;
block|}
specifier|public
name|void
name|setDataSourceKey
parameter_list|(
name|String
name|dataSourceKey
parameter_list|)
block|{
name|XMLFileEditor
name|xmlFileEditor
init|=
name|view
operator|.
name|getXmlFileEditor
argument_list|()
decl_stmt|;
name|xmlFileEditor
operator|.
name|removeAlertMessage
argument_list|()
expr_stmt|;
name|this
operator|.
name|dataSourceKey
operator|=
name|dataSourceKey
expr_stmt|;
name|DBConnectionInfo
name|currentInfo
init|=
operator|(
name|DBConnectionInfo
operator|)
name|dataSources
operator|.
name|get
argument_list|(
name|dataSourceKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentInfo
operator|!=
literal|null
condition|)
block|{
name|currentInfo
operator|.
name|copyTo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connectionInfo
operator|=
operator|new
name|DBConnectionInfo
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Opens preferences panel to allow configuration of DataSource presets.      */
specifier|public
name|void
name|dataSourceConfigAction
parameter_list|()
block|{
name|PreferenceDialog
name|prefs
init|=
operator|new
name|PreferenceDialog
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|prefs
operator|.
name|showDataSourceEditorAction
argument_list|(
name|dataSourceKey
argument_list|)
expr_stmt|;
name|refreshDataSources
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
specifier|protected
name|void
name|refreshDataSources
parameter_list|()
block|{
name|this
operator|.
name|dataSources
operator|=
name|getApplication
argument_list|()
operator|.
name|getCayenneProjectPreferences
argument_list|()
operator|.
name|getDetailObject
argument_list|(
name|DBConnectionInfo
operator|.
name|class
argument_list|)
operator|.
name|getChildrenPreferences
argument_list|()
expr_stmt|;
comment|// 1.2 migration fix - update data source adapter names
name|Iterator
name|it
init|=
name|dataSources
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|String
name|_12package
init|=
literal|"org.objectstyle.cayenne."
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DBConnectionInfo
name|info
init|=
operator|(
name|DBConnectionInfo
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getDbAdapter
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getDbAdapter
argument_list|()
operator|.
name|startsWith
argument_list|(
name|_12package
argument_list|)
condition|)
block|{
name|info
operator|.
name|setDbAdapter
argument_list|(
literal|"org.apache.cayenne."
operator|+
name|info
operator|.
name|getDbAdapter
argument_list|()
operator|.
name|substring
argument_list|(
name|_12package
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
index|[]
name|keys
init|=
name|dataSources
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDataSources
argument_list|()
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataSources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dataSourceKey
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keys
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|key
operator|=
name|keys
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|setDataSourceKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDataSourceKey
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dataSourceBinding
operator|.
name|updateView
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

