begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Toolkit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|FlavorEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|FlavorListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|UnsupportedFlavorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|UndoableEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EmbeddableAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|MappingNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ProcedureParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|MapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|DefaultUniqueNameGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|NameCheckers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|ErrorDebugDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|query
operator|.
name|QueryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|ObjCallbackMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|CallbackMethodEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
operator|.
name|PasteCompoundUndoableEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
operator|.
name|PasteUndoableEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTransferable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|AbstractQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|EJBQLQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_comment
comment|/**  * Action for pasting entities, queries etc. from the system buffer  */
end_comment

begin_class
specifier|public
class|class
name|PasteAction
extends|extends
name|CayenneAction
implements|implements
name|FlavorListener
block|{
specifier|private
specifier|static
specifier|final
name|String
name|COPY_PATTERN
init|=
literal|"Copy of %s (%d)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|getActionName
parameter_list|()
block|{
return|return
literal|"Paste"
return|;
block|}
comment|/**      * Constructor for PasteAction      */
specifier|public
name|PasteAction
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|getActionName
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
comment|// add listener, so that button state would update event if clipboard was filled
comment|// by other app
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|addFlavorListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIconName
parameter_list|()
block|{
return|return
literal|"icon-paste.gif"
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyStroke
name|getAcceleratorKey
parameter_list|()
block|{
return|return
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_V
argument_list|,
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getMenuShortcutKeyMask
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Performs pasting items from the system buffer      */
annotation|@
name|Override
specifier|public
name|void
name|performAction
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|Object
name|content
init|=
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|getData
argument_list|(
name|CayenneTransferable
operator|.
name|CAYENNE_FLAVOR
argument_list|)
decl_stmt|;
name|Object
name|currentObject
init|=
name|getProjectController
argument_list|()
operator|.
name|getCurrentObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
operator|&&
name|currentObject
operator|!=
literal|null
condition|)
block|{
name|DataChannelDescriptor
name|domain
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|getProjectController
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|DataMap
name|map
init|=
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
name|UndoableEdit
name|undoableEdit
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|List
condition|)
block|{
name|undoableEdit
operator|=
operator|new
name|PasteCompoundUndoableEdit
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
operator|(
name|List
operator|)
name|content
control|)
block|{
name|paste
argument_list|(
name|currentObject
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|undoableEdit
operator|.
name|addEdit
argument_list|(
operator|new
name|PasteUndoableEdit
argument_list|(
name|domain
argument_list|,
name|map
argument_list|,
name|currentObject
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|paste
argument_list|(
name|currentObject
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|undoableEdit
operator|=
operator|new
name|PasteUndoableEdit
argument_list|(
name|domain
argument_list|,
name|map
argument_list|,
name|currentObject
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undoableEdit
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedFlavorException
name|ufe
parameter_list|)
block|{
comment|// do nothing
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ErrorDebugDialog
operator|.
name|guiException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|paste
parameter_list|(
name|Object
name|where
parameter_list|,
name|Object
name|content
parameter_list|)
block|{
name|paste
argument_list|(
name|where
argument_list|,
name|content
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|getProjectController
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|,
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Pastes single object      */
specifier|public
name|void
name|paste
parameter_list|(
name|Object
name|where
parameter_list|,
name|Object
name|content
parameter_list|,
name|DataChannelDescriptor
name|domain
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
specifier|final
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
comment|/**          * Add a little intelligence - if a tree leaf is selected, we can paste to a          * parent datamap          */
if|if
condition|(
name|isTreeLeaf
argument_list|(
name|where
argument_list|)
operator|&&
name|isTreeLeaf
argument_list|(
name|content
argument_list|)
condition|)
block|{
name|where
operator|=
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|where
operator|instanceof
name|DataChannelDescriptor
operator|||
name|where
operator|instanceof
name|DataNodeDescriptor
operator|)
operator|&&
name|content
operator|instanceof
name|DataMap
condition|)
block|{
comment|// paste DataMap to DataDomain or DataNode
name|DataMap
name|dataMap
init|=
operator|(
operator|(
name|DataMap
operator|)
name|content
operator|)
decl_stmt|;
name|dataMap
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|DataMap
argument_list|,
name|COPY_PATTERN
argument_list|,
name|domain
argument_list|,
name|dataMap
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/**              * Update all names in the new DataMap, so that they would not conflict with              * names from other datamaps of this domain              */
comment|// add some intelligence - if we rename an entity, we should rename all links
comment|// to it as well
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|renamedDbEntities
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|renamedObjEntities
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|renamedEmbeddables
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DbEntity
name|dbEntity
range|:
name|dataMap
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
name|String
name|oldName
init|=
name|dbEntity
operator|.
name|getName
argument_list|()
decl_stmt|;
name|dbEntity
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|DbEntity
argument_list|,
name|COPY_PATTERN
argument_list|,
name|domain
argument_list|,
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|oldName
operator|.
name|equals
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|renamedDbEntities
operator|.
name|put
argument_list|(
name|oldName
argument_list|,
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ObjEntity
name|objEntity
range|:
name|dataMap
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
name|String
name|oldName
init|=
name|objEntity
operator|.
name|getName
argument_list|()
decl_stmt|;
name|objEntity
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|ObjEntity
argument_list|,
name|COPY_PATTERN
argument_list|,
name|domain
argument_list|,
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|oldName
operator|.
name|equals
argument_list|(
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|renamedObjEntities
operator|.
name|put
argument_list|(
name|oldName
argument_list|,
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Embeddable
name|embeddable
range|:
name|dataMap
operator|.
name|getEmbeddables
argument_list|()
control|)
block|{
name|String
name|oldName
init|=
name|embeddable
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|embeddable
operator|.
name|setClassName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|Embeddable
argument_list|,
name|COPY_PATTERN
argument_list|,
name|domain
argument_list|,
name|embeddable
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|oldName
operator|.
name|equals
argument_list|(
name|embeddable
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
name|renamedEmbeddables
operator|.
name|put
argument_list|(
name|oldName
argument_list|,
name|embeddable
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Procedure
name|procedure
range|:
name|dataMap
operator|.
name|getProcedures
argument_list|()
control|)
block|{
name|procedure
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|Procedure
argument_list|,
name|COPY_PATTERN
argument_list|,
name|domain
argument_list|,
name|procedure
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Query
name|query
range|:
name|dataMap
operator|.
name|getQueries
argument_list|()
control|)
block|{
operator|(
operator|(
name|AbstractQuery
operator|)
name|query
operator|)
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|SelectQuery
argument_list|,
name|COPY_PATTERN
argument_list|,
name|domain
argument_list|,
name|query
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// if an entity was renamed, we rename all links to it too
for|for
control|(
name|DbEntity
name|dbEntity
range|:
name|dataMap
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
for|for
control|(
name|DbRelationship
name|rel
range|:
name|dbEntity
operator|.
name|getRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|renamedDbEntities
operator|.
name|containsKey
argument_list|(
name|rel
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
condition|)
block|{
name|rel
operator|.
name|setTargetEntityName
argument_list|(
name|renamedDbEntities
operator|.
name|get
argument_list|(
name|rel
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ObjEntity
name|objEntity
range|:
name|dataMap
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
if|if
condition|(
name|renamedDbEntities
operator|.
name|containsKey
argument_list|(
name|objEntity
operator|.
name|getDbEntityName
argument_list|()
argument_list|)
condition|)
block|{
name|objEntity
operator|.
name|setDbEntityName
argument_list|(
name|renamedDbEntities
operator|.
name|get
argument_list|(
name|objEntity
operator|.
name|getDbEntityName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|renamedObjEntities
operator|.
name|containsKey
argument_list|(
name|objEntity
operator|.
name|getSuperEntityName
argument_list|()
argument_list|)
condition|)
block|{
name|objEntity
operator|.
name|setSuperEntityName
argument_list|(
name|renamedDbEntities
operator|.
name|get
argument_list|(
name|objEntity
operator|.
name|getSuperEntityName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ObjRelationship
name|rel
range|:
name|objEntity
operator|.
name|getRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|renamedObjEntities
operator|.
name|containsKey
argument_list|(
name|rel
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
condition|)
block|{
name|rel
operator|.
name|setTargetEntityName
argument_list|(
name|renamedObjEntities
operator|.
name|get
argument_list|(
name|rel
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|mediator
operator|.
name|addDataMap
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|where
operator|instanceof
name|DataMap
condition|)
block|{
comment|// paste DbEntity to DataMap
specifier|final
name|DataMap
name|dataMap
init|=
operator|(
operator|(
name|DataMap
operator|)
name|where
operator|)
decl_stmt|;
comment|// clear data map parent cache
name|clearDataMapCache
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|DbEntity
condition|)
block|{
name|DbEntity
name|dbEntity
init|=
operator|(
name|DbEntity
operator|)
name|content
decl_stmt|;
name|dbEntity
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|DbEntity
argument_list|,
name|COPY_PATTERN
argument_list|,
name|domain
argument_list|,
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|CreateDbEntityAction
operator|.
name|fireDbEntityEvent
argument_list|(
name|this
argument_list|,
name|mediator
argument_list|,
name|dbEntity
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|content
operator|instanceof
name|ObjEntity
condition|)
block|{
comment|// paste ObjEntity to DataMap
name|ObjEntity
name|objEntity
init|=
operator|(
name|ObjEntity
operator|)
name|content
decl_stmt|;
name|objEntity
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|ObjEntity
argument_list|,
name|COPY_PATTERN
argument_list|,
name|domain
argument_list|,
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addObjEntity
argument_list|(
name|objEntity
argument_list|)
expr_stmt|;
name|CreateObjEntityAction
operator|.
name|fireObjEntityEvent
argument_list|(
name|this
argument_list|,
name|mediator
argument_list|,
name|dataMap
argument_list|,
name|objEntity
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|content
operator|instanceof
name|Embeddable
condition|)
block|{
comment|// paste Embeddable to DataMap
name|Embeddable
name|embeddable
init|=
operator|(
name|Embeddable
operator|)
name|content
decl_stmt|;
name|embeddable
operator|.
name|setClassName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|Embeddable
argument_list|,
name|COPY_PATTERN
argument_list|,
name|domain
argument_list|,
name|embeddable
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addEmbeddable
argument_list|(
name|embeddable
argument_list|)
expr_stmt|;
name|CreateEmbeddableAction
operator|.
name|fireEmbeddableEvent
argument_list|(
name|this
argument_list|,
name|mediator
argument_list|,
name|dataMap
argument_list|,
name|embeddable
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|content
operator|instanceof
name|EJBQLQuery
condition|)
block|{
name|EJBQLQuery
name|query
init|=
operator|(
name|EJBQLQuery
operator|)
name|content
decl_stmt|;
name|query
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|SelectQuery
argument_list|,
name|COPY_PATTERN
argument_list|,
name|domain
argument_list|,
name|query
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setDataMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|QueryType
operator|.
name|fireQueryEvent
argument_list|(
name|this
argument_list|,
name|mediator
argument_list|,
name|dataMap
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|content
operator|instanceof
name|Query
condition|)
block|{
comment|// paste Query to DataMap
name|AbstractQuery
name|query
init|=
operator|(
name|AbstractQuery
operator|)
name|content
decl_stmt|;
name|query
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|SelectQuery
argument_list|,
name|COPY_PATTERN
argument_list|,
name|domain
argument_list|,
name|query
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setDataMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|QueryType
operator|.
name|fireQueryEvent
argument_list|(
name|this
argument_list|,
name|mediator
argument_list|,
name|dataMap
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|content
operator|instanceof
name|Procedure
condition|)
block|{
comment|// paste Procedure to DataMap
name|Procedure
name|procedure
init|=
operator|(
name|Procedure
operator|)
name|content
decl_stmt|;
name|procedure
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|Procedure
argument_list|,
name|COPY_PATTERN
argument_list|,
name|domain
argument_list|,
name|procedure
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addProcedure
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
name|CreateProcedureAction
operator|.
name|fireProcedureEvent
argument_list|(
name|this
argument_list|,
name|mediator
argument_list|,
name|dataMap
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|where
operator|instanceof
name|DbEntity
condition|)
block|{
specifier|final
name|DbEntity
name|dbEntity
init|=
operator|(
name|DbEntity
operator|)
name|where
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|DbAttribute
condition|)
block|{
name|DbAttribute
name|attr
init|=
operator|(
name|DbAttribute
operator|)
name|content
decl_stmt|;
name|attr
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|DbAttribute
argument_list|,
name|COPY_PATTERN
argument_list|,
name|dbEntity
argument_list|,
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|CreateAttributeAction
operator|.
name|fireDbAttributeEvent
argument_list|(
name|this
argument_list|,
name|mediator
argument_list|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|dbEntity
argument_list|,
name|attr
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|content
operator|instanceof
name|DbRelationship
condition|)
block|{
name|DbRelationship
name|rel
init|=
operator|(
name|DbRelationship
operator|)
name|content
decl_stmt|;
name|rel
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|DbRelationship
argument_list|,
name|COPY_PATTERN
argument_list|,
name|dbEntity
argument_list|,
name|rel
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addRelationship
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|CreateRelationshipAction
operator|.
name|fireDbRelationshipEvent
argument_list|(
name|this
argument_list|,
name|mediator
argument_list|,
name|dbEntity
argument_list|,
name|rel
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|where
operator|instanceof
name|ObjEntity
condition|)
block|{
specifier|final
name|ObjEntity
name|objEntity
init|=
operator|(
name|ObjEntity
operator|)
name|where
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|ObjAttribute
condition|)
block|{
name|ObjAttribute
name|attr
init|=
operator|(
name|ObjAttribute
operator|)
name|content
decl_stmt|;
name|attr
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|ObjAttribute
argument_list|,
name|COPY_PATTERN
argument_list|,
name|objEntity
argument_list|,
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|addAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|CreateAttributeAction
operator|.
name|fireObjAttributeEvent
argument_list|(
name|this
argument_list|,
name|mediator
argument_list|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|objEntity
argument_list|,
name|attr
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|content
operator|instanceof
name|ObjRelationship
condition|)
block|{
name|ObjRelationship
name|rel
init|=
operator|(
name|ObjRelationship
operator|)
name|content
decl_stmt|;
name|rel
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|ObjRelationship
argument_list|,
name|COPY_PATTERN
argument_list|,
name|objEntity
argument_list|,
name|rel
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|addRelationship
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|CreateRelationshipAction
operator|.
name|fireObjRelationshipEvent
argument_list|(
name|this
argument_list|,
name|mediator
argument_list|,
name|objEntity
argument_list|,
name|rel
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|content
operator|instanceof
name|ObjCallbackMethod
condition|)
block|{
name|ObjCallbackMethod
name|method
init|=
operator|(
name|ObjCallbackMethod
operator|)
name|content
decl_stmt|;
name|method
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|ObjCallbackMethod
argument_list|,
name|COPY_PATTERN
argument_list|,
name|objEntity
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getCallbackDescriptor
argument_list|(
name|mediator
operator|.
name|getCurrentCallbackType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|addCallbackMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CallbackMethodEvent
name|ce
init|=
operator|new
name|CallbackMethodEvent
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|MapEvent
operator|.
name|ADD
argument_list|)
decl_stmt|;
name|getProjectController
argument_list|()
operator|.
name|fireCallbackMethodEvent
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|where
operator|instanceof
name|Embeddable
condition|)
block|{
specifier|final
name|Embeddable
name|embeddable
init|=
operator|(
name|Embeddable
operator|)
name|where
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|EmbeddableAttribute
condition|)
block|{
name|EmbeddableAttribute
name|attr
init|=
operator|(
name|EmbeddableAttribute
operator|)
name|content
decl_stmt|;
name|attr
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|EmbeddableAttribute
argument_list|,
name|COPY_PATTERN
argument_list|,
name|embeddable
argument_list|,
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|embeddable
operator|.
name|addAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|CreateAttributeAction
operator|.
name|fireEmbeddableAttributeEvent
argument_list|(
name|this
argument_list|,
name|mediator
argument_list|,
name|embeddable
argument_list|,
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|where
operator|instanceof
name|Procedure
condition|)
block|{
comment|// paste param to procedure
specifier|final
name|Procedure
name|procedure
init|=
operator|(
name|Procedure
operator|)
name|where
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|ProcedureParameter
condition|)
block|{
name|ProcedureParameter
name|param
init|=
operator|(
name|ProcedureParameter
operator|)
name|content
decl_stmt|;
name|param
operator|.
name|setName
argument_list|(
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|ProcedureParameter
argument_list|,
name|COPY_PATTERN
argument_list|,
name|procedure
argument_list|,
name|param
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|procedure
operator|.
name|addCallParameter
argument_list|(
name|param
argument_list|)
expr_stmt|;
name|CreateProcedureParameterAction
operator|.
name|fireProcedureParameterEvent
argument_list|(
name|this
argument_list|,
name|mediator
argument_list|,
name|procedure
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|clearDataMapCache
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|MappingNamespace
name|ns
init|=
name|dataMap
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|instanceof
name|EntityResolver
condition|)
block|{
operator|(
operator|(
name|EntityResolver
operator|)
name|ns
operator|)
operator|.
name|refreshMappingCache
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns<code>true</code> if last object in the path contains a removable object.      */
annotation|@
name|Override
specifier|public
name|boolean
name|enableForPath
parameter_list|(
name|ConfigurationNode
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getState
argument_list|()
return|;
block|}
comment|/**      * Enables or disables the action, judging last selected component      */
specifier|public
name|void
name|updateState
parameter_list|()
block|{
name|setEnabled
argument_list|(
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns desired enable state for this action      */
specifier|private
name|boolean
name|getState
parameter_list|()
block|{
try|try
block|{
name|Object
name|content
init|=
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|getData
argument_list|(
name|CayenneTransferable
operator|.
name|CAYENNE_FLAVOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|List
condition|)
block|{
name|content
operator|=
operator|(
operator|(
name|List
operator|)
name|content
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|Object
name|currentObject
init|=
name|getProjectController
argument_list|()
operator|.
name|getCurrentObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentObject
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|/**              * Checking all avaliable pairs source-pasting object              */
return|return
operator|(
operator|(
name|currentObject
operator|instanceof
name|DataChannelDescriptor
operator|||
name|currentObject
operator|instanceof
name|DataNodeDescriptor
operator|)
operator|&&
name|content
operator|instanceof
name|DataMap
operator|)
operator|||
operator|(
name|currentObject
operator|instanceof
name|DataMap
operator|&&
name|isTreeLeaf
argument_list|(
name|content
argument_list|)
operator|)
operator|||
operator|(
name|currentObject
operator|instanceof
name|DbEntity
operator|&&
operator|(
name|content
operator|instanceof
name|DbAttribute
operator|||
name|content
operator|instanceof
name|DbRelationship
operator|||
name|isTreeLeaf
argument_list|(
name|content
argument_list|)
operator|)
operator|)
operator|||
operator|(
name|currentObject
operator|instanceof
name|ObjEntity
operator|&&
operator|(
name|content
operator|instanceof
name|ObjAttribute
operator|||
name|content
operator|instanceof
name|ObjRelationship
operator|||
name|content
operator|instanceof
name|ObjCallbackMethod
operator|||
name|isTreeLeaf
argument_list|(
name|content
argument_list|)
operator|)
operator|)
operator|||
operator|(
name|currentObject
operator|instanceof
name|Embeddable
operator|&&
operator|(
name|content
operator|instanceof
name|EmbeddableAttribute
operator|||
name|isTreeLeaf
argument_list|(
name|content
argument_list|)
operator|)
operator|)
operator|||
operator|(
name|currentObject
operator|instanceof
name|Procedure
operator|&&
operator|(
name|content
operator|instanceof
name|ProcedureParameter
operator|||
name|isTreeLeaf
argument_list|(
name|content
argument_list|)
operator|)
operator|||
operator|(
name|currentObject
operator|instanceof
name|Query
operator|&&
name|isTreeLeaf
argument_list|(
name|content
argument_list|)
operator|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * @return true if the object is in a lowest level of the tree      */
specifier|private
name|boolean
name|isTreeLeaf
parameter_list|(
name|Object
name|content
parameter_list|)
block|{
return|return
name|content
operator|instanceof
name|DbEntity
operator|||
name|content
operator|instanceof
name|ObjEntity
operator|||
name|content
operator|instanceof
name|Embeddable
operator|||
name|content
operator|instanceof
name|Procedure
operator|||
name|content
operator|instanceof
name|Query
return|;
block|}
specifier|public
name|void
name|flavorsChanged
parameter_list|(
name|FlavorEvent
name|e
parameter_list|)
block|{
name|updateState
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

