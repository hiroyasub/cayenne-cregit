begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
operator|.
name|NameBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|MapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|RelationshipEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|DbRelationshipDialogView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|RelationshipDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
operator|.
name|CreateRelationshipUndoableEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
operator|.
name|RelationshipUndoableEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ModelerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|combo
operator|.
name|AutoCompletion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|extension
operator|.
name|info
operator|.
name|ObjectInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|DbRelationshipDialog
extends|extends
name|CayenneController
block|{
specifier|private
name|DbRelationship
name|relationship
decl_stmt|;
specifier|private
name|DbRelationship
name|reverseRelationship
decl_stmt|;
specifier|private
name|DbRelationshipDialogView
name|view
decl_stmt|;
specifier|private
name|boolean
name|isCreate
init|=
literal|false
decl_stmt|;
specifier|private
name|ProjectController
name|projectController
decl_stmt|;
specifier|private
name|RelationshipUndoableEdit
name|undo
decl_stmt|;
specifier|public
name|DbRelationshipDialog
parameter_list|(
name|ProjectController
name|projectController
parameter_list|)
block|{
name|this
operator|.
name|view
operator|=
operator|new
name|DbRelationshipDialogView
argument_list|()
expr_stmt|;
name|this
operator|.
name|projectController
operator|=
name|projectController
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
specifier|public
name|DbRelationshipDialog
name|createNewRaltionship
parameter_list|(
name|DbEntity
name|dbEntity
parameter_list|)
block|{
name|isCreate
operator|=
literal|true
expr_stmt|;
name|DbRelationship
name|rel
init|=
operator|new
name|DbRelationship
argument_list|()
decl_stmt|;
name|rel
operator|.
name|setName
argument_list|(
name|NameBuilder
operator|.
name|builder
argument_list|(
name|rel
argument_list|,
name|dbEntity
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|rel
operator|.
name|setSourceEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
return|return
name|modifyRaltionship
argument_list|(
name|rel
argument_list|)
return|;
block|}
specifier|public
name|DbRelationshipDialog
name|modifyRaltionship
parameter_list|(
name|DbRelationship
name|dbRelationship
parameter_list|)
block|{
name|this
operator|.
name|undo
operator|=
operator|new
name|RelationshipUndoableEdit
argument_list|(
name|dbRelationship
argument_list|)
expr_stmt|;
name|this
operator|.
name|relationship
operator|=
name|dbRelationship
expr_stmt|;
name|this
operator|.
name|reverseRelationship
operator|=
name|this
operator|.
name|relationship
operator|.
name|getReverseRelationship
argument_list|()
expr_stmt|;
if|if
condition|(
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Null source entity: %s"
argument_list|,
name|relationship
argument_list|)
throw|;
block|}
if|if
condition|(
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getDataMap
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Null DataMap: %s"
argument_list|,
name|relationship
operator|.
name|getSourceEntity
argument_list|()
argument_list|)
throw|;
block|}
name|initController
argument_list|()
expr_stmt|;
name|initFromModel
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|startUp
parameter_list|()
block|{
name|view
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initFromModel
parameter_list|()
block|{
name|TargetComboBoxModel
name|targetComboBoxModel
init|=
operator|new
name|TargetComboBoxModel
argument_list|(
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getDataMap
argument_list|()
operator|.
name|getDbEntities
argument_list|()
argument_list|)
decl_stmt|;
name|view
operator|.
name|getTargetEntities
argument_list|()
operator|.
name|setModel
argument_list|(
name|targetComboBoxModel
argument_list|)
expr_stmt|;
name|view
operator|.
name|getSourceName
argument_list|()
operator|.
name|setText
argument_list|(
name|relationship
operator|.
name|getSourceEntityName
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|getToDepPk
argument_list|()
operator|.
name|setSelected
argument_list|(
name|relationship
operator|.
name|isToDependentPK
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|getToMany
argument_list|()
operator|.
name|setSelected
argument_list|(
name|relationship
operator|.
name|isToMany
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|getNameField
argument_list|()
operator|.
name|setText
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reverseRelationship
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|getReverseName
argument_list|()
operator|.
name|setText
argument_list|(
name|reverseRelationship
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
name|enableOptions
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|enableInfo
argument_list|()
expr_stmt|;
block|}
name|view
operator|.
name|getComment
argument_list|()
operator|.
name|setText
argument_list|(
name|ObjectInfo
operator|.
name|getFromMetaData
argument_list|(
name|projectController
operator|.
name|getApplication
argument_list|()
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|relationship
argument_list|,
name|ObjectInfo
operator|.
name|COMMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initController
parameter_list|()
block|{
name|view
operator|.
name|getTargetEntities
argument_list|()
operator|.
name|addActionListener
argument_list|(
name|action
lambda|->
block|{
name|String
name|selectedItem
init|=
operator|(
name|String
operator|)
name|view
operator|.
name|getTargetEntities
argument_list|()
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|relationship
operator|.
name|setTargetEntityName
argument_list|(
name|selectedItem
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|WarningDialogByDbTargetChange
operator|.
name|showWarningDialog
argument_list|(
name|projectController
argument_list|,
name|relationship
argument_list|)
condition|)
block|{
comment|// clear joins...
name|relationship
operator|.
name|removeAllJoins
argument_list|()
expr_stmt|;
name|relationship
operator|.
name|setTargetEntityName
argument_list|(
name|selectedItem
argument_list|)
expr_stmt|;
block|}
name|projectController
operator|.
name|fireDbRelationshipEvent
argument_list|(
operator|new
name|RelationshipEvent
argument_list|(
name|this
argument_list|,
name|relationship
argument_list|,
name|relationship
operator|.
name|getSourceEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|enableInfo
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|view
operator|.
name|getAddButton
argument_list|()
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|DbJoinTableModel
name|model
init|=
operator|(
name|DbJoinTableModel
operator|)
name|view
operator|.
name|getTable
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|DbJoin
name|join
init|=
operator|new
name|DbJoin
argument_list|(
name|relationship
argument_list|)
decl_stmt|;
name|model
operator|.
name|addRow
argument_list|(
name|join
argument_list|)
expr_stmt|;
name|view
operator|.
name|getTable
argument_list|()
operator|.
name|select
argument_list|(
name|model
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|view
operator|.
name|getRemoveButton
argument_list|()
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|DbJoinTableModel
name|model
init|=
operator|(
name|DbJoinTableModel
operator|)
name|view
operator|.
name|getTable
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|stopEditing
argument_list|()
expr_stmt|;
name|int
name|row
init|=
name|view
operator|.
name|getTable
argument_list|()
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
name|DbJoin
name|join
init|=
name|model
operator|.
name|getJoin
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|model
operator|.
name|removeRow
argument_list|(
name|join
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|view
operator|.
name|getSaveButton
argument_list|()
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|view
operator|.
name|setCancelPressed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|view
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|view
operator|.
name|getCancelButton
argument_list|()
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|view
operator|.
name|setCancelPressed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|view
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|view
operator|.
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|windowClosing
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
name|view
operator|.
name|setCancelPressed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|view
operator|.
name|getToDepPk
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|enableInfo
parameter_list|()
block|{
name|enableOptions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|view
operator|.
name|getTable
argument_list|()
operator|.
name|setModel
argument_list|(
operator|new
name|DbJoinTableModel
argument_list|(
name|relationship
argument_list|,
name|projectController
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TableColumn
name|sourceColumn
init|=
name|view
operator|.
name|getTable
argument_list|()
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|DbJoinTableModel
operator|.
name|SOURCE
argument_list|)
decl_stmt|;
name|JComboBox
name|comboBox
init|=
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|(
name|ModelerUtil
operator|.
name|getDbAttributeNames
argument_list|(
name|relationship
operator|.
name|getSourceEntity
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AutoCompletion
operator|.
name|enable
argument_list|(
name|comboBox
argument_list|)
expr_stmt|;
name|sourceColumn
operator|.
name|setCellEditor
argument_list|(
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createCellEditor
argument_list|(
name|comboBox
argument_list|)
argument_list|)
expr_stmt|;
name|TableColumn
name|targetColumn
init|=
name|view
operator|.
name|getTable
argument_list|()
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|DbJoinTableModel
operator|.
name|TARGET
argument_list|)
decl_stmt|;
name|comboBox
operator|=
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|(
name|ModelerUtil
operator|.
name|getDbAttributeNames
argument_list|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AutoCompletion
operator|.
name|enable
argument_list|(
name|comboBox
argument_list|)
expr_stmt|;
name|targetColumn
operator|.
name|setCellEditor
argument_list|(
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createCellEditor
argument_list|(
name|comboBox
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|getTablePreferences
argument_list|()
operator|.
name|bind
argument_list|(
name|view
operator|.
name|getTable
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DbJoinTableModel
operator|.
name|SOURCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|enableOptions
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
name|view
operator|.
name|enableOptions
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|stopEditing
parameter_list|()
block|{
comment|// Stop whatever editing may be taking place
name|int
name|col_index
init|=
name|view
operator|.
name|getTable
argument_list|()
operator|.
name|getEditingColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|col_index
operator|>=
literal|0
condition|)
block|{
name|TableColumn
name|col
init|=
name|view
operator|.
name|getTable
argument_list|()
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|col_index
argument_list|)
decl_stmt|;
name|col
operator|.
name|getCellEditor
argument_list|()
operator|.
name|stopCellEditing
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|save
parameter_list|()
block|{
name|stopEditing
argument_list|()
expr_stmt|;
name|DbJoinTableModel
name|model
init|=
operator|(
name|DbJoinTableModel
operator|)
name|view
operator|.
name|getTable
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|boolean
name|updatingReverse
init|=
name|model
operator|.
name|getObjectList
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
comment|// handle name update
name|handleNameUpdate
argument_list|(
name|relationship
argument_list|,
name|view
operator|.
name|getNameField
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|commit
argument_list|()
expr_stmt|;
name|relationship
operator|.
name|setToMany
argument_list|(
name|view
operator|.
name|getToMany
argument_list|()
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
comment|// check "to dep pk" setting,
comment|// maybe this is no longer valid
if|if
condition|(
name|relationship
operator|.
name|isToDependentPK
argument_list|()
operator|&&
operator|!
name|relationship
operator|.
name|isValidForDepPk
argument_list|()
condition|)
block|{
name|relationship
operator|.
name|setToDependentPK
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|ObjectInfo
operator|.
name|putToMetaData
argument_list|(
name|projectController
operator|.
name|getApplication
argument_list|()
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|relationship
argument_list|,
name|ObjectInfo
operator|.
name|COMMENT
argument_list|,
name|view
operator|.
name|getComment
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|// If new reverse DbRelationship was created, add it to the target
comment|// Don't create reverse with no joins - makes no sense...
if|if
condition|(
name|updatingReverse
condition|)
block|{
comment|// If didn't find anything, create reverseDbRel
if|if
condition|(
name|reverseRelationship
operator|==
literal|null
condition|)
block|{
name|reverseRelationship
operator|=
operator|new
name|DbRelationship
argument_list|()
expr_stmt|;
name|reverseRelationship
operator|.
name|setName
argument_list|(
name|NameBuilder
operator|.
name|builder
argument_list|(
name|reverseRelationship
argument_list|,
name|relationship
operator|.
name|getTargetEntity
argument_list|()
argument_list|)
operator|.
name|baseName
argument_list|(
name|view
operator|.
name|getReverseName
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|reverseRelationship
operator|.
name|setSourceEntity
argument_list|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
argument_list|)
expr_stmt|;
name|reverseRelationship
operator|.
name|setTargetEntityName
argument_list|(
name|relationship
operator|.
name|getSourceEntity
argument_list|()
argument_list|)
expr_stmt|;
name|reverseRelationship
operator|.
name|setToMany
argument_list|(
operator|!
name|relationship
operator|.
name|isToMany
argument_list|()
argument_list|)
expr_stmt|;
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|.
name|addRelationship
argument_list|(
name|reverseRelationship
argument_list|)
expr_stmt|;
comment|// fire only if the relationship is to the same entity...
comment|// this is needed to update entity view...
if|if
condition|(
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|==
name|relationship
operator|.
name|getTargetEntity
argument_list|()
condition|)
block|{
name|projectController
operator|.
name|fireDbRelationshipEvent
argument_list|(
operator|new
name|RelationshipEvent
argument_list|(
name|this
argument_list|,
name|reverseRelationship
argument_list|,
name|reverseRelationship
operator|.
name|getSourceEntity
argument_list|()
argument_list|,
name|MapEvent
operator|.
name|ADD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|handleNameUpdate
argument_list|(
name|reverseRelationship
argument_list|,
name|view
operator|.
name|getReverseName
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|DbJoin
argument_list|>
name|reverseJoins
init|=
name|getReverseJoins
argument_list|()
decl_stmt|;
name|reverseRelationship
operator|.
name|setJoins
argument_list|(
name|reverseJoins
argument_list|)
expr_stmt|;
comment|// check if joins map to a primary key of this entity
if|if
condition|(
operator|!
name|relationship
operator|.
name|isToDependentPK
argument_list|()
operator|&&
name|reverseRelationship
operator|.
name|isValidForDepPk
argument_list|()
condition|)
block|{
name|reverseRelationship
operator|.
name|setToDependentPK
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|fireDbRelationshipEvent
argument_list|(
name|isCreate
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleNameUpdate
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|,
name|String
name|userInputName
parameter_list|)
block|{
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|,
name|userInputName
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|sourceEntityName
init|=
name|NameBuilder
operator|.
name|builder
argument_list|(
name|relationship
argument_list|,
name|relationship
operator|.
name|getSourceEntity
argument_list|()
argument_list|)
operator|.
name|baseName
argument_list|(
name|userInputName
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|sourceEntityName
argument_list|,
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|oldName
init|=
name|relationship
operator|.
name|getName
argument_list|()
decl_stmt|;
name|relationship
operator|.
name|setName
argument_list|(
name|sourceEntityName
argument_list|)
expr_stmt|;
name|projectController
operator|.
name|fireDbRelationshipEvent
argument_list|(
operator|new
name|RelationshipEvent
argument_list|(
name|this
argument_list|,
name|relationship
argument_list|,
name|relationship
operator|.
name|getSourceEntity
argument_list|()
argument_list|,
name|oldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Collection
argument_list|<
name|DbJoin
argument_list|>
name|getReverseJoins
parameter_list|()
block|{
name|Collection
argument_list|<
name|DbJoin
argument_list|>
name|joins
init|=
name|relationship
operator|.
name|getJoins
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|joins
operator|==
literal|null
operator|)
operator|||
operator|(
name|joins
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|DbJoin
argument_list|>
name|reverseJoins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|joins
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Loop through the list of attribute pairs, create reverse pairs
comment|// and put them to the reverse list.
for|for
control|(
name|DbJoin
name|pair
range|:
name|joins
control|)
block|{
name|DbJoin
name|reverseJoin
init|=
name|pair
operator|.
name|createReverseJoin
argument_list|()
decl_stmt|;
comment|// since reverse relationship is not yet initialized,
comment|// reverse join will not have it set automatically
name|reverseJoin
operator|.
name|setRelationship
argument_list|(
name|reverseRelationship
argument_list|)
expr_stmt|;
name|reverseJoins
operator|.
name|add
argument_list|(
name|reverseJoin
argument_list|)
expr_stmt|;
block|}
return|return
name|reverseJoins
return|;
block|}
specifier|private
name|void
name|fireDbRelationshipEvent
parameter_list|(
name|boolean
name|isCreate
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isCreate
condition|)
block|{
name|projectController
operator|.
name|fireDbRelationshipEvent
argument_list|(
operator|new
name|RelationshipEvent
argument_list|(
name|this
argument_list|,
name|relationship
argument_list|,
name|relationship
operator|.
name|getSourceEntity
argument_list|()
argument_list|,
name|MapEvent
operator|.
name|CHANGE
argument_list|)
argument_list|)
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DbEntity
name|dbEntity
init|=
name|relationship
operator|.
name|getSourceEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbEntity
operator|.
name|getRelationship
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|dbEntity
operator|.
name|addRelationship
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
block|}
name|projectController
operator|.
name|fireDbRelationshipEvent
argument_list|(
operator|new
name|RelationshipEvent
argument_list|(
name|this
argument_list|,
name|relationship
argument_list|,
name|dbEntity
argument_list|,
name|MapEvent
operator|.
name|ADD
argument_list|)
argument_list|)
expr_stmt|;
name|RelationshipDisplayEvent
name|rde
init|=
operator|new
name|RelationshipDisplayEvent
argument_list|(
name|this
argument_list|,
name|relationship
argument_list|,
name|dbEntity
argument_list|,
name|projectController
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|projectController
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
decl_stmt|;
name|projectController
operator|.
name|fireDbRelationshipDisplayEvent
argument_list|(
name|rde
argument_list|)
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|CreateRelationshipUndoableEdit
argument_list|(
name|relationship
operator|.
name|getSourceEntity
argument_list|()
argument_list|,
operator|new
name|DbRelationship
index|[]
block|{
name|relationship
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Optional
argument_list|<
name|DbRelationship
argument_list|>
name|getRelationship
parameter_list|()
block|{
return|return
name|view
operator|.
name|isCancelPressed
argument_list|()
condition|?
name|Optional
operator|.
name|empty
argument_list|()
else|:
name|Optional
operator|.
name|of
argument_list|(
name|relationship
argument_list|)
return|;
block|}
specifier|final
class|class
name|TargetComboBoxModel
extends|extends
name|DefaultComboBoxModel
argument_list|<
name|String
argument_list|>
block|{
name|TargetComboBoxModel
parameter_list|(
name|Collection
argument_list|<
name|DbEntity
argument_list|>
name|dbEntities
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|dbEntities
operator|.
name|forEach
argument_list|(
name|dbEntity
lambda|->
name|this
operator|.
name|addElement
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setSelectedItem
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|setSelectedItem
argument_list|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

