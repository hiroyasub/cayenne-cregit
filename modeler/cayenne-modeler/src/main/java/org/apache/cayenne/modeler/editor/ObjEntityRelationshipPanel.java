begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DeleteRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ObjEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ObjRelationshipListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|RelationshipEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ActionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CopyAttributeRelationshipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CutAttributeRelationshipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|PasteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|RemoveAttributeRelationshipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|objentity
operator|.
name|ObjRelationshipInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EntityDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ObjEntityDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|TablePopupHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|TableColumnPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CellRenderers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|EntityTreeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|EntityTreeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ModelerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|PanelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|UIUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|combo
operator|.
name|AutoCompletion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractCellEditor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultCellEditor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ListSelectionModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TableModelEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TableModelListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|DefaultTableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellEditor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Displays ObjRelationships for the edited ObjEntity.  */
end_comment

begin_class
specifier|public
class|class
name|ObjEntityRelationshipPanel
extends|extends
name|JPanel
implements|implements
name|ObjEntityDisplayListener
implements|,
name|ObjEntityListener
implements|,
name|ObjRelationshipListener
block|{
specifier|private
specifier|static
name|Log
name|logObj
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ObjEntityRelationshipPanel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|deleteRules
init|=
operator|new
name|Object
index|[]
block|{
name|DeleteRule
operator|.
name|deleteRuleName
argument_list|(
name|DeleteRule
operator|.
name|NO_ACTION
argument_list|)
block|,
name|DeleteRule
operator|.
name|deleteRuleName
argument_list|(
name|DeleteRule
operator|.
name|NULLIFY
argument_list|)
block|,
name|DeleteRule
operator|.
name|deleteRuleName
argument_list|(
name|DeleteRule
operator|.
name|CASCADE
argument_list|)
block|,
name|DeleteRule
operator|.
name|deleteRuleName
argument_list|(
name|DeleteRule
operator|.
name|DENY
argument_list|)
block|,     }
decl_stmt|;
comment|/*   static final String COLLECTION_TYPE_MAP = "java.util.Map";     static final String COLLECTION_TYPE_SET = "java.util.Set";     static final String COLLECTION_TYPE_COLLECTION = "java.util.Collection";     static final String DEFAULT_COLLECTION_TYPE = "java.util.List";*/
specifier|protected
name|ProjectController
name|mediator
decl_stmt|;
specifier|protected
name|CayenneTable
name|table
decl_stmt|;
specifier|private
name|TableColumnPreferences
name|tablePreferences
decl_stmt|;
specifier|private
name|ActionListener
name|resolver
decl_stmt|;
specifier|private
name|ObjEntityAttributeRelationshipTab
name|parentPanel
decl_stmt|;
specifier|private
name|boolean
name|enabledResolve
decl_stmt|;
comment|//for JBottom "resolve" in ObjEntityAttrRelationshipTab
comment|/**      * By now popup menu item is made similar to toolbar button. (i.e. all functionality      * is here) This should be probably refactored as Action.      */
specifier|protected
name|JMenuItem
name|resolveMenu
decl_stmt|;
specifier|public
name|ObjEntityRelationshipPanel
parameter_list|(
name|ProjectController
name|mediator
parameter_list|,
name|ObjEntityAttributeRelationshipTab
name|parentPanel
parameter_list|)
block|{
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|this
operator|.
name|parentPanel
operator|=
name|parentPanel
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|initController
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
name|this
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|ActionManager
name|actionManager
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
decl_stmt|;
name|table
operator|=
operator|new
name|CayenneTable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Component
name|prepareRenderer
parameter_list|(
name|TableCellRenderer
name|renderer
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|Component
name|component
init|=
name|super
operator|.
name|prepareRenderer
argument_list|(
name|renderer
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|int
name|rendererWidth
init|=
name|component
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|width
decl_stmt|;
name|TableColumn
name|tableColumn
init|=
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|tableColumn
operator|.
name|setPreferredWidth
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|rendererWidth
operator|+
name|getIntercellSpacing
argument_list|()
operator|.
name|width
argument_list|,
name|tableColumn
operator|.
name|getPreferredWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|component
return|;
block|}
block|}
expr_stmt|;
name|table
operator|.
name|setDefaultRenderer
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|StringRenderer
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setDefaultRenderer
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|,
operator|new
name|EntityRenderer
argument_list|()
argument_list|)
expr_stmt|;
name|tablePreferences
operator|=
operator|new
name|TableColumnPreferences
argument_list|(
name|ObjRelationshipTableModel
operator|.
name|class
argument_list|,
literal|"objEntity/relationshipTable"
argument_list|)
expr_stmt|;
comment|/**          * Create and install a popup          */
name|Icon
name|ico
init|=
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"icon-info.gif"
argument_list|)
decl_stmt|;
name|resolveMenu
operator|=
operator|new
name|JMenuItem
argument_list|(
literal|"Database Mapping"
argument_list|,
name|ico
argument_list|)
expr_stmt|;
name|JPopupMenu
name|popup
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|resolveMenu
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|RemoveAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|popup
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|CutAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|CopyAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|PasteAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|TablePopupHandler
operator|.
name|install
argument_list|(
name|table
argument_list|,
name|popup
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|PanelFactory
operator|.
name|createTablePanel
argument_list|(
name|table
argument_list|,
literal|null
argument_list|)
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initController
parameter_list|()
block|{
name|mediator
operator|.
name|addObjEntityDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addObjEntityListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addObjRelationshipListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|resolver
operator|=
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|row
init|=
name|table
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
condition|)
block|{
return|return;
block|}
name|ObjRelationshipTableModel
name|model
init|=
operator|(
name|ObjRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
operator|new
name|ObjRelationshipInfo
argument_list|(
name|mediator
argument_list|,
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
argument_list|)
operator|.
name|startupAction
argument_list|()
expr_stmt|;
comment|/**                  * This is required for a table to be updated properly                  */
name|table
operator|.
name|cancelEditing
argument_list|()
expr_stmt|;
comment|// need to refresh selected row... do this by unselecting/selecting the
comment|// row
name|table
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|table
operator|.
name|select
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|enabledResolve
operator|=
literal|false
expr_stmt|;
block|}
block|}
expr_stmt|;
name|resolveMenu
operator|.
name|addActionListener
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|table
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|addListSelectionListener
argument_list|(
operator|new
name|ObjRelationshipListSelectionListener
argument_list|()
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|getApplication
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|setupCutCopyPaste
argument_list|(
name|table
argument_list|,
name|CutAttributeRelationshipAction
operator|.
name|class
argument_list|,
name|CopyAttributeRelationshipAction
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * Selects a specified relationship in the relationships table.      */
specifier|public
name|void
name|selectRelationships
parameter_list|(
name|ObjRelationship
index|[]
name|rels
parameter_list|)
block|{
name|ObjRelationshipTableModel
name|model
init|=
operator|(
name|ObjRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|List
name|listRels
init|=
name|model
operator|.
name|getObjectList
argument_list|()
decl_stmt|;
name|int
index|[]
name|newSel
init|=
operator|new
name|int
index|[
name|rels
operator|.
name|length
index|]
decl_stmt|;
name|parentPanel
operator|.
name|updateActions
argument_list|(
name|rels
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rels
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newSel
index|[
name|i
index|]
operator|=
name|listRels
operator|.
name|indexOf
argument_list|(
name|rels
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|select
argument_list|(
name|newSel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads obj relationships into table.      */
specifier|public
name|void
name|currentObjEntityChanged
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
condition|)
block|{
return|return;
block|}
name|ObjEntity
name|entity
init|=
operator|(
name|ObjEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
decl_stmt|;
comment|// Important: process event even if this is the same entity,
comment|// since the inheritance structure might have changed
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|rebuildTable
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
comment|// if an entity was selected on a tree,
comment|// unselect currently selected row
if|if
condition|(
name|e
operator|.
name|isUnselectAttributes
argument_list|()
condition|)
block|{
name|table
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Creates a list of ObjEntity names.      */
specifier|private
name|Object
index|[]
name|createObjEntityComboModel
parameter_list|()
block|{
name|DataMap
name|map
init|=
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
comment|// this actually happens per CAY-221... can't reproduce though
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|logObj
operator|.
name|warn
argument_list|(
literal|"createObjEntityComboModel:: Null DataMap."
argument_list|)
expr_stmt|;
return|return
operator|new
name|Object
index|[
literal|0
index|]
return|;
block|}
if|if
condition|(
name|map
operator|.
name|getNamespace
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logObj
operator|.
name|warn
argument_list|(
literal|"createObjEntityComboModel:: Null DataMap namespace - "
operator|+
name|map
argument_list|)
expr_stmt|;
return|return
operator|new
name|Object
index|[
literal|0
index|]
return|;
block|}
name|Collection
name|objEntities
init|=
name|map
operator|.
name|getNamespace
argument_list|()
operator|.
name|getObjEntities
argument_list|()
decl_stmt|;
return|return
name|objEntities
operator|.
name|toArray
argument_list|()
return|;
block|}
specifier|public
name|void
name|objEntityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|objEntityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|reloadEntityList
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|objEntityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|reloadEntityList
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|objRelationshipChanged
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
name|table
operator|.
name|select
argument_list|(
name|e
operator|.
name|getRelationship
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|objRelationshipAdded
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
name|rebuildTable
argument_list|(
operator|(
name|ObjEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|select
argument_list|(
name|e
operator|.
name|getRelationship
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|objRelationshipRemoved
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
name|ObjRelationshipTableModel
name|model
init|=
operator|(
name|ObjRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|int
name|ind
init|=
name|model
operator|.
name|getObjectList
argument_list|()
operator|.
name|indexOf
argument_list|(
name|e
operator|.
name|getRelationship
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|removeRow
argument_list|(
name|e
operator|.
name|getRelationship
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|select
argument_list|(
name|ind
argument_list|)
expr_stmt|;
block|}
comment|/**      * Refresh the list of ObjEntity targets. Also refresh the table in case some      * ObjRelationships were deleted.      */
specifier|private
name|void
name|reloadEntityList
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|!=
name|this
condition|)
block|{
return|return;
block|}
comment|// If current model added/removed, do nothing.
name|ObjEntity
name|entity
init|=
name|mediator
operator|.
name|getCurrentObjEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
name|e
operator|.
name|getEntity
argument_list|()
operator|||
name|entity
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TableColumn
name|col
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|ObjRelationshipTableModel
operator|.
name|REL_TARGET
argument_list|)
decl_stmt|;
name|DefaultCellEditor
name|editor
init|=
operator|(
name|DefaultCellEditor
operator|)
name|col
operator|.
name|getCellEditor
argument_list|()
decl_stmt|;
name|JComboBox
name|combo
init|=
operator|(
name|JComboBox
operator|)
name|editor
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|combo
operator|.
name|setRenderer
argument_list|(
name|CellRenderers
operator|.
name|entityListRendererWithIcons
argument_list|(
name|entity
operator|.
name|getDataMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//combo.setModel(new DefaultComboBoxModel(createObjEntityComboModel()));
comment|//combo.setEnabled(false);
name|ObjRelationshipTableModel
name|model
init|=
operator|(
name|ObjRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|rebuildTable
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
specifier|final
name|ObjRelationshipTableModel
name|model
init|=
operator|new
name|ObjRelationshipTableModel
argument_list|(
name|entity
argument_list|,
name|mediator
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|model
operator|.
name|addTableModelListener
argument_list|(
operator|new
name|TableModelListener
argument_list|()
block|{
specifier|public
name|void
name|tableChanged
parameter_list|(
name|TableModelEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|table
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|ObjRelationship
name|rel
init|=
name|model
operator|.
name|getRelationship
argument_list|(
name|table
operator|.
name|getSelectedRow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|ObjEntity
operator|)
name|rel
operator|.
name|getSourceEntity
argument_list|()
operator|)
operator|.
name|getDbEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|enabledResolve
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|enabledResolve
operator|=
literal|false
expr_stmt|;
name|resolveMenu
operator|.
name|setEnabled
argument_list|(
name|enabledResolve
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRowHeight
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRowMargin
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|TableColumn
name|col
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|ObjRelationshipTableModel
operator|.
name|REL_TARGET_PATH
argument_list|)
decl_stmt|;
name|JComboBox
name|targetCombo
init|=
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|(
name|createObjEntityComboModel
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AutoCompletion
operator|.
name|enable
argument_list|(
name|targetCombo
argument_list|)
expr_stmt|;
name|targetCombo
operator|.
name|setRenderer
argument_list|(
name|CellRenderers
operator|.
name|entityListRendererWithIcons
argument_list|(
name|entity
operator|.
name|getDataMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|targetCombo
operator|.
name|setSelectedIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|col
operator|.
name|setCellEditor
argument_list|(
operator|new
name|JTableTargetComboBoxEditor
argument_list|()
argument_list|)
expr_stmt|;
name|col
operator|=
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|ObjRelationshipTableModel
operator|.
name|REL_DELETE_RULE
argument_list|)
expr_stmt|;
name|JComboBox
name|deleteRulesCombo
init|=
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|(
name|deleteRules
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|deleteRulesCombo
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|deleteRulesCombo
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Default to the first value
name|col
operator|.
name|setCellEditor
argument_list|(
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createCellEditor
argument_list|(
name|deleteRulesCombo
argument_list|)
argument_list|)
expr_stmt|;
name|col
operator|=
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|ObjRelationshipTableModel
operator|.
name|REL_COLLECTION_TYPE
argument_list|)
expr_stmt|;
name|col
operator|.
name|setCellEditor
argument_list|(
operator|new
name|JTableCollectionTypeComboBoxEditor
argument_list|()
argument_list|)
expr_stmt|;
name|col
operator|.
name|setCellRenderer
argument_list|(
operator|new
name|JTableCollectionTypeComboBoxRenderer
argument_list|()
argument_list|)
expr_stmt|;
name|col
operator|=
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|ObjRelationshipTableModel
operator|.
name|REL_MAP_KEY
argument_list|)
expr_stmt|;
name|col
operator|.
name|setCellEditor
argument_list|(
operator|new
name|JTableMapKeyComboBoxEditor
argument_list|()
argument_list|)
expr_stmt|;
name|col
operator|.
name|setCellRenderer
argument_list|(
operator|new
name|JTableMapKeyComboBoxRenderer
argument_list|()
argument_list|)
expr_stmt|;
name|tablePreferences
operator|.
name|bind
argument_list|(
name|table
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ObjRelationshipTableModel
operator|.
name|REL_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
class|class
name|EntityRenderer
extends|extends
name|StringRenderer
block|{
annotation|@
name|Override
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|hasFocus
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|Object
name|oldValue
init|=
name|value
decl_stmt|;
name|value
operator|=
name|CellRenderers
operator|.
name|asString
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|super
operator|.
name|getTableCellRendererComponent
argument_list|(
name|table
argument_list|,
name|value
argument_list|,
name|isSelected
argument_list|,
name|hasFocus
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|setIcon
argument_list|(
name|CellRenderers
operator|.
name|iconForObject
argument_list|(
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
class|class
name|StringRenderer
extends|extends
name|DefaultTableCellRenderer
block|{
annotation|@
name|Override
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|hasFocus
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
comment|// center cardinality column
name|int
name|align
init|=
name|column
operator|==
name|ObjRelationshipTableModel
operator|.
name|REL_SEMANTICS
condition|?
name|JLabel
operator|.
name|CENTER
else|:
name|JLabel
operator|.
name|LEFT
decl_stmt|;
name|super
operator|.
name|setHorizontalAlignment
argument_list|(
name|align
argument_list|)
expr_stmt|;
name|super
operator|.
name|getTableCellRendererComponent
argument_list|(
name|table
argument_list|,
name|value
argument_list|,
name|isSelected
argument_list|,
name|hasFocus
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|ObjRelationshipTableModel
name|model
init|=
operator|(
name|ObjRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|ObjRelationship
name|relationship
init|=
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|!=
literal|null
operator|&&
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|!=
name|model
operator|.
name|getEntity
argument_list|()
condition|)
block|{
name|setForeground
argument_list|(
name|Color
operator|.
name|GRAY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setForeground
argument_list|(
name|isSelected
operator|&&
operator|!
name|hasFocus
condition|?
name|table
operator|.
name|getSelectionForeground
argument_list|()
else|:
name|table
operator|.
name|getForeground
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
specifier|private
class|class
name|ObjRelationshipListSelectionListener
implements|implements
name|ListSelectionListener
block|{
specifier|public
name|void
name|valueChanged
parameter_list|(
name|ListSelectionEvent
name|e
parameter_list|)
block|{
name|ObjRelationship
index|[]
name|rels
init|=
operator|new
name|ObjRelationship
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|e
operator|.
name|getValueIsAdjusting
argument_list|()
operator|&&
operator|!
operator|(
operator|(
name|ListSelectionModel
operator|)
name|e
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|isSelectionEmpty
argument_list|()
condition|)
block|{
name|parentPanel
operator|.
name|getAttributePanel
argument_list|()
operator|.
name|table
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
if|if
condition|(
name|parentPanel
operator|.
name|getAttributePanel
argument_list|()
operator|.
name|table
operator|.
name|getCellEditor
argument_list|()
operator|!=
literal|null
condition|)
name|parentPanel
operator|.
name|getAttributePanel
argument_list|()
operator|.
name|table
operator|.
name|getCellEditor
argument_list|()
operator|.
name|stopCellEditing
argument_list|()
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|RemoveAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|setCurrentSelectedPanel
argument_list|(
name|parentPanel
operator|.
name|getRelationshipPanel
argument_list|()
argument_list|)
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|CutAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|setCurrentSelectedPanel
argument_list|(
name|parentPanel
operator|.
name|getRelationshipPanel
argument_list|()
argument_list|)
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|CopyAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|setCurrentSelectedPanel
argument_list|(
name|parentPanel
operator|.
name|getRelationshipPanel
argument_list|()
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|removeActionListener
argument_list|(
name|parentPanel
operator|.
name|getAttributePanel
argument_list|()
operator|.
name|getResolver
argument_list|()
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|removeActionListener
argument_list|(
name|getResolver
argument_list|()
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|addActionListener
argument_list|(
name|getResolver
argument_list|()
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|setToolTipText
argument_list|(
literal|"Edit Relationship"
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|ObjRelationshipTableModel
name|model
init|=
operator|(
name|ObjRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|int
index|[]
name|sel
init|=
name|table
operator|.
name|getSelectedRows
argument_list|()
decl_stmt|;
name|rels
operator|=
operator|new
name|ObjRelationship
index|[
name|sel
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sel
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rels
index|[
name|i
index|]
operator|=
name|model
operator|.
name|getRelationship
argument_list|(
name|sel
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sel
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|UIUtil
operator|.
name|scrollToSelectedRow
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|enabledResolve
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|enabledResolve
operator|=
literal|false
expr_stmt|;
block|}
name|resolveMenu
operator|.
name|setEnabled
argument_list|(
name|enabledResolve
argument_list|)
expr_stmt|;
block|}
name|mediator
operator|.
name|setCurrentObjRelationships
argument_list|(
name|rels
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|updateActions
argument_list|(
name|rels
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isEnabledResolve
parameter_list|()
block|{
return|return
name|enabledResolve
return|;
block|}
specifier|public
name|ActionListener
name|getResolver
parameter_list|()
block|{
return|return
name|resolver
return|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|JTableCollectionTypeComboBoxEditor
extends|extends
name|AbstractCellEditor
implements|implements
name|TableCellEditor
block|{
specifier|static
specifier|final
name|String
name|COLLECTION_TYPE_MAP
init|=
literal|"java.util.Map"
decl_stmt|;
specifier|static
specifier|final
name|String
name|COLLECTION_TYPE_SET
init|=
literal|"java.util.Set"
decl_stmt|;
specifier|static
specifier|final
name|String
name|COLLECTION_TYPE_COLLECTION
init|=
literal|"java.util.Collection"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_COLLECTION_TYPE
init|=
literal|"java.util.List"
decl_stmt|;
specifier|private
name|ObjRelationshipTableModel
name|model
decl_stmt|;
specifier|private
name|int
name|row
decl_stmt|;
specifier|private
name|int
name|column
decl_stmt|;
specifier|public
name|JTableCollectionTypeComboBoxEditor
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getTableCellEditorComponent
parameter_list|(
specifier|final
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|column
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
operator|(
name|ObjRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
specifier|final
name|JComboBox
name|collectionTypeCombo
init|=
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|(
operator|new
name|Object
index|[]
block|{
name|COLLECTION_TYPE_MAP
block|,
name|COLLECTION_TYPE_SET
block|,
name|COLLECTION_TYPE_COLLECTION
block|,
name|DEFAULT_COLLECTION_TYPE
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|isToMany
argument_list|()
condition|)
block|{
name|collectionTypeCombo
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|collectionTypeCombo
operator|.
name|setSelectedItem
argument_list|(
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|getCollectionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JLabel
name|labelIfToOneRelationship
init|=
operator|new
name|JLabel
argument_list|()
decl_stmt|;
name|labelIfToOneRelationship
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//collectionTypeCombo.setEnabled(false);
comment|//collectionTypeCombo.setSelectedItem( model.getRelationship(row).getCollectionType());
return|return
name|labelIfToOneRelationship
return|;
block|}
name|collectionTypeCombo
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|Object
name|selected
init|=
name|collectionTypeCombo
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
name|model
operator|.
name|setUpdatedValueAt
argument_list|(
name|selected
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|table
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|collectionTypeCombo
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getCellEditorValue
parameter_list|()
block|{
return|return
name|model
operator|.
name|getValueAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
specifier|static
class|class
name|JTableCollectionTypeComboBoxRenderer
implements|implements
name|TableCellRenderer
block|{
specifier|private
name|ObjRelationshipTableModel
name|model
decl_stmt|;
specifier|public
name|JTableCollectionTypeComboBoxRenderer
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|hasFocus
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
operator|(
name|ObjRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
expr_stmt|;
name|JLabel
name|labelIfToOneRelationship
init|=
operator|new
name|JLabel
argument_list|()
decl_stmt|;
name|labelIfToOneRelationship
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JLabel
name|labelIfToManyRelationship
init|=
operator|new
name|JLabel
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
decl_stmt|;
name|labelIfToManyRelationship
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|labelIfToManyRelationship
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Verdana"
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
name|labelIfToOneRelationship
return|;
if|if
condition|(
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|isToMany
argument_list|()
condition|)
block|{
return|return
name|labelIfToManyRelationship
return|;
block|}
else|else
block|{
return|return
name|labelIfToOneRelationship
return|;
block|}
block|}
block|}
specifier|private
specifier|final
specifier|static
class|class
name|JTableMapKeyComboBoxEditor
extends|extends
name|AbstractCellEditor
implements|implements
name|TableCellEditor
block|{
specifier|static
specifier|final
name|String
name|DEFAULT_MAP_KEY
init|=
literal|"ID (default)"
decl_stmt|;
specifier|static
specifier|final
name|String
name|COLLECTION_TYPE_MAP
init|=
literal|"java.util.Map"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|mapKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|ObjRelationshipTableModel
name|model
decl_stmt|;
specifier|private
name|int
name|row
decl_stmt|;
specifier|private
name|int
name|column
decl_stmt|;
specifier|private
name|JTableMapKeyComboBoxEditor
parameter_list|()
block|{
block|}
specifier|private
name|void
name|initMapKeys
parameter_list|()
block|{
name|mapKeys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mapKeys
operator|.
name|add
argument_list|(
name|DEFAULT_MAP_KEY
argument_list|)
expr_stmt|;
comment|/**              * Object target can be null when selected target DbEntity has no              * ObjEntities              */
name|ObjEntity
name|objectTarget
init|=
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|getTargetEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|objectTarget
operator|==
literal|null
condition|)
block|{
return|return ;
block|}
for|for
control|(
name|ObjAttribute
name|attribute
range|:
name|objectTarget
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|mapKeys
operator|.
name|add
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getTableCellEditorComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|column
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
operator|(
name|ObjRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|initMapKeys
argument_list|()
expr_stmt|;
specifier|final
name|JComboBox
name|mapKeysComboBox
init|=
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|(
name|mapKeys
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|getCollectionType
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|getCollectionType
argument_list|()
operator|.
name|equals
argument_list|(
name|COLLECTION_TYPE_MAP
argument_list|)
operator|)
condition|)
block|{
name|JComboBox
name|jComboBox
init|=
operator|new
name|JComboBox
argument_list|()
decl_stmt|;
name|jComboBox
operator|.
name|setFocusable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jComboBox
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|jComboBox
return|;
block|}
else|else
block|{
name|mapKeysComboBox
operator|.
name|setFocusable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mapKeysComboBox
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|mapKeysComboBox
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|Object
name|selected
init|=
name|mapKeysComboBox
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
name|model
operator|.
name|setUpdatedValueAt
argument_list|(
name|selected
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mapKeysComboBox
operator|.
name|setSelectedItem
argument_list|(
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|getMapKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapKeysComboBox
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getCellEditorValue
parameter_list|()
block|{
return|return
name|model
operator|.
name|getValueAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
specifier|static
class|class
name|JTableMapKeyComboBoxRenderer
implements|implements
name|TableCellRenderer
block|{
specifier|static
specifier|final
name|String
name|DEFAULT_MAP_KEY
init|=
literal|"ID (default)"
decl_stmt|;
specifier|static
specifier|final
name|String
name|COLLECTION_TYPE_MAP
init|=
literal|"java.util.Map"
decl_stmt|;
specifier|private
name|ObjRelationshipTableModel
name|model
decl_stmt|;
specifier|public
name|JTableMapKeyComboBoxRenderer
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|hasFocus
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
operator|(
name|ObjRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|getCollectionType
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|getCollectionType
argument_list|()
operator|.
name|equals
argument_list|(
name|COLLECTION_TYPE_MAP
argument_list|)
operator|)
condition|)
block|{
name|JComboBox
name|jComboBox
init|=
operator|new
name|JComboBox
argument_list|()
decl_stmt|;
name|jComboBox
operator|.
name|setFocusable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jComboBox
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|jComboBox
return|;
block|}
if|if
condition|(
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|getMapKey
argument_list|()
operator|==
literal|null
condition|)
block|{
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|setMapKey
argument_list|(
name|DEFAULT_MAP_KEY
argument_list|)
expr_stmt|;
block|}
name|JLabel
name|jLabel
init|=
operator|new
name|JLabel
argument_list|(
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|getMapKey
argument_list|()
argument_list|)
decl_stmt|;
name|jLabel
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Verdana"
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jLabel
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|JTableTargetComboBoxEditor
extends|extends
name|AbstractCellEditor
implements|implements
name|TableCellEditor
implements|,
name|ActionListener
block|{
specifier|private
name|ObjRelationshipTableModel
name|model
decl_stmt|;
specifier|private
name|int
name|row
decl_stmt|;
specifier|private
name|int
name|column
decl_stmt|;
specifier|private
name|JComboBox
name|dbRelationshipPathCombo
decl_stmt|;
specifier|private
name|EntityTreeModel
name|treeModel
decl_stmt|;
specifier|private
name|int
name|previousEmbededLevel
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|int
name|enterPressedCount
init|=
literal|0
decl_stmt|;
specifier|public
name|JTableTargetComboBoxEditor
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getCellEditorValue
parameter_list|()
block|{
return|return
name|model
operator|.
name|getValueAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getTableCellEditorComponent
parameter_list|(
specifier|final
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
specifier|final
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
operator|(
name|ObjRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|treeModel
operator|=
name|createTreeModelForComboBoxBrowser
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|treeModel
operator|==
literal|null
condition|)
return|return
operator|new
name|JLabel
argument_list|(
literal|"You need select table to this ObjectEntity"
argument_list|)
return|;
name|initializeCombo
argument_list|(
name|model
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|String
name|dbRelationshipPath
init|=
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbRelationshipPathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|previousEmbededLevel
operator|=
name|dbRelationshipPath
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
operator|.
name|length
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|.
name|addKeyListener
argument_list|(
operator|new
name|KeyAdapter
argument_list|()
block|{
specifier|private
name|void
name|enterPressed
parameter_list|()
block|{
name|String
name|dbRelationshipPath
init|=
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbRelationshipPathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|Object
name|currentNode
init|=
name|getCurrentNode
argument_list|(
name|dbRelationshipPath
argument_list|)
decl_stmt|;
name|String
index|[]
name|pathStrings
init|=
name|dbRelationshipPath
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lastStringInPath
init|=
name|pathStrings
index|[
name|pathStrings
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|lastStringInPath
operator|.
name|equals
argument_list|(
name|ModelerUtil
operator|.
name|getObjectName
argument_list|(
name|currentNode
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|enterPressedCount
operator|==
literal|1
condition|)
block|{
comment|//it is second time enter pressed.. so we will save input data
name|enterPressedCount
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|currentNode
operator|instanceof
name|DbRelationship
condition|)
block|{
if|if
condition|(
name|table
operator|.
name|getCellEditor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|getCellEditor
argument_list|()
operator|.
name|stopCellEditing
argument_list|()
expr_stmt|;
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|setDbRelationshipPath
argument_list|(
name|dbRelationshipPath
argument_list|)
expr_stmt|;
comment|//we need object target to save it in model
name|DbEntity
name|lastEntity
init|=
operator|(
operator|(
name|DbRelationship
operator|)
name|currentNode
operator|)
operator|.
name|getTargetEntity
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|objEntities
init|=
operator|(
operator|(
name|DbRelationship
operator|)
name|currentNode
operator|)
operator|.
name|getTargetEntity
argument_list|()
operator|.
name|getDataMap
argument_list|()
operator|.
name|getMappedEntities
argument_list|(
name|lastEntity
argument_list|)
decl_stmt|;
name|ObjEntity
name|objectTarget
init|=
name|objEntities
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|objEntities
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|setTargetEntityName
argument_list|(
name|objectTarget
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|enterPressedCount
operator|=
literal|1
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|keyReleased
parameter_list|(
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyEvent
operator|.
name|VK_ENTER
condition|)
block|{
name|enterPressed
argument_list|()
expr_stmt|;
return|return;
block|}
name|parseDbRelationshipString
argument_list|(
name|event
operator|.
name|getKeyChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|dbRelationshipPathCombo
return|;
block|}
specifier|private
name|void
name|initializeCombo
parameter_list|(
name|ObjRelationshipTableModel
name|model
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|String
name|dbRelationshipPath
init|=
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|getDbRelationshipPath
argument_list|()
decl_stmt|;
name|Object
name|currentNode
decl_stmt|;
if|if
condition|(
name|dbRelationshipPath
operator|==
literal|null
condition|)
block|{
comment|//case if it is new attribute or for some reason dbRelationshipPath is null
name|currentNode
operator|=
name|getCurrentNode
argument_list|(
name|dbRelationshipPath
argument_list|)
expr_stmt|;
name|dbRelationshipPath
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
comment|//case if  dbRelationshipPath isn't null and we must change it to find auto completion list
name|String
index|[]
name|pathStrings
init|=
name|dbRelationshipPath
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lastStringInPath
init|=
name|pathStrings
index|[
name|pathStrings
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|dbRelationshipPath
operator|=
name|dbRelationshipPath
operator|.
name|replaceAll
argument_list|(
name|lastStringInPath
operator|+
literal|"$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|currentNode
operator|=
name|getCurrentNode
argument_list|(
name|dbRelationshipPath
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|nodeChildren
init|=
name|getChildren
argument_list|(
name|currentNode
argument_list|,
name|dbRelationshipPath
argument_list|)
decl_stmt|;
name|dbRelationshipPathCombo
operator|=
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|(
name|nodeChildren
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AutoCompletion
operator|.
name|enable
argument_list|(
name|dbRelationshipPathCombo
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbRelationshipPathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|setText
argument_list|(
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|getDbRelationshipPath
argument_list|()
argument_list|)
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|setSelectedItem
argument_list|(
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|getDbRelationshipPath
argument_list|()
argument_list|)
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*          * chech if potential child is child for father          * @param father          * @param potentialChild          * @return          */
comment|/*private boolean isChild(Object father , Object potentialChild){             List<Object> fatherChildren = new ArrayList<>();             for(int j = 0 ; j<  treeModel.getChildCount(father) ; j++){                 Object child = treeModel.getChild(father, j);                 fatherChildren.add(child);             }             return fatherChildren.contains(potentialChild);         }*/
specifier|private
name|void
name|parseDbRelationshipString
parameter_list|(
name|char
name|lastEnteredCharacter
parameter_list|)
block|{
name|String
name|dbRelationshipPath
init|=
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbRelationshipPathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|enterPressedCount
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|dbRelationshipPath
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|currentNodeChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|currentNodeChildren
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|currentNodeChildren
operator|.
name|addAll
argument_list|(
name|getChildren
argument_list|(
name|getCurrentNode
argument_list|(
name|dbRelationshipPath
argument_list|)
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|currentNodeChildren
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|setPopupVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|lastEnteredCharacter
operator|==
literal|'.'
condition|)
block|{
name|processDotEntered
argument_list|()
expr_stmt|;
name|previousEmbededLevel
operator|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|dbRelationshipPath
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|currentEmbededLevel
init|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|dbRelationshipPath
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousEmbededLevel
operator|!=
name|currentEmbededLevel
condition|)
block|{
name|previousEmbededLevel
operator|=
name|currentEmbededLevel
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|currentNodeChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|pathStrings
init|=
name|dbRelationshipPath
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lastStringInPath
init|=
name|pathStrings
index|[
name|pathStrings
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|String
name|saveDbRelationshipPath
init|=
name|dbRelationshipPath
decl_stmt|;
name|dbRelationshipPath
operator|=
name|dbRelationshipPath
operator|.
name|replaceAll
argument_list|(
name|lastStringInPath
operator|+
literal|"$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|currentNodeChildren
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|currentNodeChildren
operator|.
name|addAll
argument_list|(
name|getChildren
argument_list|(
name|getCurrentNode
argument_list|(
name|dbRelationshipPath
argument_list|)
argument_list|,
name|dbRelationshipPath
argument_list|)
argument_list|)
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|currentNodeChildren
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbRelationshipPathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|setText
argument_list|(
name|saveDbRelationshipPath
argument_list|)
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|setPopupVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|private
name|void
name|processDotEntered
parameter_list|()
block|{
name|String
name|dbAttributePath
init|=
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbRelationshipPathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbAttributePath
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|currentNodeChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|currentNodeChildren
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|currentNodeChildren
operator|.
name|addAll
argument_list|(
name|getChildren
argument_list|(
name|getCurrentNode
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|currentNodeChildren
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|setPopupVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|char
name|secondFromEndCharacter
init|=
name|dbAttributePath
operator|.
name|charAt
argument_list|(
name|dbAttributePath
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondFromEndCharacter
operator|==
literal|'.'
condition|)
block|{
comment|// two dots entered one by one , we replace it by one dot
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbRelationshipPathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|setText
argument_list|(
name|dbAttributePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dbAttributePath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|String
index|[]
name|pathStrings
init|=
name|dbAttributePath
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lastStringInPath
init|=
name|pathStrings
index|[
name|pathStrings
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
comment|//we will check if lastStringInPath is correct name of DbAttribute or DbRelationship
comment|//for appropriate previous node in path. if it is not we won't add entered dot to dbAttributePath
name|String
name|dbAttributePathForPreviousNode
decl_stmt|;
if|if
condition|(
name|pathStrings
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|dbAttributePathForPreviousNode
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|dbAttributePathForPreviousNode
operator|=
name|dbAttributePath
operator|.
name|replace
argument_list|(
literal|"."
operator|+
name|lastStringInPath
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|potentialVariantsToChoose
init|=
name|getChildren
argument_list|(
name|getCurrentNode
argument_list|(
name|dbAttributePathForPreviousNode
argument_list|)
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|potentialVariantsToChoose
operator|.
name|contains
argument_list|(
name|lastStringInPath
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|currentNodeChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|currentNodeChildren
operator|.
name|add
argument_list|(
name|dbAttributePath
operator|+
literal|""
argument_list|)
expr_stmt|;
name|currentNodeChildren
operator|.
name|addAll
argument_list|(
name|getChildren
argument_list|(
name|getCurrentNode
argument_list|(
name|dbAttributePath
argument_list|)
argument_list|,
name|dbAttributePath
argument_list|)
argument_list|)
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|currentNodeChildren
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|dbRelationshipPathCombo
operator|.
name|setPopupVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbRelationshipPathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|setText
argument_list|(
name|dbAttributePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dbAttributePath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|previousEmbededLevel
operator|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|dbAttributePath
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/**          * find current node by dbRelationshipPath          * @param dbRelationshipPath          * @return last node in dbRelationshipPath which matches DbRelationship          */
specifier|private
specifier|final
name|Object
name|getCurrentNode
parameter_list|(
name|String
name|dbRelationshipPath
parameter_list|)
block|{
try|try
block|{
comment|//case for new relationship
if|if
condition|(
name|dbRelationshipPath
operator|==
literal|null
condition|)
block|{
return|return
name|treeModel
operator|.
name|getRoot
argument_list|()
return|;
block|}
name|String
index|[]
name|pathStrings
init|=
name|dbRelationshipPath
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|root
init|=
name|treeModel
operator|.
name|getRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathStrings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|rootChildText
init|=
name|pathStrings
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|treeModel
operator|.
name|getChildCount
argument_list|(
name|root
argument_list|)
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|child
init|=
name|treeModel
operator|.
name|getChild
argument_list|(
name|root
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|DbRelationship
condition|)
block|{
name|String
name|relationshipName
init|=
name|ModelerUtil
operator|.
name|getObjectName
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationshipName
operator|.
name|equals
argument_list|(
name|rootChildText
argument_list|)
condition|)
block|{
name|root
operator|=
name|child
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|root
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|treeModel
operator|.
name|getRoot
argument_list|()
return|;
block|}
block|}
comment|/**          * @param node for which we will find children          * @param dbRelationshipPath string which will be added to each child to make right autocomplete          * @return list with children , which will be used to autocomplete          */
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|getChildren
parameter_list|(
name|Object
name|node
parameter_list|,
name|String
name|dbRelationshipPath
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|currentNodeChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|treeModel
operator|.
name|getChildCount
argument_list|(
name|node
argument_list|)
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|child
init|=
name|treeModel
operator|.
name|getChild
argument_list|(
name|node
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|String
name|relationshipName
init|=
name|ModelerUtil
operator|.
name|getObjectName
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|currentNodeChildren
operator|.
name|add
argument_list|(
name|dbRelationshipPath
operator|+
name|relationshipName
argument_list|)
expr_stmt|;
block|}
return|return
name|currentNodeChildren
return|;
block|}
comment|/**          * @param relationshipIndexInTable index of attribute for which now we will create cell editor          * @return treeModel for nessesary for us attribute          */
specifier|private
name|EntityTreeModel
name|createTreeModelForComboBoxBrowser
parameter_list|(
name|int
name|relationshipIndexInTable
parameter_list|)
block|{
if|if
condition|(
name|model
operator|.
name|getRelationship
argument_list|(
name|relationshipIndexInTable
argument_list|)
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getDbEntity
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|EntityTreeModel
name|treeModel
init|=
operator|new
name|EntityTreeModel
argument_list|(
name|model
operator|.
name|getRelationship
argument_list|(
name|relationshipIndexInTable
argument_list|)
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getDbEntity
argument_list|()
argument_list|)
decl_stmt|;
name|treeModel
operator|.
name|setFilter
argument_list|(
operator|new
name|EntityTreeFilter
argument_list|()
block|{
specifier|public
name|boolean
name|attributeMatch
parameter_list|(
name|Object
name|node
parameter_list|,
name|Attribute
name|attr
parameter_list|)
block|{
comment|// attrs not allowed here
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|relationshipMatch
parameter_list|(
name|Object
name|node
parameter_list|,
name|Relationship
name|rel
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|Relationship
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|/**                      * We do not allow A->B->A chains, where relationships are                      * to-one                      */
name|DbRelationship
name|prev
init|=
operator|(
name|DbRelationship
operator|)
name|node
decl_stmt|;
return|return
operator|!
operator|(
operator|!
name|rel
operator|.
name|isToMany
argument_list|()
operator|&&
name|prev
operator|.
name|getReverseRelationship
argument_list|()
operator|==
name|rel
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|treeModel
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
operator|.
name|setMapKey
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//for some reason dbRelationshipPathCombo don't load selected item text, so we made it by hand
if|if
condition|(
name|dbRelationshipPathCombo
operator|.
name|getSelectedIndex
argument_list|()
operator|!=
operator|(
operator|-
literal|1
operator|)
condition|)
block|{
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbRelationshipPathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|setText
argument_list|(
name|dbRelationshipPathCombo
operator|.
name|getSelectedItem
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

