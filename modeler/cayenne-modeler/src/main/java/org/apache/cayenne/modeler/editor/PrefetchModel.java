begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|AbstractTableModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A table model for the Prefetch table.  */
end_comment

begin_class
class|class
name|PrefetchModel
extends|extends
name|AbstractTableModel
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefetchMap
decl_stmt|;
specifier|private
specifier|final
name|Object
name|root
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|prefetches
decl_stmt|;
name|PrefetchModel
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefetchMap
parameter_list|,
name|Object
name|root
parameter_list|)
block|{
name|this
operator|.
name|prefetchMap
operator|=
name|prefetchMap
expr_stmt|;
name|this
operator|.
name|prefetches
operator|=
name|prefetchMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
operator|(
name|prefetches
operator|!=
literal|null
operator|)
condition|?
name|prefetches
operator|.
name|length
else|:
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
return|return
name|prefetches
index|[
name|row
index|]
return|;
case|case
literal|1
case|:
return|return
name|isToMany
argument_list|(
name|prefetches
index|[
name|row
index|]
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
case|case
literal|2
case|:
return|return
name|getPrefetchTypeString
argument_list|(
name|prefetchMap
operator|.
name|get
argument_list|(
name|prefetches
index|[
name|row
index|]
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Invalid column: "
operator|+
name|column
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
return|return
name|String
operator|.
name|class
return|;
case|case
literal|1
case|:
return|return
name|Boolean
operator|.
name|class
return|;
case|case
literal|2
case|:
return|return
name|String
operator|.
name|class
return|;
default|default:
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Invalid column: "
operator|+
name|column
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|"Prefetch Path"
return|;
case|case
literal|1
case|:
return|return
literal|"To Many"
return|;
case|case
literal|2
case|:
return|return
literal|"Prefetch Type"
return|;
default|default:
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Invalid column: "
operator|+
name|column
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
return|return
name|column
operator|==
literal|2
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|2
case|:
name|prefetchMap
operator|.
name|put
argument_list|(
name|prefetches
index|[
name|row
index|]
argument_list|,
name|getPrefetchType
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|static
name|int
name|getPrefetchType
parameter_list|(
name|String
name|semantics
parameter_list|)
block|{
comment|//case 2: disjoint isn't use for SQLTemplate prefetch
switch|switch
condition|(
name|semantics
condition|)
block|{
case|case
literal|"Joint"
case|:
return|return
literal|1
return|;
case|case
literal|"Disjoint"
case|:
return|return
literal|2
return|;
case|case
literal|"Disjoint by id"
case|:
return|return
literal|3
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getPrefetchTypeString
parameter_list|(
name|int
name|semantics
parameter_list|)
block|{
switch|switch
condition|(
name|semantics
condition|)
block|{
case|case
literal|1
case|:
return|return
name|SelectQueryPrefetchTab
operator|.
name|JOINT_PREFETCH_SEMANTICS
return|;
case|case
literal|2
case|:
return|return
name|SelectQueryPrefetchTab
operator|.
name|DISJOINT_PREFETCH_SEMANTICS
return|;
case|case
literal|3
case|:
return|return
name|SelectQueryPrefetchTab
operator|.
name|DISJOINT_BY_ID_PREFETCH_SEMANTICS
return|;
block|}
return|return
name|SelectQueryPrefetchTab
operator|.
name|UNDEFINED_SEMANTICS
return|;
block|}
specifier|private
name|boolean
name|isToMany
parameter_list|(
name|String
name|prefetch
parameter_list|)
block|{
comment|// totally invalid path would result in ExpressionException
try|try
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
name|prefetch
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|exp
operator|.
name|evaluate
argument_list|(
name|root
argument_list|)
decl_stmt|;
return|return
name|object
operator|instanceof
name|Relationship
operator|&&
operator|(
operator|(
name|Relationship
operator|)
name|object
operator|)
operator|.
name|isToMany
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExpressionException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

