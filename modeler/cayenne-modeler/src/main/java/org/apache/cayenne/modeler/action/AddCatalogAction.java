begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ReverseEngineering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
operator|.
name|DbImportTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
operator|.
name|DbImportTreeUndoableEdit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|AddCatalogAction
extends|extends
name|TreeManipulationAction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_NAME
init|=
literal|"Add Catalog"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ICON_NAME
init|=
literal|"icon-dbi-catalog.png"
decl_stmt|;
name|AddCatalogAction
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|ACTION_NAME
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|insertableNodeClass
operator|=
name|Catalog
operator|.
name|class
expr_stmt|;
block|}
specifier|public
name|String
name|getIconName
parameter_list|()
block|{
return|return
name|ICON_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|performAction
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|boolean
name|updateSelected
init|=
literal|false
decl_stmt|;
name|tree
operator|.
name|stopEditing
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|insertableNodeName
operator|!=
literal|null
condition|?
name|insertableNodeName
else|:
name|EMPTY_NAME
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|getSelectionPath
argument_list|()
operator|==
literal|null
condition|)
block|{
name|TreePath
name|root
init|=
operator|new
name|TreePath
argument_list|(
name|tree
operator|.
name|getRootNode
argument_list|()
argument_list|)
decl_stmt|;
name|tree
operator|.
name|setSelectionPath
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|foundNode
operator|==
literal|null
condition|)
block|{
name|selectedElement
operator|=
name|tree
operator|.
name|getSelectedNode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|selectedElement
operator|=
name|foundNode
expr_stmt|;
block|}
name|parentElement
operator|=
operator|(
name|DbImportTreeNode
operator|)
name|selectedElement
operator|.
name|getParent
argument_list|()
expr_stmt|;
if|if
condition|(
name|parentElement
operator|==
literal|null
condition|)
block|{
name|parentElement
operator|=
name|selectedElement
expr_stmt|;
block|}
name|Catalog
name|newCatalog
init|=
operator|new
name|Catalog
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ReverseEngineering
name|reverseEngineeringOldCopy
init|=
operator|new
name|ReverseEngineering
argument_list|(
name|tree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reverseEngineeringIsEmpty
argument_list|()
condition|)
block|{
name|tree
operator|.
name|getRootNode
argument_list|()
operator|.
name|removeAllChildren
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|canBeInserted
argument_list|(
name|selectedElement
argument_list|)
condition|)
block|{
operator|(
operator|(
name|ReverseEngineering
operator|)
name|selectedElement
operator|.
name|getUserObject
argument_list|()
operator|)
operator|.
name|addCatalog
argument_list|(
name|newCatalog
argument_list|)
expr_stmt|;
name|selectedElement
operator|.
name|add
argument_list|(
operator|new
name|DbImportTreeNode
argument_list|(
name|newCatalog
argument_list|)
argument_list|)
expr_stmt|;
name|updateSelected
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|canInsert
argument_list|()
condition|)
block|{
operator|(
operator|(
name|ReverseEngineering
operator|)
name|parentElement
operator|.
name|getUserObject
argument_list|()
operator|)
operator|.
name|addCatalog
argument_list|(
name|newCatalog
argument_list|)
expr_stmt|;
name|parentElement
operator|.
name|add
argument_list|(
operator|new
name|DbImportTreeNode
argument_list|(
name|newCatalog
argument_list|)
argument_list|)
expr_stmt|;
name|updateSelected
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isMultipleAction
condition|)
block|{
name|updateAfterInsert
argument_list|(
name|updateSelected
argument_list|)
expr_stmt|;
block|}
name|ReverseEngineering
name|reverseEngineeringNewCopy
init|=
operator|new
name|ReverseEngineering
argument_list|(
name|tree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|isMultipleAction
operator|)
operator|&&
operator|(
operator|!
name|insertableNodeName
operator|.
name|equals
argument_list|(
name|EMPTY_NAME
argument_list|)
operator|)
condition|)
block|{
name|DbImportTreeUndoableEdit
name|undoableEdit
init|=
operator|new
name|DbImportTreeUndoableEdit
argument_list|(
name|reverseEngineeringOldCopy
argument_list|,
name|reverseEngineeringNewCopy
argument_list|,
name|tree
argument_list|,
name|getProjectController
argument_list|()
argument_list|)
decl_stmt|;
name|getProjectController
argument_list|()
operator|.
name|getApplication
argument_list|()
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undoableEdit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

