begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EmbeddedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|AttributeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|MapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|wrapper
operator|.
name|ObjAttributeWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|AttributeDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EntityDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CellEditorForAttributeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ModelerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ProjectUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|extension
operator|.
name|info
operator|.
name|ObjectInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Model for the Object Entity attributes and for Obj to DB Attribute Mapping tables.  * Allows adding/removing attributes, modifying the types and the names.  *   */
end_comment

begin_class
specifier|public
class|class
name|ObjAttributeTableModel
extends|extends
name|CayenneTableModel
argument_list|<
name|ObjAttributeWrapper
argument_list|>
block|{
comment|// Columns
specifier|public
specifier|static
specifier|final
name|int
name|OBJ_ATTRIBUTE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OBJ_ATTRIBUTE_TYPE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_TYPE
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LOCKING
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|COMMENT
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|COLUMN_COUNT
init|=
literal|6
decl_stmt|;
specifier|private
name|ObjEntity
name|entity
decl_stmt|;
specifier|private
name|DbEntity
name|dbEntity
decl_stmt|;
specifier|private
name|CellEditorForAttributeTable
name|cellEditor
decl_stmt|;
specifier|private
name|CayenneTable
name|table
decl_stmt|;
specifier|public
name|ObjAttributeTableModel
parameter_list|(
name|ObjEntity
name|entity
parameter_list|,
name|ProjectController
name|mediator
parameter_list|,
name|Object
name|eventSource
parameter_list|)
block|{
name|super
argument_list|(
name|mediator
argument_list|,
name|eventSource
argument_list|,
name|wrapObjAttributes
argument_list|(
name|entity
operator|.
name|getAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// take a copy
name|this
operator|.
name|entity
operator|=
name|entity
expr_stmt|;
name|this
operator|.
name|dbEntity
operator|=
name|entity
operator|.
name|getDbEntity
argument_list|()
expr_stmt|;
comment|// order using local comparator
name|Collections
operator|.
name|sort
argument_list|(
name|objectList
argument_list|,
operator|new
name|AttributeComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|ObjAttributeWrapper
argument_list|>
name|wrapObjAttributes
parameter_list|(
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
name|attributes
parameter_list|)
block|{
name|List
argument_list|<
name|ObjAttributeWrapper
argument_list|>
name|wrappedAttributes
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjAttributeWrapper
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjAttribute
name|attr
range|:
name|attributes
control|)
block|{
name|wrappedAttributes
operator|.
name|add
argument_list|(
operator|new
name|ObjAttributeWrapper
argument_list|(
name|attr
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|wrappedAttributes
return|;
block|}
specifier|protected
name|void
name|orderList
parameter_list|()
block|{
comment|// NOOP
block|}
specifier|public
name|CayenneTable
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|col
parameter_list|)
block|{
switch|switch
condition|(
name|col
condition|)
block|{
case|case
name|LOCKING
case|:
return|return
name|Boolean
operator|.
name|class
return|;
default|default:
return|return
name|String
operator|.
name|class
return|;
block|}
block|}
comment|/**      * Returns ObjAttribute class.      */
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getElementsClass
parameter_list|()
block|{
return|return
name|ObjAttributeWrapper
operator|.
name|class
return|;
block|}
specifier|public
name|DbEntity
name|getDbEntity
parameter_list|()
block|{
return|return
name|dbEntity
return|;
block|}
specifier|public
name|ObjAttributeWrapper
name|getAttribute
parameter_list|(
name|int
name|row
parameter_list|)
block|{
return|return
operator|(
name|row
operator|>=
literal|0
operator|&&
name|row
operator|<
name|objectList
operator|.
name|size
argument_list|()
operator|)
condition|?
name|objectList
operator|.
name|get
argument_list|(
name|row
argument_list|)
else|:
literal|null
return|;
block|}
comment|/** Refreshes DbEntity to current db entity within ObjEntity. */
specifier|public
name|void
name|resetDbEntity
parameter_list|()
block|{
if|if
condition|(
name|dbEntity
operator|==
name|entity
operator|.
name|getDbEntity
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|wasShowing
init|=
name|isShowingDb
argument_list|()
decl_stmt|;
name|dbEntity
operator|=
name|entity
operator|.
name|getDbEntity
argument_list|()
expr_stmt|;
name|boolean
name|isShowing
init|=
name|isShowingDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|wasShowing
operator|!=
name|isShowing
condition|)
block|{
name|fireTableStructureChanged
argument_list|()
expr_stmt|;
block|}
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|isShowingDb
parameter_list|()
block|{
return|return
name|dbEntity
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|COLUMN_COUNT
return|;
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|OBJ_ATTRIBUTE
case|:
return|return
literal|"Name"
return|;
case|case
name|OBJ_ATTRIBUTE_TYPE
case|:
return|return
literal|"Java Type"
return|;
case|case
name|DB_ATTRIBUTE
case|:
return|return
literal|"DbAttribute Path"
return|;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
return|return
literal|"DB Type"
return|;
case|case
name|LOCKING
case|:
return|return
literal|"Used for Locking"
return|;
case|case
name|COMMENT
case|:
return|return
literal|"Comment"
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|ObjAttributeWrapper
name|attribute
init|=
name|getAttribute
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|DbAttribute
name|dbAttribute
init|=
name|attribute
operator|.
name|getDbAttribute
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|OBJ_ATTRIBUTE
case|:
return|return
name|attribute
operator|.
name|getName
argument_list|()
return|;
case|case
name|OBJ_ATTRIBUTE_TYPE
case|:
return|return
name|attribute
operator|.
name|getType
argument_list|()
return|;
case|case
name|LOCKING
case|:
return|return
name|attribute
operator|.
name|isUsedForLocking
argument_list|()
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
case|case
name|DB_ATTRIBUTE
case|:
return|return
name|getDBAttribute
argument_list|(
name|attribute
argument_list|,
name|dbAttribute
argument_list|)
return|;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
return|return
name|getDBAttributeType
argument_list|(
name|attribute
argument_list|,
name|dbAttribute
argument_list|)
return|;
case|case
name|COMMENT
case|:
return|return
name|getComment
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|String
name|getDBAttribute
parameter_list|(
name|ObjAttributeWrapper
name|attribute
parameter_list|,
name|DbAttribute
name|dbAttribute
parameter_list|)
block|{
if|if
condition|(
name|dbAttribute
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|attribute
operator|.
name|isInherited
argument_list|()
operator|&&
name|attribute
operator|.
name|getEntity
argument_list|()
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
return|return
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
if|else if
condition|(
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
operator|!=
literal|null
operator|&&
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
return|return
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
return|;
block|}
return|return
name|dbAttribute
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|private
name|String
name|getDBAttributeType
parameter_list|(
name|ObjAttributeWrapper
name|attribute
parameter_list|,
name|DbAttribute
name|dbAttribute
parameter_list|)
block|{
name|int
name|type
decl_stmt|;
if|if
condition|(
name|dbAttribute
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|attribute
operator|.
name|getValue
argument_list|()
operator|instanceof
name|EmbeddedAttribute
operator|)
condition|)
block|{
try|try
block|{
name|type
operator|=
name|TypesMapping
operator|.
name|getSqlTypeByJava
argument_list|(
name|attribute
operator|.
name|getJavaClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// have to catch the exception here to make sure that
comment|// exceptional situations
comment|// (class doesn't exist, for example) don't prevent the gui
comment|// from properly updating.
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|cre
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|type
operator|=
name|dbAttribute
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
return|return
name|TypesMapping
operator|.
name|getSqlNameByType
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|CellEditorForAttributeTable
name|setCellEditor
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|nameAttr
parameter_list|,
name|CayenneTable
name|table
parameter_list|)
block|{
name|this
operator|.
name|cellEditor
operator|=
operator|new
name|CellEditorForAttributeTable
argument_list|(
name|table
argument_list|,
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|(
name|nameAttr
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
return|return
name|cellEditor
return|;
block|}
specifier|public
name|CellEditorForAttributeTable
name|getCellEditor
parameter_list|()
block|{
return|return
name|cellEditor
return|;
block|}
comment|/**      * Correct errors that attributes have.      */
annotation|@
name|Override
specifier|public
name|void
name|resetModel
parameter_list|()
block|{
for|for
control|(
name|ObjAttributeWrapper
name|attribute
range|:
name|objectList
control|)
block|{
name|attribute
operator|.
name|resetEdits
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return false, if one or more attributes in model are not valid.       */
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
for|for
control|(
name|ObjAttributeWrapper
name|attribute
range|:
name|getObjectList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|attribute
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|setObjAttribute
parameter_list|(
name|ObjAttributeWrapper
name|attribute
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|attribute
operator|.
name|setName
argument_list|(
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|attribute
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|attribute
operator|.
name|commitEdits
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setObjAttributeType
parameter_list|(
name|ObjAttributeWrapper
name|attribute
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|String
name|oldType
init|=
name|attribute
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|newType
init|=
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
name|newType
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldType
operator|==
literal|null
operator|||
name|newType
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|registeredTypes
init|=
name|ModelerUtil
operator|.
name|getRegisteredTypeNames
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|registeredTypesList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|registeredTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|registeredTypesList
operator|.
name|contains
argument_list|(
name|oldType
argument_list|)
operator|==
name|registeredTypesList
operator|.
name|contains
argument_list|(
name|newType
argument_list|)
condition|)
block|{
return|return;
block|}
name|ObjEntity
name|entity
init|=
name|attribute
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|ObjAttribute
name|attributeNew
decl_stmt|;
if|if
condition|(
name|registeredTypesList
operator|.
name|contains
argument_list|(
name|newType
argument_list|)
operator|||
operator|!
name|mediator
operator|.
name|getEmbeddableNamesInCurrentDataDomain
argument_list|()
operator|.
name|contains
argument_list|(
name|newType
argument_list|)
condition|)
block|{
name|attributeNew
operator|=
operator|new
name|ObjAttribute
argument_list|()
expr_stmt|;
name|attributeNew
operator|.
name|setDbAttributePath
argument_list|(
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attributeNew
operator|=
operator|new
name|EmbeddedAttribute
argument_list|()
expr_stmt|;
name|attributeNew
operator|.
name|setDbAttributePath
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|attributeNew
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attributeNew
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|attributeNew
operator|.
name|setParent
argument_list|(
name|attribute
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|attributeNew
operator|.
name|setType
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|attributeNew
operator|.
name|setUsedForLocking
argument_list|(
name|attribute
operator|.
name|isUsedForLocking
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|updateAttribute
argument_list|(
name|attributeNew
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireObjEntityEvent
argument_list|(
operator|new
name|EntityEvent
argument_list|(
name|this
argument_list|,
name|entity
argument_list|,
name|MapEvent
operator|.
name|CHANGE
argument_list|)
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireObjEntityDisplayEvent
argument_list|(
operator|new
name|EntityDisplayEvent
argument_list|(
name|this
argument_list|,
name|mediator
operator|.
name|getCurrentObjEntity
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireObjAttributeEvent
argument_list|(
operator|new
name|AttributeEvent
argument_list|(
name|this
argument_list|,
name|attributeNew
argument_list|,
name|entity
argument_list|,
name|MapEvent
operator|.
name|CHANGE
argument_list|)
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireObjAttributeDisplayEvent
argument_list|(
operator|new
name|AttributeDisplayEvent
argument_list|(
name|this
argument_list|,
name|attributeNew
argument_list|,
name|mediator
operator|.
name|getCurrentObjEntity
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setColumnLocking
parameter_list|(
name|ObjAttributeWrapper
name|attribute
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|attribute
operator|.
name|setUsedForLocking
argument_list|(
operator|(
name|value
operator|instanceof
name|Boolean
operator|)
operator|&&
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setDbAttribute
parameter_list|(
name|ObjAttributeWrapper
name|attribute
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
comment|// If db attribute exist, associate it with obj attribute
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ProjectUtil
operator|.
name|isDbAttributePathCorrect
argument_list|(
name|dbEntity
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|attribute
operator|.
name|setDbAttributePath
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attribute
operator|.
name|setDbAttributePath
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If name is erased, remove db attribute from obj attribute.
if|else if
condition|(
name|attribute
operator|.
name|getDbAttribute
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|attribute
operator|.
name|setDbAttributePath
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUpdatedValueAt
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|ObjAttributeWrapper
name|attribute
init|=
name|getAttribute
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|attribute
operator|.
name|resetEdits
argument_list|()
expr_stmt|;
name|AttributeEvent
name|event
init|=
operator|new
name|AttributeEvent
argument_list|(
name|eventSource
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|,
name|entity
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|OBJ_ATTRIBUTE
case|:
name|event
operator|.
name|setOldName
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setObjAttribute
argument_list|(
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|fireTableCellUpdated
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
break|break;
case|case
name|OBJ_ATTRIBUTE_TYPE
case|:
name|setObjAttributeType
argument_list|(
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|fireTableCellUpdated
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOCKING
case|:
name|setColumnLocking
argument_list|(
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|fireTableCellUpdated
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE
case|:
name|setDbAttribute
argument_list|(
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|fireTableRowsUpdated
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMMENT
case|:
name|setComment
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
default|default:
name|fireTableRowsUpdated
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
name|mediator
operator|.
name|fireObjAttributeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|getAttribute
argument_list|(
name|row
argument_list|)
operator|.
name|isInherited
argument_list|()
condition|)
block|{
return|return
name|col
operator|==
name|DB_ATTRIBUTE
return|;
block|}
return|return
name|col
operator|!=
name|DB_ATTRIBUTE_TYPE
return|;
block|}
specifier|public
name|ObjEntity
name|getEntity
parameter_list|()
block|{
return|return
name|entity
return|;
block|}
specifier|final
class|class
name|AttributeComparator
implements|implements
name|Comparator
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|Attribute
name|a1
init|=
operator|(
operator|(
name|ObjAttributeWrapper
operator|)
name|o1
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Attribute
name|a2
init|=
operator|(
operator|(
name|ObjAttributeWrapper
operator|)
name|o2
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|delta
init|=
name|getWeight
argument_list|(
name|a1
argument_list|)
operator|-
name|getWeight
argument_list|(
name|a2
argument_list|)
decl_stmt|;
return|return
operator|(
name|delta
operator|!=
literal|0
operator|)
condition|?
name|delta
else|:
name|Util
operator|.
name|nullSafeCompare
argument_list|(
literal|true
argument_list|,
name|a1
operator|.
name|getName
argument_list|()
argument_list|,
name|a2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|int
name|getWeight
parameter_list|(
name|Attribute
name|a
parameter_list|)
block|{
return|return
name|a
operator|.
name|getEntity
argument_list|()
operator|==
name|entity
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|sortByColumn
parameter_list|(
specifier|final
name|int
name|sortCol
parameter_list|,
name|boolean
name|isAscent
parameter_list|)
block|{
switch|switch
condition|(
name|sortCol
condition|)
block|{
case|case
name|OBJ_ATTRIBUTE
case|:
name|sortByElementProperty
argument_list|(
literal|"name"
argument_list|,
name|isAscent
argument_list|)
expr_stmt|;
break|break;
case|case
name|OBJ_ATTRIBUTE_TYPE
case|:
name|sortByElementProperty
argument_list|(
literal|"type"
argument_list|,
name|isAscent
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOCKING
case|:
name|sortByElementProperty
argument_list|(
literal|"usedForLocking"
argument_list|,
name|isAscent
argument_list|)
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE
case|:
case|case
name|DB_ATTRIBUTE_TYPE
case|:
name|Collections
operator|.
name|sort
argument_list|(
name|objectList
argument_list|,
operator|new
name|ObjAttributeTableComparator
argument_list|(
name|sortCol
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAscent
condition|)
block|{
name|Collections
operator|.
name|reverse
argument_list|(
name|objectList
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
return|return;
block|}
block|}
specifier|private
class|class
name|ObjAttributeTableComparator
implements|implements
name|Comparator
argument_list|<
name|ObjAttributeWrapper
argument_list|>
block|{
specifier|private
name|int
name|sortCol
decl_stmt|;
specifier|public
name|ObjAttributeTableComparator
parameter_list|(
name|int
name|sortCol
parameter_list|)
block|{
name|this
operator|.
name|sortCol
operator|=
name|sortCol
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ObjAttributeWrapper
name|o1
parameter_list|,
name|ObjAttributeWrapper
name|o2
parameter_list|)
block|{
name|Integer
name|compareObjAttributesVal
init|=
name|compareObjAttributes
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareObjAttributesVal
operator|!=
literal|null
condition|)
block|{
return|return
name|compareObjAttributesVal
return|;
block|}
name|String
name|valToCompare1
init|=
name|getDBAttribute
argument_list|(
name|o1
argument_list|,
name|o1
operator|.
name|getDbAttribute
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|valToCompare2
init|=
name|getDBAttribute
argument_list|(
name|o2
argument_list|,
name|o2
operator|.
name|getDbAttribute
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|sortCol
condition|)
block|{
case|case
name|DB_ATTRIBUTE
case|:
name|valToCompare1
operator|=
name|getDBAttribute
argument_list|(
name|o1
argument_list|,
name|o1
operator|.
name|getDbAttribute
argument_list|()
argument_list|)
expr_stmt|;
name|valToCompare2
operator|=
name|getDBAttribute
argument_list|(
name|o2
argument_list|,
name|o2
operator|.
name|getDbAttribute
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
name|valToCompare1
operator|=
name|getDBAttributeType
argument_list|(
name|o1
argument_list|,
name|o1
operator|.
name|getDbAttribute
argument_list|()
argument_list|)
expr_stmt|;
name|valToCompare2
operator|=
name|getDBAttributeType
argument_list|(
name|o2
argument_list|,
name|o2
operator|.
name|getDbAttribute
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
operator|(
name|valToCompare1
operator|==
literal|null
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|valToCompare2
operator|==
literal|null
operator|)
condition|?
literal|1
else|:
name|valToCompare1
operator|.
name|compareTo
argument_list|(
name|valToCompare2
argument_list|)
return|;
block|}
specifier|private
name|Integer
name|compareObjAttributes
parameter_list|(
name|ObjAttributeWrapper
name|o1
parameter_list|,
name|ObjAttributeWrapper
name|o2
parameter_list|)
block|{
if|if
condition|(
operator|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|==
literal|null
operator|)
operator|||
name|o1
operator|==
name|o2
condition|)
block|{
return|return
literal|0
return|;
block|}
if|else if
condition|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|!=
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|o1
operator|!=
literal|null
operator|&&
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|String
name|getComment
parameter_list|(
name|ObjAttribute
name|attr
parameter_list|)
block|{
return|return
name|ObjectInfo
operator|.
name|getFromMetaData
argument_list|(
name|mediator
operator|.
name|getApplication
argument_list|()
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|attr
argument_list|,
name|ObjectInfo
operator|.
name|COMMENT
argument_list|)
return|;
block|}
specifier|private
name|void
name|setComment
parameter_list|(
name|String
name|newVal
parameter_list|,
name|ObjAttribute
name|attr
parameter_list|)
block|{
name|ObjectInfo
operator|.
name|putToMetaData
argument_list|(
name|mediator
operator|.
name|getApplication
argument_list|()
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|attr
argument_list|,
name|ObjectInfo
operator|.
name|COMMENT
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isColumnSortable
parameter_list|(
name|int
name|sortCol
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

