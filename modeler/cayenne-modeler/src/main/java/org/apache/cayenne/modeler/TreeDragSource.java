begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTree
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultMutableTreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragGestureEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragGestureListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragGestureRecognizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragSourceDragEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragSourceDropEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragSourceEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragSourceListener
import|;
end_import

begin_class
specifier|public
class|class
name|TreeDragSource
implements|implements
name|DragSourceListener
implements|,
name|DragGestureListener
block|{
specifier|private
name|DragSource
name|source
decl_stmt|;
specifier|private
name|JTree
name|sourceTree
decl_stmt|;
specifier|private
name|ProjectController
name|eventController
decl_stmt|;
specifier|private
name|DragGestureRecognizer
name|recognizer
decl_stmt|;
specifier|private
name|TreeDropTarget
name|dt
decl_stmt|;
specifier|public
name|TreeDragSource
parameter_list|(
name|JTree
name|tree
parameter_list|,
name|int
name|actions
parameter_list|,
name|ProjectController
name|eventController
parameter_list|)
block|{
name|sourceTree
operator|=
name|tree
expr_stmt|;
name|this
operator|.
name|eventController
operator|=
name|eventController
expr_stmt|;
name|source
operator|=
operator|new
name|DragSource
argument_list|()
expr_stmt|;
name|recognizer
operator|=
name|source
operator|.
name|createDefaultDragGestureRecognizer
argument_list|(
name|sourceTree
argument_list|,
name|actions
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/*      * Drag Gesture Handler      */
specifier|public
name|void
name|dragGestureRecognized
parameter_list|(
name|DragGestureEvent
name|dge
parameter_list|)
block|{
name|TreePath
name|path
init|=
name|sourceTree
operator|.
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|path
operator|==
literal|null
operator|)
operator|||
operator|(
name|path
operator|.
name|getPathCount
argument_list|()
operator|<=
literal|1
operator|)
condition|)
block|{
return|return;
block|}
name|dt
operator|=
operator|new
name|TreeDropTarget
argument_list|(
name|sourceTree
argument_list|,
name|eventController
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|source
operator|.
name|startDrag
argument_list|(
name|dge
argument_list|,
name|DragSource
operator|.
name|DefaultLinkDrop
argument_list|,
name|dt
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dragOver
parameter_list|(
name|DragSourceDragEvent
name|dsde
parameter_list|)
block|{
name|TreePath
name|sourcePath
init|=
name|sourceTree
operator|.
name|getSelectionPath
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|sourceParent
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|sourcePath
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|TreePath
name|path
init|=
name|dt
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|dsde
operator|.
name|getDragSourceContext
argument_list|()
operator|.
name|setCursor
argument_list|(
name|DragSource
operator|.
name|DefaultLinkNoDrop
argument_list|)
expr_stmt|;
return|return;
block|}
name|DefaultMutableTreeNode
name|parent
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceParent
operator|.
name|getUserObject
argument_list|()
operator|instanceof
name|DataMap
operator|&&
name|parent
operator|.
name|getUserObject
argument_list|()
operator|instanceof
name|DataNodeDescriptor
condition|)
block|{
name|dsde
operator|.
name|getDragSourceContext
argument_list|()
operator|.
name|setCursor
argument_list|(
name|DragSource
operator|.
name|DefaultLinkDrop
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dsde
operator|.
name|getDragSourceContext
argument_list|()
operator|.
name|setCursor
argument_list|(
name|DragSource
operator|.
name|DefaultLinkNoDrop
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dropActionChanged
parameter_list|(
name|DragSourceDragEvent
name|dsde
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dragDropEnd
parameter_list|(
name|DragSourceDropEvent
name|dsde
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dragEnter
parameter_list|(
name|DragSourceDragEvent
name|dsde
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dragExit
parameter_list|(
name|DragSourceEvent
name|dse
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

