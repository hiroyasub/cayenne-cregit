begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FlowLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|CayenneModelerFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|PanelFactory
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DbLoaderMergeDialog
extends|extends
name|CayenneDialog
block|{
specifier|protected
name|DbLoaderHelper
name|helper
decl_stmt|;
specifier|protected
name|JCheckBox
name|rememberSelection
decl_stmt|;
specifier|protected
name|JLabel
name|message
decl_stmt|;
specifier|protected
name|JButton
name|overwriteButton
decl_stmt|;
specifier|protected
name|JButton
name|skipButton
decl_stmt|;
specifier|protected
name|JButton
name|stopButton
decl_stmt|;
specifier|public
name|DbLoaderMergeDialog
parameter_list|(
name|CayenneModelerFrame
name|owner
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|initController
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
comment|// create widgets
name|this
operator|.
name|rememberSelection
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Remember my decision for other entities."
argument_list|)
expr_stmt|;
name|this
operator|.
name|rememberSelection
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|overwriteButton
operator|=
operator|new
name|JButton
argument_list|(
literal|"Overwrite"
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipButton
operator|=
operator|new
name|JButton
argument_list|(
literal|"Skip"
argument_list|)
expr_stmt|;
name|this
operator|.
name|stopButton
operator|=
operator|new
name|JButton
argument_list|(
literal|"Stop"
argument_list|)
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|JLabel
argument_list|(
literal|"DataMap already contains this table. Overwrite?"
argument_list|)
expr_stmt|;
comment|// assemble
name|JPanel
name|messagePanel
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|FlowLayout
argument_list|(
name|FlowLayout
operator|.
name|CENTER
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|messagePanel
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|JPanel
name|checkPanel
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|FlowLayout
argument_list|(
name|FlowLayout
operator|.
name|LEFT
argument_list|,
literal|20
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|checkPanel
operator|.
name|add
argument_list|(
name|rememberSelection
argument_list|)
expr_stmt|;
name|JPanel
name|buttons
init|=
name|PanelFactory
operator|.
name|createButtonPanel
argument_list|(
operator|new
name|JButton
index|[]
block|{
name|skipButton
block|,
name|overwriteButton
block|,
name|stopButton
block|}
argument_list|)
decl_stmt|;
name|Container
name|contentPane
init|=
name|getContentPane
argument_list|()
decl_stmt|;
name|contentPane
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|add
argument_list|(
name|messagePanel
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|add
argument_list|(
name|checkPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|add
argument_list|(
name|buttons
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setResizable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setSize
argument_list|(
literal|250
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
literal|"DbEntity Already Exists"
argument_list|)
expr_stmt|;
name|setDefaultCloseOperation
argument_list|(
name|JDialog
operator|.
name|DO_NOTHING_ON_CLOSE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initController
parameter_list|()
block|{
name|overwriteButton
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|updateModel
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|skipButton
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|updateModel
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|stopButton
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|updateModel
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateModel
parameter_list|(
name|boolean
name|overwrite
parameter_list|,
name|boolean
name|stop
parameter_list|)
block|{
if|if
condition|(
name|helper
operator|!=
literal|null
condition|)
block|{
name|helper
operator|.
name|setOverwritePreferenceSet
argument_list|(
name|rememberSelection
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|setOverwritingEntities
argument_list|(
name|overwrite
argument_list|)
expr_stmt|;
name|helper
operator|.
name|setStoppingReverseEngineering
argument_list|(
name|stop
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initFromModel
parameter_list|(
name|DbLoaderHelper
name|helper
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|helper
operator|=
name|helper
expr_stmt|;
name|this
operator|.
name|message
operator|.
name|setText
argument_list|(
literal|"DataMap already contains table '"
operator|+
name|tableName
operator|+
literal|"'. Overwrite?"
argument_list|)
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

