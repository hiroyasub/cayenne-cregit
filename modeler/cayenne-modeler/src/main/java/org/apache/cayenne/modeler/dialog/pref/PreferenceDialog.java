begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
operator|.
name|PreferenceEditor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dialog
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Frame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A controller for editing Modeler preferences.  *   */
end_comment

begin_class
specifier|public
class|class
name|PreferenceDialog
extends|extends
name|CayenneController
block|{
specifier|public
specifier|static
specifier|final
name|String
name|GENERAL_KEY
init|=
literal|"General"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATA_SOURCES_KEY
init|=
literal|"Local DataSources"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CLASS_PATH_KEY
init|=
literal|"ClassPath"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEMPLATES_KEY
init|=
literal|"Templates"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|preferenceMenus
init|=
operator|new
name|String
index|[]
block|{
name|GENERAL_KEY
block|,
name|DATA_SOURCES_KEY
block|,
name|CLASS_PATH_KEY
block|,
name|TEMPLATES_KEY
block|}
decl_stmt|;
specifier|protected
name|PreferenceDialogView
name|view
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|CayenneController
argument_list|>
name|detailControllers
decl_stmt|;
specifier|protected
name|PreferenceEditor
name|editor
decl_stmt|;
specifier|public
name|PreferenceDialog
parameter_list|(
specifier|final
name|CayenneController
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
specifier|final
name|Window
name|parentView
init|=
name|parent
operator|.
name|getView
argument_list|()
operator|instanceof
name|Window
condition|?
operator|(
name|Window
operator|)
name|parent
operator|.
name|getView
argument_list|()
else|:
name|SwingUtilities
operator|.
name|getWindowAncestor
argument_list|(
name|parent
operator|.
name|getView
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|view
operator|=
operator|(
name|parentView
operator|instanceof
name|Dialog
operator|)
condition|?
operator|new
name|PreferenceDialogView
argument_list|(
operator|(
name|Dialog
operator|)
name|parentView
argument_list|)
else|:
operator|new
name|PreferenceDialogView
argument_list|(
operator|(
name|Frame
operator|)
name|parentView
argument_list|)
expr_stmt|;
name|this
operator|.
name|detailControllers
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// editor must be configured before startup for "showDetailViewAction()" to work
name|this
operator|.
name|editor
operator|=
operator|new
name|CayenneModelerPreferenceEditor
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|initBindings
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initBindings
parameter_list|()
block|{
specifier|final
name|JList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|view
operator|.
name|getList
argument_list|()
decl_stmt|;
name|list
operator|.
name|setListData
argument_list|(
name|preferenceMenus
argument_list|)
expr_stmt|;
name|list
operator|.
name|addListSelectionListener
argument_list|(
name|e
lambda|->
name|updateSelection
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|getCancelButton
argument_list|()
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|cancelAction
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|getSaveButton
argument_list|()
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|savePreferencesAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateSelection
parameter_list|()
block|{
specifier|final
name|String
name|selection
init|=
name|view
operator|.
name|getList
argument_list|()
operator|.
name|getSelectedValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|selection
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|getDetailLayout
argument_list|()
operator|.
name|show
argument_list|(
name|view
operator|.
name|getDetailPanel
argument_list|()
argument_list|,
name|selection
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|cancelAction
parameter_list|()
block|{
name|editor
operator|.
name|revert
argument_list|()
expr_stmt|;
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|savePreferencesAction
parameter_list|()
block|{
name|editor
operator|.
name|save
argument_list|()
expr_stmt|;
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|/**      * Configures preferences dialog to display an editor for a local DataSource with      * specified name.      */
specifier|public
name|void
name|showDataSourceEditorAction
parameter_list|(
specifier|final
name|Object
name|dataSourceKey
parameter_list|)
block|{
name|configure
argument_list|()
expr_stmt|;
comment|// this will install needed controller
name|view
operator|.
name|getDetailLayout
argument_list|()
operator|.
name|show
argument_list|(
name|view
operator|.
name|getDetailPanel
argument_list|()
argument_list|,
name|DATA_SOURCES_KEY
argument_list|)
expr_stmt|;
specifier|final
name|DataSourcePreferences
name|controller
init|=
operator|(
name|DataSourcePreferences
operator|)
name|detailControllers
operator|.
name|get
argument_list|(
name|DATA_SOURCES_KEY
argument_list|)
decl_stmt|;
name|controller
operator|.
name|editDataSourceAction
argument_list|(
name|dataSourceKey
argument_list|)
expr_stmt|;
name|view
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Configures preferences dialog to display an editor for a local DataSource with      * specified name.      */
specifier|public
name|void
name|showClassPathEditorAction
parameter_list|()
block|{
name|configure
argument_list|()
expr_stmt|;
comment|// this will install needed controller
name|view
operator|.
name|getDetailLayout
argument_list|()
operator|.
name|show
argument_list|(
name|view
operator|.
name|getDetailPanel
argument_list|()
argument_list|,
name|CLASS_PATH_KEY
argument_list|)
expr_stmt|;
name|ClasspathPreferences
name|controller
init|=
operator|(
name|ClasspathPreferences
operator|)
name|detailControllers
operator|.
name|get
argument_list|(
name|CLASS_PATH_KEY
argument_list|)
decl_stmt|;
name|controller
operator|.
name|getView
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|view
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startupAction
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
name|configure
argument_list|()
expr_stmt|;
name|view
operator|.
name|getList
argument_list|()
operator|.
name|setSelectedValue
argument_list|(
name|key
operator|==
literal|null
condition|?
name|GENERAL_KEY
else|:
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|view
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startupToCreateTemplate
parameter_list|(
name|String
name|template
parameter_list|,
name|String
name|superTemplate
parameter_list|)
block|{
name|configure
argument_list|()
expr_stmt|;
operator|(
operator|(
name|TemplatePreferences
operator|)
name|detailControllers
operator|.
name|get
argument_list|(
name|TEMPLATES_KEY
argument_list|)
operator|)
operator|.
name|addTemplateAction
argument_list|(
name|template
argument_list|,
name|superTemplate
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|configure
parameter_list|()
block|{
comment|// init known panels
name|registerPanel
argument_list|(
name|GENERAL_KEY
argument_list|,
operator|new
name|GeneralPreferences
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|registerPanel
argument_list|(
name|DATA_SOURCES_KEY
argument_list|,
operator|new
name|DataSourcePreferences
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|registerPanel
argument_list|(
name|CLASS_PATH_KEY
argument_list|,
operator|new
name|ClasspathPreferences
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|registerPanel
argument_list|(
name|TEMPLATES_KEY
argument_list|,
operator|new
name|TemplatePreferences
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDetailLayout
argument_list|()
operator|.
name|show
argument_list|(
name|view
operator|.
name|getDetailPanel
argument_list|()
argument_list|,
name|GENERAL_KEY
argument_list|)
expr_stmt|;
name|view
operator|.
name|pack
argument_list|()
expr_stmt|;
comment|// show
name|centerView
argument_list|()
expr_stmt|;
name|makeCloseableOnEscape
argument_list|()
expr_stmt|;
name|view
operator|.
name|setDefaultCloseOperation
argument_list|(
name|JDialog
operator|.
name|DISPOSE_ON_CLOSE
argument_list|)
expr_stmt|;
name|view
operator|.
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|registerPanel
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|CayenneController
name|panelController
parameter_list|)
block|{
name|detailControllers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|panelController
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDetailPanel
argument_list|()
operator|.
name|add
argument_list|(
name|panelController
operator|.
name|getView
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
specifier|public
name|PreferenceEditor
name|getEditor
parameter_list|()
block|{
return|return
name|editor
return|;
block|}
block|}
end_class

end_unit

