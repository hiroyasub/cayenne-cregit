begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|OverwriteDialog
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SELECT_ANOTHER
init|=
literal|"Select Another"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OVERWRITE
init|=
literal|"Overwrite"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CANCEL
init|=
literal|"Cancel"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|OPTIONS
init|=
operator|new
name|String
index|[]
block|{
name|SELECT_ANOTHER
block|,
name|OVERWRITE
block|,
name|CANCEL
block|}
decl_stmt|;
specifier|protected
name|File
name|file
decl_stmt|;
specifier|protected
name|Component
name|parent
decl_stmt|;
specifier|protected
name|String
name|result
init|=
name|CANCEL
decl_stmt|;
specifier|public
name|OverwriteDialog
parameter_list|(
name|File
name|file
parameter_list|,
name|Component
name|parent
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|void
name|show
parameter_list|()
block|{
name|JOptionPane
name|pane
init|=
operator|new
name|JOptionPane
argument_list|(
literal|"Do you want to overwrite an existing file: "
operator|+
name|file
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|)
decl_stmt|;
name|pane
operator|.
name|setOptions
argument_list|(
name|OPTIONS
argument_list|)
expr_stmt|;
name|JDialog
name|dialog
init|=
name|pane
operator|.
name|createDialog
argument_list|(
name|parent
argument_list|,
literal|"File exists"
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|selectedValue
init|=
name|pane
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|result
operator|=
operator|(
name|selectedValue
operator|!=
literal|null
operator|)
condition|?
name|selectedValue
operator|.
name|toString
argument_list|()
else|:
name|CANCEL
expr_stmt|;
block|}
specifier|public
name|boolean
name|shouldSelectAnother
parameter_list|()
block|{
return|return
name|SELECT_ANOTHER
operator|.
name|equals
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|shouldOverwrite
parameter_list|()
block|{
return|return
name|OVERWRITE
operator|.
name|equals
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|shouldCancel
parameter_list|()
block|{
return|return
name|result
operator|==
literal|null
operator|||
name|CANCEL
operator|.
name|equals
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
end_class

end_unit

