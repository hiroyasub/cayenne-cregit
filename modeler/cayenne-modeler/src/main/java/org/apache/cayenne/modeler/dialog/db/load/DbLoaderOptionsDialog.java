begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
package|;
end_package

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|DefaultFormBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|DbActionOptionsDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|NameGeneratorPreferences
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_comment
comment|/**  * Dialog for selecting database reverse-engineering parameters.  */
end_comment

begin_class
specifier|public
class|class
name|DbLoaderOptionsDialog
extends|extends
name|DbActionOptionsDialog
block|{
specifier|private
name|JTextField
name|tableNamePatternField
decl_stmt|;
specifier|private
name|JTextField
name|meaningfulPk
decl_stmt|;
specifier|private
name|JTextField
name|procNamePatternField
decl_stmt|;
specifier|private
name|JComboBox
argument_list|<
name|String
argument_list|>
name|strategyCombo
decl_stmt|;
specifier|protected
name|String
name|strategy
decl_stmt|;
comment|/**      * Creates and initializes new ChooseSchemaDialog.      */
specifier|public
name|DbLoaderOptionsDialog
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|catalogs
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|schemas
parameter_list|,
name|String
name|dbCatalog
parameter_list|,
name|String
name|currentSchema
parameter_list|)
block|{
name|super
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
literal|"Reengineer DB Schema: Select Options"
argument_list|,
name|catalogs
argument_list|,
name|schemas
argument_list|,
name|dbCatalog
argument_list|,
name|currentSchema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initForm
parameter_list|(
name|DefaultFormBuilder
name|builder
parameter_list|)
block|{
name|tableNamePatternField
operator|=
operator|new
name|JTextField
argument_list|()
expr_stmt|;
name|tableNamePatternField
operator|.
name|setToolTipText
argument_list|(
literal|"<html>Regular expression to filter table names.<br>"
operator|+
literal|"Default expression<b>.*</b> includes all tables.</html>"
argument_list|)
expr_stmt|;
name|procNamePatternField
operator|=
operator|new
name|JTextField
argument_list|()
expr_stmt|;
name|procNamePatternField
operator|.
name|setToolTipText
argument_list|(
literal|"<html>Regular expression to filter stored procedures names.<br>"
operator|+
literal|"Default expression<b>.*</b> includes all stored procedures.</html>"
argument_list|)
expr_stmt|;
name|meaningfulPk
operator|=
operator|new
name|JTextField
argument_list|()
expr_stmt|;
name|meaningfulPk
operator|.
name|setToolTipText
argument_list|(
literal|"<html>Regular expression to filter tables with meaningful primary keys.<br>"
operator|+
literal|"Multiple expressions divided by comma can be used.<br>"
operator|+
literal|"Example:<b>^table1|^table2|^prefix.*|table_name</b></html>"
argument_list|)
expr_stmt|;
name|strategyCombo
operator|=
operator|new
name|JComboBox
argument_list|<>
argument_list|()
expr_stmt|;
name|strategyCombo
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Table Name Pattern:"
argument_list|,
name|tableNamePatternField
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Procedure Name Pattern:"
argument_list|,
name|procNamePatternField
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Naming Strategy:"
argument_list|,
name|strategyCombo
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Tables with Meaningful PK Pattern:"
argument_list|,
name|meaningfulPk
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initFromModel
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|catalogs
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|schemas
parameter_list|,
name|String
name|currentCatalog
parameter_list|,
name|String
name|currentSchema
parameter_list|)
block|{
name|super
operator|.
name|initFromModel
argument_list|(
name|catalogs
argument_list|,
name|schemas
argument_list|,
name|currentCatalog
argument_list|,
name|currentSchema
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableNamePatternField
operator|.
name|setText
argument_list|(
name|WILDCARD_PATTERN
argument_list|)
expr_stmt|;
name|this
operator|.
name|procNamePatternField
operator|.
name|setText
argument_list|(
name|WILDCARD_PATTERN
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|arr
init|=
name|NameGeneratorPreferences
operator|.
name|getInstance
argument_list|()
operator|.
name|getLastUsedStrategies
argument_list|()
decl_stmt|;
name|strategyCombo
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|<>
argument_list|(
name|arr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|getTableNamePattern
parameter_list|()
block|{
return|return
literal|""
operator|.
name|equals
argument_list|(
name|tableNamePatternField
operator|.
name|getText
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|tableNamePatternField
operator|.
name|getText
argument_list|()
return|;
block|}
name|String
name|getMeaningfulPk
parameter_list|()
block|{
return|return
literal|""
operator|.
name|equals
argument_list|(
name|meaningfulPk
operator|.
name|getText
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|meaningfulPk
operator|.
name|getText
argument_list|()
return|;
block|}
name|String
name|getProcedureNamePattern
parameter_list|()
block|{
return|return
literal|""
operator|.
name|equals
argument_list|(
name|procNamePatternField
operator|.
name|getText
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|procNamePatternField
operator|.
name|getText
argument_list|()
return|;
block|}
name|String
name|getNamingStrategy
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|strategyCombo
operator|.
name|getSelectedItem
argument_list|()
return|;
block|}
block|}
end_class

end_unit

