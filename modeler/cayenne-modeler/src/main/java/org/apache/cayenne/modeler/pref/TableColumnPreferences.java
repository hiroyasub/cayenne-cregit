begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TableColumnModelEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TableColumnModelListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumnModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
operator|.
name|CayennePreference
import|;
end_import

begin_class
specifier|public
class|class
name|TableColumnPreferences
extends|extends
name|CayennePreference
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SORT_COLUMN_KEY
init|=
literal|"sort_column"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SORT_ORDER_KEY
init|=
literal|"sort_order"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WIDTH_KEY
init|=
literal|"width_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_COLUMN_PREF_KEY
init|=
literal|"table_column"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ORDER_KEY
init|=
literal|"order_"
decl_stmt|;
specifier|private
name|JTable
name|table
decl_stmt|;
specifier|private
name|int
name|columnCount
decl_stmt|;
specifier|private
name|int
name|defaultSortColumn
decl_stmt|;
specifier|private
name|boolean
name|defaultSortOrder
decl_stmt|;
specifier|private
name|int
index|[]
name|currentWidth
decl_stmt|;
specifier|private
name|TableColumnModelListener
name|listener
init|=
operator|new
name|TableColumnModelListener
argument_list|()
block|{
specifier|public
name|void
name|columnAdded
parameter_list|(
name|TableColumnModelEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|columnMarginChanged
parameter_list|(
name|ChangeEvent
name|e
parameter_list|)
block|{
name|TableColumn
name|column
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
name|column
operator|=
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|setWidth
argument_list|(
name|column
operator|.
name|getModelIndex
argument_list|()
argument_list|,
name|column
operator|.
name|getPreferredWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|columnMoved
parameter_list|(
name|TableColumnModelEvent
name|e
parameter_list|)
block|{
name|TableColumn
name|column
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
name|column
operator|=
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|setOrderIndex
argument_list|(
name|column
operator|.
name|getModelIndex
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|updateSort
argument_list|(
name|defaultSortColumn
argument_list|,
name|defaultSortOrder
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|columnRemoved
parameter_list|(
name|TableColumnModelEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|columnSelectionChanged
parameter_list|(
name|ListSelectionEvent
name|e
parameter_list|)
block|{
block|}
block|}
decl_stmt|;
specifier|public
name|TableColumnPreferences
parameter_list|(
name|Class
name|className
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|setCurrentNodeForPreference
argument_list|(
name|className
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Preferences
name|getPreference
parameter_list|()
block|{
if|if
condition|(
name|getCurrentPreference
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setCurrentNodeForPreference
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|TABLE_COLUMN_PREF_KEY
argument_list|)
expr_stmt|;
block|}
return|return
name|getCurrentPreference
argument_list|()
return|;
block|}
comment|/**      * Binds this preference object to synchronize its state with a given table component,      * allowing to specify an initial offset compared to the stored position. Allow to specify      * initial sorting.      */
specifier|public
name|void
name|bind
parameter_list|(
specifier|final
name|JTable
name|table
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|minSizes
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|maxSizes
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|defaultSizes
parameter_list|,
name|int
name|defaultSortColumn
parameter_list|,
name|boolean
name|defaultSortOrder
parameter_list|)
block|{
name|bind
argument_list|(
name|table
argument_list|,
name|minSizes
argument_list|,
name|maxSizes
argument_list|,
name|defaultSizes
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CayenneTable
operator|)
name|table
operator|)
operator|.
name|setSortPreferenceSaver
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultSortColumn
operator|=
name|defaultSortColumn
expr_stmt|;
name|this
operator|.
name|defaultSortOrder
operator|=
name|defaultSortOrder
expr_stmt|;
name|updateSort
argument_list|(
name|defaultSortColumn
argument_list|,
name|defaultSortOrder
argument_list|)
expr_stmt|;
block|}
comment|/**      * Binds this preference object to synchronize its state with a given table component,      * allowing to specify an initial offset compared to the stored position.      */
specifier|public
name|void
name|bind
parameter_list|(
specifier|final
name|JTable
name|table
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|minSizes
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|maxSizes
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|defaultSizes
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|columnCount
operator|=
name|table
operator|.
name|getColumnCount
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentWidth
operator|=
operator|new
name|int
index|[
name|columnCount
index|]
expr_stmt|;
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|removeColumnModelListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|updateTable
argument_list|(
name|minSizes
argument_list|,
name|maxSizes
argument_list|,
name|defaultSizes
argument_list|)
expr_stmt|;
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|addColumnModelListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateTable
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|minSizes
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|maxSizes
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|defaultSizes
parameter_list|)
block|{
name|updateWidths
argument_list|(
name|minSizes
argument_list|,
name|maxSizes
argument_list|,
name|defaultSizes
argument_list|)
expr_stmt|;
name|updateOrder
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateWidths
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|minSizes
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|maxSizes
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|defaultSizes
parameter_list|)
block|{
name|TableColumn
name|column
decl_stmt|;
name|TableColumnModel
name|columnModel
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
name|column
operator|=
name|columnModel
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|modelIndex
init|=
name|column
operator|.
name|getModelIndex
argument_list|()
decl_stmt|;
name|int
name|defaultWidth
decl_stmt|;
if|if
condition|(
name|minSizes
operator|!=
literal|null
operator|&&
name|minSizes
operator|.
name|containsKey
argument_list|(
name|modelIndex
argument_list|)
condition|)
block|{
name|column
operator|.
name|setMinWidth
argument_list|(
name|minSizes
operator|.
name|get
argument_list|(
name|modelIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxSizes
operator|!=
literal|null
operator|&&
name|maxSizes
operator|.
name|containsKey
argument_list|(
name|modelIndex
argument_list|)
condition|)
block|{
name|column
operator|.
name|setMaxWidth
argument_list|(
name|maxSizes
operator|.
name|get
argument_list|(
name|modelIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultSizes
operator|!=
literal|null
operator|&&
name|defaultSizes
operator|.
name|containsKey
argument_list|(
name|modelIndex
argument_list|)
condition|)
block|{
name|defaultWidth
operator|=
name|defaultSizes
operator|.
name|get
argument_list|(
name|modelIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|defaultWidth
operator|=
name|column
operator|.
name|getPreferredWidth
argument_list|()
expr_stmt|;
block|}
name|int
name|width
init|=
name|getWidth
argument_list|(
name|modelIndex
argument_list|,
name|defaultWidth
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|getPreferredWidth
argument_list|()
operator|!=
name|width
condition|)
block|{
name|column
operator|.
name|setPreferredWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateOrder
parameter_list|()
block|{
name|TableColumn
name|column
decl_stmt|;
name|TableColumnModel
name|columnModel
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|TableModel
name|model
init|=
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|String
name|columnName
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
name|columnName
operator|=
name|model
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|column
operator|=
name|table
operator|.
name|getColumn
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
name|int
name|modelIndex
init|=
name|column
operator|.
name|getModelIndex
argument_list|()
decl_stmt|;
name|int
name|orderIndex
init|=
name|getOrderIndex
argument_list|(
name|modelIndex
argument_list|,
name|modelIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|orderIndex
condition|)
block|{
name|table
operator|.
name|moveColumn
argument_list|(
name|columnModel
operator|.
name|getColumnIndex
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|orderIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateSort
parameter_list|(
name|int
name|defaultSortColumn
parameter_list|,
name|boolean
name|defaultSortOrder
parameter_list|)
block|{
operator|(
operator|(
name|CayenneTable
operator|)
name|table
operator|)
operator|.
name|sort
argument_list|(
name|getSortColumn
argument_list|(
name|defaultSortColumn
argument_list|)
argument_list|,
name|getSortOrder
argument_list|(
name|defaultSortOrder
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getWidth
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|defaultWidth
parameter_list|)
block|{
if|if
condition|(
name|currentWidth
index|[
name|index
index|]
operator|==
literal|0
condition|)
block|{
name|currentWidth
index|[
name|index
index|]
operator|=
name|getPreference
argument_list|()
operator|.
name|getInt
argument_list|(
name|WIDTH_KEY
operator|+
name|index
argument_list|,
name|defaultWidth
argument_list|)
expr_stmt|;
block|}
return|return
name|currentWidth
index|[
name|index
index|]
return|;
block|}
specifier|private
name|void
name|setWidth
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|width
parameter_list|)
block|{
if|if
condition|(
name|currentWidth
index|[
name|index
index|]
operator|!=
name|width
condition|)
block|{
name|getPreference
argument_list|()
operator|.
name|putInt
argument_list|(
name|WIDTH_KEY
operator|+
name|index
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|currentWidth
index|[
name|index
index|]
operator|=
name|width
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getOrderIndex
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|int
name|defaultOrderIndex
parameter_list|)
block|{
return|return
name|getPreference
argument_list|()
operator|.
name|getInt
argument_list|(
name|ORDER_KEY
operator|+
name|columnIndex
argument_list|,
name|defaultOrderIndex
argument_list|)
return|;
block|}
specifier|private
name|void
name|setOrderIndex
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|int
name|defaultOrderIndex
parameter_list|)
block|{
name|getPreference
argument_list|()
operator|.
name|putInt
argument_list|(
name|ORDER_KEY
operator|+
name|columnIndex
argument_list|,
name|defaultOrderIndex
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|getSortOrder
parameter_list|(
name|boolean
name|defaultSortOrder
parameter_list|)
block|{
return|return
name|getPreference
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|SORT_ORDER_KEY
argument_list|,
name|defaultSortOrder
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSortOrder
parameter_list|(
name|boolean
name|isAscent
parameter_list|)
block|{
name|getPreference
argument_list|()
operator|.
name|putBoolean
argument_list|(
name|SORT_ORDER_KEY
argument_list|,
name|isAscent
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getSortColumn
parameter_list|(
name|int
name|defaultSortColumn
parameter_list|)
block|{
return|return
name|getPreference
argument_list|()
operator|.
name|getInt
argument_list|(
name|SORT_COLUMN_KEY
argument_list|,
name|defaultSortColumn
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSortColumn
parameter_list|(
name|int
name|sortCol
parameter_list|)
block|{
name|getPreference
argument_list|()
operator|.
name|putInt
argument_list|(
name|SORT_COLUMN_KEY
argument_list|,
name|sortCol
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

