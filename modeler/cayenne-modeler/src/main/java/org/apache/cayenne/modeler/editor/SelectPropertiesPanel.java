begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultListCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|QueryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneWidgetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|TextAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A panel that supports editing the properties of a GenericSelectQuery.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SelectPropertiesPanel
extends|extends
name|JPanel
block|{
specifier|private
specifier|static
name|Log
name|logObj
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SelectPropertiesPanel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Integer
name|ZERO
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NO_CACHE_LABEL
init|=
literal|"No Result Caching"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCAL_CACHE_LABEL
init|=
literal|"DataContext Cache"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SHARED_CACHE_LABEL
init|=
literal|"Shared Cache"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|CACHE_POLICIES
init|=
operator|new
name|Object
index|[]
block|{
name|QueryMetadata
operator|.
name|NO_CACHE
block|,
name|QueryMetadata
operator|.
name|LOCAL_CACHE
block|,
name|QueryMetadata
operator|.
name|SHARED_CACHE
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
name|cachePolicyLabels
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
static|static
block|{
name|cachePolicyLabels
operator|.
name|put
argument_list|(
name|QueryMetadata
operator|.
name|NO_CACHE
argument_list|,
name|NO_CACHE_LABEL
argument_list|)
expr_stmt|;
name|cachePolicyLabels
operator|.
name|put
argument_list|(
name|QueryMetadata
operator|.
name|LOCAL_CACHE
argument_list|,
name|LOCAL_CACHE_LABEL
argument_list|)
expr_stmt|;
name|cachePolicyLabels
operator|.
name|put
argument_list|(
name|QueryMetadata
operator|.
name|SHARED_CACHE
argument_list|,
name|SHARED_CACHE_LABEL
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|TextAdapter
name|fetchLimit
decl_stmt|;
specifier|protected
name|TextAdapter
name|pageSize
decl_stmt|;
specifier|protected
name|JComboBox
name|cachePolicy
decl_stmt|;
specifier|protected
name|JCheckBox
name|refreshesResults
decl_stmt|;
specifier|protected
name|ProjectController
name|mediator
decl_stmt|;
specifier|public
name|SelectPropertiesPanel
parameter_list|(
name|ProjectController
name|mediator
parameter_list|)
block|{
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|initView
argument_list|()
expr_stmt|;
name|initController
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initView
parameter_list|()
block|{
name|fetchLimit
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|(
literal|7
argument_list|)
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|setFetchLimit
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|pageSize
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|(
literal|7
argument_list|)
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|setPageSize
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|cachePolicy
operator|=
name|CayenneWidgetFactory
operator|.
name|createComboBox
argument_list|()
expr_stmt|;
name|cachePolicy
operator|.
name|setRenderer
argument_list|(
operator|new
name|CachePolicyRenderer
argument_list|()
argument_list|)
expr_stmt|;
name|refreshesResults
operator|=
operator|new
name|JCheckBox
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initController
parameter_list|()
block|{
name|cachePolicy
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|Object
name|policy
init|=
name|cachePolicy
operator|.
name|getModel
argument_list|()
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
name|setQueryProperty
argument_list|(
literal|"cachePolicy"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|refreshesResults
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|Boolean
name|b
init|=
name|refreshesResults
operator|.
name|isSelected
argument_list|()
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
decl_stmt|;
name|setQueryProperty
argument_list|(
literal|"refreshingObjects"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Updates the view from the current model state. Invoked when a currently displayed      * query is changed.      */
specifier|public
name|void
name|initFromModel
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|EntityResolver
name|resolver
init|=
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|DefaultComboBoxModel
name|cacheModel
init|=
operator|new
name|DefaultComboBoxModel
argument_list|(
name|CACHE_POLICIES
argument_list|)
decl_stmt|;
name|cacheModel
operator|.
name|setSelectedItem
argument_list|(
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
operator|.
name|getCachePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|cachePolicy
operator|.
name|setModel
argument_list|(
name|cacheModel
argument_list|)
expr_stmt|;
name|fetchLimit
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
operator|.
name|getFetchLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pageSize
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
operator|.
name|getPageSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|refreshesResults
operator|.
name|setSelected
argument_list|(
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
operator|.
name|isRefreshingObjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|setFetchLimit
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|string
operator|=
operator|(
name|string
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|string
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|setQueryProperty
argument_list|(
literal|"fetchLimit"
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|setQueryProperty
argument_list|(
literal|"fetchLimit"
argument_list|,
operator|new
name|Integer
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Fetch limit must be an integer: "
operator|+
name|string
argument_list|)
throw|;
block|}
block|}
block|}
name|void
name|setPageSize
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|string
operator|=
operator|(
name|string
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|string
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|setQueryProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|setQueryProperty
argument_list|(
literal|"pageSize"
argument_list|,
operator|new
name|Integer
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Page size must be an integer: "
operator|+
name|string
argument_list|)
throw|;
block|}
block|}
block|}
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|mediator
operator|.
name|getCurrentQuery
argument_list|()
return|;
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|super
operator|.
name|setEnabled
argument_list|(
name|flag
argument_list|)
expr_stmt|;
comment|// propagate to children
name|Container
name|mainPanel
init|=
operator|(
name|Container
operator|)
name|getComponent
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Component
index|[]
name|children
init|=
name|mainPanel
operator|.
name|getComponents
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|children
index|[
name|i
index|]
operator|.
name|setEnabled
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|setQueryProperty
parameter_list|(
name|String
name|property
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Query
name|query
init|=
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|PropertyUtils
operator|.
name|setProperty
argument_list|(
name|query
argument_list|,
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireQueryEvent
argument_list|(
operator|new
name|QueryEvent
argument_list|(
name|this
argument_list|,
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logObj
operator|.
name|warn
argument_list|(
literal|"Error setting property: "
operator|+
name|property
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
class|class
name|CachePolicyRenderer
extends|extends
name|DefaultListCellRenderer
block|{
specifier|public
name|Component
name|getListCellRendererComponent
parameter_list|(
name|JList
name|list
parameter_list|,
name|Object
name|object
parameter_list|,
name|int
name|arg2
parameter_list|,
name|boolean
name|arg3
parameter_list|,
name|boolean
name|arg4
parameter_list|)
block|{
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
name|object
operator|=
name|cachePolicyLabels
operator|.
name|get
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|object
operator|=
name|NO_CACHE_LABEL
expr_stmt|;
block|}
return|return
name|super
operator|.
name|getListCellRendererComponent
argument_list|(
name|list
argument_list|,
name|object
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

