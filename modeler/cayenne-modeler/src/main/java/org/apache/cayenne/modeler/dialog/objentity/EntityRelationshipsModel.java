begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|objentity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|core
operator|.
name|ModelChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|core
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|model
operator|.
name|basic
operator|.
name|BasicModel
import|;
end_import

begin_comment
comment|/**  * A model representing an Entity with a set of Relationships, with zero or one selected  * Relationship.  *   * @since 1.1  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|EntityRelationshipsModel
extends|extends
name|BasicModel
block|{
specifier|static
specifier|final
name|Pattern
name|NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\s\\[.*\\]$"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Selector
name|RELATIONSHIP_DISPLAY_NAME_SELECTOR
init|=
name|Selector
operator|.
name|fromString
argument_list|(
literal|"relationshipDisplayName"
argument_list|)
decl_stmt|;
specifier|protected
name|Entity
name|sourceEntity
decl_stmt|;
specifier|protected
name|String
name|relationshipDisplayName
decl_stmt|;
specifier|protected
name|String
name|defaultTargetName
decl_stmt|;
specifier|protected
name|Object
index|[]
name|relationshipNames
decl_stmt|;
specifier|static
name|String
name|nameFromDisplayName
parameter_list|(
name|String
name|displayName
parameter_list|)
block|{
if|if
condition|(
name|displayName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|displayName
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
return|;
block|}
specifier|static
name|String
name|displayName
parameter_list|(
name|Relationship
name|relationship
parameter_list|)
block|{
if|if
condition|(
name|relationship
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|displayName
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|,
name|relationship
operator|.
name|getSourceEntity
argument_list|()
argument_list|,
name|relationship
operator|.
name|getTargetEntity
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|String
name|displayName
parameter_list|(
name|String
name|name
parameter_list|,
name|Entity
name|source
parameter_list|,
name|Entity
name|target
parameter_list|)
block|{
return|return
name|name
operator|+
literal|" ["
operator|+
name|source
operator|.
name|getName
argument_list|()
operator|+
literal|" -> "
operator|+
name|target
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
return|;
block|}
comment|/**      * Creates EntityRelationshipsModel with two unconnected Entities.      */
specifier|public
name|EntityRelationshipsModel
parameter_list|(
name|Entity
name|sourceEntity
parameter_list|,
name|Entity
name|targetEntity
parameter_list|)
block|{
name|this
operator|.
name|sourceEntity
operator|=
name|sourceEntity
expr_stmt|;
name|this
operator|.
name|defaultTargetName
operator|=
name|targetEntity
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|relationshipDisplayName
operator|=
literal|""
expr_stmt|;
block|}
comment|/**      * Creates EntityRelationshipsModel over the relationship connecting two Entities.      */
specifier|public
name|EntityRelationshipsModel
parameter_list|(
name|Relationship
name|relationship
parameter_list|)
block|{
name|this
operator|.
name|sourceEntity
operator|=
name|relationship
operator|.
name|getSourceEntity
argument_list|()
expr_stmt|;
name|this
operator|.
name|relationshipDisplayName
operator|=
name|displayName
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|Object
index|[]
name|getRelationshipNames
parameter_list|()
block|{
comment|// build an ordered list of available relationship names
comment|// on demand
if|if
condition|(
name|relationshipNames
operator|==
literal|null
condition|)
block|{
name|Collection
name|relationships
init|=
name|getSourceEntity
argument_list|()
operator|.
name|getRelationships
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|relationships
operator|.
name|size
argument_list|()
decl_stmt|;
name|Object
index|[]
name|names
init|=
operator|new
name|Object
index|[
name|size
index|]
decl_stmt|;
name|Iterator
name|it
init|=
name|relationships
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|DbRelationship
name|next
init|=
operator|(
name|DbRelationship
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|names
index|[
name|i
index|]
operator|=
name|displayName
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|this
operator|.
name|relationshipNames
operator|=
name|names
expr_stmt|;
block|}
return|return
name|relationshipNames
return|;
block|}
comment|/**      * Returns a root entity of this model.      *       * @return      */
specifier|public
name|Entity
name|getSourceEntity
parameter_list|()
block|{
return|return
name|sourceEntity
return|;
block|}
comment|/**      * Returns a String describing currently selected relationship.      */
specifier|public
name|String
name|getRelationshipDisplayName
parameter_list|()
block|{
return|return
name|relationshipDisplayName
return|;
block|}
specifier|public
name|void
name|setRelationshipDisplayName
parameter_list|(
name|String
name|relationshipDisplayName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|relationshipDisplayName
argument_list|,
name|this
operator|.
name|relationshipDisplayName
argument_list|)
condition|)
block|{
name|this
operator|.
name|relationshipDisplayName
operator|=
name|relationshipDisplayName
expr_stmt|;
name|relationshipNames
operator|=
literal|null
expr_stmt|;
name|fireModelChange
argument_list|(
name|ModelChangeEvent
operator|.
name|VALUE_CHANGED
argument_list|,
name|RELATIONSHIP_DISPLAY_NAME_SELECTOR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setRelationshipName
parameter_list|(
name|String
name|relationshipName
parameter_list|)
block|{
name|setRelationshipDisplayName
argument_list|(
name|displayName
argument_list|(
name|sourceEntity
operator|.
name|getRelationship
argument_list|(
name|relationshipName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Relationship
name|getSelectedRelationship
parameter_list|()
block|{
return|return
name|sourceEntity
operator|.
name|getRelationship
argument_list|(
name|nameFromDisplayName
argument_list|(
name|relationshipDisplayName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSourceEntityName
parameter_list|()
block|{
return|return
name|sourceEntity
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getTargetEntityName
parameter_list|()
block|{
name|Relationship
name|selected
init|=
name|getSelectedRelationship
argument_list|()
decl_stmt|;
return|return
operator|(
name|selected
operator|!=
literal|null
operator|)
condition|?
name|selected
operator|.
name|getTargetEntityName
argument_list|()
else|:
name|defaultTargetName
return|;
block|}
block|}
end_class

end_unit

