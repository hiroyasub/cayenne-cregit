begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbimport
operator|.
name|domain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ReverseEngineering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ReverseEngineeringAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|GeneratorsTabController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|DbImportTabController
extends|extends
name|GeneratorsTabController
block|{
specifier|public
name|DbImportTabController
parameter_list|(
name|ProjectController
name|projectController
parameter_list|)
block|{
name|super
argument_list|(
name|ReverseEngineering
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|projectController
operator|=
name|projectController
expr_stmt|;
name|this
operator|.
name|view
operator|=
operator|new
name|DbImportTab
argument_list|(
name|projectController
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|runGenerators
parameter_list|(
name|Set
argument_list|<
name|DataMap
argument_list|>
name|dataMaps
parameter_list|)
block|{
if|if
condition|(
name|dataMaps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|view
operator|.
name|showEmptyMessage
argument_list|()
expr_stmt|;
return|return;
block|}
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getDbImportController
argument_list|()
operator|.
name|setGlobalImport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ReverseEngineeringAction
name|reverseEngineeringAction
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|ReverseEngineeringAction
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|DataMap
name|dataMap
range|:
name|dataMaps
control|)
block|{
name|projectController
operator|.
name|setCurrentDataMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|reverseEngineeringAction
operator|.
name|performAction
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|showConfig
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
if|if
condition|(
name|dataMap
operator|!=
literal|null
condition|)
block|{
name|projectController
operator|.
name|fireDataMapDisplayEvent
argument_list|(
operator|new
name|DataMapDisplayEvent
argument_list|(
name|this
operator|.
name|getView
argument_list|()
argument_list|,
name|dataMap
argument_list|,
name|dataMap
operator|.
name|getDataChannelDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

