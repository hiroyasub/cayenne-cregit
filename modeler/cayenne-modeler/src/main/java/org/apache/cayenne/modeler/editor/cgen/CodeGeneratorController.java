begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|cgen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
operator|.
name|CgenConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
operator|.
name|ClassGenerationAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
operator|.
name|ClientClassGenerationAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|ErrorDebugDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|BindingBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * A controller for the class generator dialog.  */
end_comment

begin_class
specifier|public
class|class
name|CodeGeneratorController
extends|extends
name|CodeGeneratorControllerBase
block|{
comment|/**      * Logger to print stack traces      */
specifier|private
specifier|static
name|Logger
name|logObj
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ErrorDebugDialog
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|CodeGeneratorPane
name|view
decl_stmt|;
specifier|protected
name|ClassesTabController
name|classesSelector
decl_stmt|;
specifier|protected
name|GeneratorTabController
name|generatorSelector
decl_stmt|;
specifier|private
name|ConcurrentMap
argument_list|<
name|DataMap
argument_list|,
name|GeneratorController
argument_list|>
name|prevGeneratorController
decl_stmt|;
specifier|public
name|CodeGeneratorController
parameter_list|(
name|CayenneController
name|parent
parameter_list|,
name|ProjectController
name|projectController
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|projectController
argument_list|)
expr_stmt|;
name|this
operator|.
name|classesSelector
operator|=
operator|new
name|ClassesTabController
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|generatorSelector
operator|=
operator|new
name|GeneratorTabController
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|view
operator|=
operator|new
name|CodeGeneratorPane
argument_list|(
name|generatorSelector
operator|.
name|getView
argument_list|()
argument_list|,
name|classesSelector
operator|.
name|getView
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|prevGeneratorController
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|initBindings
argument_list|()
expr_stmt|;
name|initListeners
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|startup
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|super
operator|.
name|startup
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|classesSelectedAction
argument_list|()
expr_stmt|;
name|GeneratorController
name|modeController
init|=
name|prevGeneratorController
operator|.
name|get
argument_list|(
name|dataMap
argument_list|)
operator|!=
literal|null
condition|?
name|prevGeneratorController
operator|.
name|get
argument_list|(
name|dataMap
argument_list|)
else|:
name|generatorSelector
operator|.
name|getStandartController
argument_list|()
decl_stmt|;
name|CgenConfiguration
name|cgenConfiguration
init|=
name|modeController
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|cgenConfiguration
operator|.
name|isClient
argument_list|()
condition|)
block|{
name|modeController
operator|=
name|generatorSelector
operator|.
name|getClientGeneratorController
argument_list|()
expr_stmt|;
block|}
name|classesSelector
operator|.
name|startup
argument_list|()
expr_stmt|;
name|prevGeneratorController
operator|.
name|put
argument_list|(
name|dataMap
argument_list|,
name|modeController
argument_list|)
expr_stmt|;
name|generatorSelector
operator|.
name|setSelectedController
argument_list|(
name|modeController
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initListeners
parameter_list|()
block|{
name|projectController
operator|.
name|addObjEntityDisplayListener
argument_list|(
name|e
lambda|->
name|super
operator|.
name|addToSelectedEntities
argument_list|(
name|e
operator|.
name|getEntity
argument_list|()
operator|.
name|getDataMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|e
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|projectController
operator|.
name|addEmbeddableDisplayListener
argument_list|(
name|e
lambda|->
name|super
operator|.
name|addToSelectedEmbeddables
argument_list|(
name|e
operator|.
name|getEmbeddable
argument_list|()
operator|.
name|getDataMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|e
operator|.
name|getEmbeddable
argument_list|()
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
specifier|protected
name|void
name|initBindings
parameter_list|()
block|{
name|BindingBuilder
name|builder
init|=
operator|new
name|BindingBuilder
argument_list|(
name|getApplication
argument_list|()
operator|.
name|getBindingFactory
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
operator|(
operator|(
name|GeneratorTabPanel
operator|)
name|generatorSelector
operator|.
name|getView
argument_list|()
operator|)
operator|.
name|getGenerateButton
argument_list|()
argument_list|,
literal|"generateAction()"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|this
argument_list|,
literal|"classesSelectedAction()"
argument_list|,
name|SELECTED_PROPERTY
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|generatorSelector
argument_list|,
literal|"generatorSelectedAction()"
argument_list|,
name|GeneratorTabController
operator|.
name|GENERATOR_PROPERTY
argument_list|)
expr_stmt|;
name|generatorSelectedAction
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|generatorSelectedAction
parameter_list|()
block|{
name|GeneratorController
name|controller
init|=
name|generatorSelector
operator|.
name|getGeneratorController
argument_list|()
decl_stmt|;
name|validate
argument_list|(
name|controller
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|Object
argument_list|>
name|predicate
init|=
name|controller
operator|!=
literal|null
condition|?
name|controller
operator|.
name|getDefaultClassFilter
argument_list|()
else|:
name|o
lambda|->
literal|false
decl_stmt|;
name|updateSelection
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
name|classesSelector
operator|.
name|classSelectedAction
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|classesSelectedAction
parameter_list|()
block|{
name|int
name|size
init|=
name|getSelectedEntitiesSize
argument_list|()
decl_stmt|;
name|String
name|label
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|label
operator|=
literal|"No entities selected"
expr_stmt|;
block|}
if|else if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|label
operator|=
literal|"One entity selected"
expr_stmt|;
block|}
else|else
block|{
name|label
operator|=
name|size
operator|+
literal|" entities selected"
expr_stmt|;
block|}
name|label
operator|=
name|label
operator|.
name|concat
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|int
name|sizeEmb
init|=
name|getSelectedEmbeddablesSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|sizeEmb
operator|==
literal|0
condition|)
block|{
name|label
operator|=
name|label
operator|+
literal|"No embeddables selected"
expr_stmt|;
block|}
if|else if
condition|(
name|sizeEmb
operator|==
literal|1
condition|)
block|{
name|label
operator|=
name|label
operator|+
literal|"One embeddable selected"
expr_stmt|;
block|}
else|else
block|{
name|label
operator|=
name|label
operator|+
name|sizeEmb
operator|+
literal|" embeddables selected"
expr_stmt|;
block|}
name|label
operator|=
name|label
operator|.
name|concat
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDataMapSelected
argument_list|()
condition|)
block|{
name|label
operator|=
name|label
operator|+
literal|"DataMap selected"
expr_stmt|;
block|}
else|else
block|{
name|label
operator|=
name|label
operator|+
literal|"No dataMap selected"
expr_stmt|;
block|}
operator|(
operator|(
name|GeneratorTabPanel
operator|)
name|generatorSelector
operator|.
name|getView
argument_list|()
operator|)
operator|.
name|getClassesCount
argument_list|()
operator|.
name|setText
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|projectController
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|generateAction
parameter_list|()
block|{
name|CgenConfiguration
name|cgenConfiguration
init|=
name|generatorSelector
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ClassGenerationAction
name|generator
init|=
name|cgenConfiguration
operator|.
name|isClient
argument_list|()
condition|?
operator|new
name|ClientClassGenerationAction
argument_list|(
name|cgenConfiguration
argument_list|)
else|:
operator|new
name|ClassGenerationAction
argument_list|(
name|cgenConfiguration
argument_list|)
decl_stmt|;
try|try
block|{
name|generator
operator|.
name|prepareArtifacts
argument_list|()
expr_stmt|;
name|generator
operator|.
name|execute
argument_list|()
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
operator|.
name|getView
argument_list|()
argument_list|,
literal|"Class generation finished"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logObj
operator|.
name|error
argument_list|(
literal|"Error generating classes"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
operator|.
name|getView
argument_list|()
argument_list|,
literal|"Error generating classes - "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ConcurrentMap
argument_list|<
name|DataMap
argument_list|,
name|GeneratorController
argument_list|>
name|getPrevGeneratorController
parameter_list|()
block|{
return|return
name|prevGeneratorController
return|;
block|}
block|}
end_class

end_unit

