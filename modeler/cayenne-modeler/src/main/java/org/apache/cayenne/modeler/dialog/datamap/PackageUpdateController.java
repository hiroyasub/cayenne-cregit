begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|datamap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|WindowConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EmbeddedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|AttributeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EmbeddableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|PackageUpdateController
extends|extends
name|DefaultsPreferencesController
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ALL_CONTROL
init|=
literal|"Set/update package for all ObjEntities and Embeddables (create default class names if missing)"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UNINIT_CONTROL
init|=
literal|"Do not override class names with packages"
decl_stmt|;
specifier|protected
name|boolean
name|clientUpdate
decl_stmt|;
specifier|protected
name|DefaultsPreferencesView
name|view
decl_stmt|;
specifier|public
name|PackageUpdateController
parameter_list|(
name|ProjectController
name|mediator
parameter_list|,
name|DataMap
name|dataMap
parameter_list|,
name|boolean
name|clientUpdate
parameter_list|)
block|{
name|super
argument_list|(
name|mediator
argument_list|,
name|dataMap
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientUpdate
operator|=
name|clientUpdate
expr_stmt|;
block|}
comment|/**      * Creates and runs the package update dialog.      */
specifier|public
name|void
name|startupAction
parameter_list|()
block|{
name|view
operator|=
operator|new
name|DefaultsPreferencesView
argument_list|(
name|ALL_CONTROL
argument_list|,
name|UNINIT_CONTROL
argument_list|)
expr_stmt|;
name|view
operator|.
name|setTitle
argument_list|(
literal|"Update ObjEntities and Embeddables Java Package"
argument_list|)
expr_stmt|;
name|initController
argument_list|()
expr_stmt|;
name|view
operator|.
name|pack
argument_list|()
expr_stmt|;
name|view
operator|.
name|setDefaultCloseOperation
argument_list|(
name|WindowConstants
operator|.
name|DISPOSE_ON_CLOSE
argument_list|)
expr_stmt|;
name|view
operator|.
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|makeCloseableOnEscape
argument_list|()
expr_stmt|;
name|centerView
argument_list|()
expr_stmt|;
name|view
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|this
operator|.
name|view
return|;
block|}
specifier|private
name|void
name|initController
parameter_list|()
block|{
name|view
operator|.
name|getCancelButton
argument_list|()
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|arg0
parameter_list|)
block|{
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|view
operator|.
name|getUpdateButton
argument_list|()
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|arg0
parameter_list|)
block|{
name|updatePackage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|updatePackage
parameter_list|()
block|{
name|boolean
name|doAll
init|=
name|isAllEntities
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oldNameEmbeddableToNewName
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Create local copy to escape ConcurrentModificationException
name|Collection
argument_list|<
name|Embeddable
argument_list|>
name|embeddables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|dataMap
operator|.
name|getEmbeddables
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Embeddable
name|embeddable
range|:
name|embeddables
control|)
block|{
name|String
name|oldName
init|=
name|embeddable
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[.]"
argument_list|)
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|p
operator|.
name|split
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|tokens
index|[
name|tokens
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|doAll
operator|||
name|Util
operator|.
name|isEmptyString
argument_list|(
name|oldName
argument_list|)
operator|||
name|oldName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
block|{
name|EmbeddableEvent
name|e
init|=
operator|new
name|EmbeddableEvent
argument_list|(
name|this
argument_list|,
name|embeddable
argument_list|,
name|embeddable
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|newClassName
init|=
name|getNameWithDefaultPackage
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|oldNameEmbeddableToNewName
operator|.
name|put
argument_list|(
name|oldName
argument_list|,
name|newClassName
argument_list|)
expr_stmt|;
name|embeddable
operator|.
name|setClassName
argument_list|(
name|newClassName
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireEmbeddableEvent
argument_list|(
name|e
argument_list|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ObjEntity
name|entity
range|:
name|dataMap
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
name|String
name|oldName
init|=
name|getClassName
argument_list|(
name|entity
argument_list|)
decl_stmt|;
if|if
condition|(
name|doAll
operator|||
name|Util
operator|.
name|isEmptyString
argument_list|(
name|oldName
argument_list|)
operator|||
name|oldName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
block|{
name|String
name|className
init|=
name|extractClassName
argument_list|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|oldName
argument_list|)
condition|?
name|entity
operator|.
name|getName
argument_list|()
else|:
name|oldName
argument_list|)
decl_stmt|;
name|setClassName
argument_list|(
name|entity
argument_list|,
name|getNameWithDefaultPackage
argument_list|(
name|className
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ObjAttribute
name|attribute
range|:
name|entity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|attribute
operator|instanceof
name|EmbeddedAttribute
condition|)
block|{
if|if
condition|(
name|oldNameEmbeddableToNewName
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|oldNameEmbeddableToNewName
operator|.
name|containsKey
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|attribute
operator|.
name|setType
argument_list|(
name|oldNameEmbeddableToNewName
operator|.
name|get
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AttributeEvent
name|ev
init|=
operator|new
name|AttributeEvent
argument_list|(
name|this
argument_list|,
name|attribute
argument_list|,
name|entity
argument_list|)
decl_stmt|;
name|mediator
operator|.
name|fireObjAttributeEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|extractClassName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|dot
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
return|return
operator|(
name|dot
operator|<
literal|0
operator|)
condition|?
name|name
else|:
operator|(
name|dot
operator|+
literal|1
operator|<
name|name
operator|.
name|length
argument_list|()
operator|)
condition|?
name|name
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
else|:
literal|""
return|;
block|}
specifier|protected
name|String
name|getNameWithDefaultPackage
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|clientUpdate
condition|)
block|{
return|return
name|dataMap
operator|.
name|getNameWithDefaultClientPackage
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|dataMap
operator|.
name|getNameWithDefaultPackage
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
specifier|protected
name|String
name|getClassName
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
return|return
name|clientUpdate
condition|?
name|entity
operator|.
name|getClientClassName
argument_list|()
else|:
name|entity
operator|.
name|getClassName
argument_list|()
return|;
block|}
specifier|protected
name|void
name|setClassName
parameter_list|(
name|ObjEntity
name|entity
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|newName
argument_list|,
name|getClassName
argument_list|(
name|entity
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|clientUpdate
condition|)
block|{
name|entity
operator|.
name|setClientClassName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|.
name|setClassName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
name|mediator
operator|.
name|fireObjEntityEvent
argument_list|(
operator|new
name|EntityEvent
argument_list|(
name|this
argument_list|,
name|entity
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

