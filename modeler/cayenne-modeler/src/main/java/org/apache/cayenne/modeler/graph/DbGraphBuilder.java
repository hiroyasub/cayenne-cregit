begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|model
operator|.
name|DetectedDbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|AttributeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbAttributeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbRelationshipListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|RelationshipEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgraph
operator|.
name|graph
operator|.
name|DefaultEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgraph
operator|.
name|graph
operator|.
name|DefaultGraphCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgraph
operator|.
name|graph
operator|.
name|GraphConstants
import|;
end_import

begin_comment
comment|/**  * Class for building ER-graph, based on DbEntity information  */
end_comment

begin_class
class|class
name|DbGraphBuilder
extends|extends
name|BaseGraphBuilder
argument_list|<
name|DbEntity
argument_list|,
name|DbAttribute
argument_list|,
name|DbRelationship
argument_list|>
implements|implements
name|DbEntityListener
implements|,
name|DbAttributeListener
implements|,
name|DbRelationshipListener
block|{
specifier|static
specifier|final
name|Color
name|ENTITY_COLOR
init|=
operator|new
name|Color
argument_list|(
literal|197
argument_list|,
literal|253
argument_list|,
literal|252
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|DbEntity
argument_list|>
name|getEntities
parameter_list|(
name|DataMap
name|map
parameter_list|)
block|{
return|return
name|map
operator|.
name|getDbEntities
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|postProcessEntity
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|DefaultGraphCell
name|cell
parameter_list|)
block|{
name|super
operator|.
name|postProcessEntity
argument_list|(
name|entity
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|GraphConstants
operator|.
name|setBackground
argument_list|(
name|cell
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|ENTITY_COLOR
argument_list|)
expr_stmt|;
name|GraphConstants
operator|.
name|setOpaque
argument_list|(
name|cell
operator|.
name|getAttributes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|DbEntityCellMetadata
name|getCellMetadata
parameter_list|(
name|DbEntity
name|e
parameter_list|)
block|{
return|return
operator|new
name|DbEntityCellMetadata
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|DefaultEdge
name|createRelationshipCell
parameter_list|(
name|DbRelationship
name|rel
parameter_list|)
block|{
name|DefaultEdge
name|edge
init|=
name|super
operator|.
name|createRelationshipCell
argument_list|(
name|rel
argument_list|)
decl_stmt|;
if|if
condition|(
name|edge
operator|!=
literal|null
condition|)
block|{
name|GraphConstants
operator|.
name|setDashPattern
argument_list|(
name|edge
operator|.
name|getAttributes
argument_list|()
argument_list|,
operator|new
name|float
index|[]
block|{
literal|10
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|edge
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProjectController
parameter_list|(
name|ProjectController
name|mediator
parameter_list|)
block|{
name|super
operator|.
name|setProjectController
argument_list|(
name|mediator
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDbEntityListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDbAttributeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDbRelationshipListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|super
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|mediator
operator|.
name|removeDbEntityListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|removeDbAttributeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|removeDbRelationshipListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbEntityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
comment|// skip new entities from DbLoader
if|if
condition|(
name|e
operator|.
name|getEntity
argument_list|()
operator|instanceof
name|DetectedDbEntity
condition|)
block|{
return|return;
block|}
name|insertEntityCell
argument_list|(
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbEntityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|remapEntity
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|updateEntityCell
argument_list|(
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbEntityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|removeEntityCell
argument_list|(
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbAttributeAdded
parameter_list|(
name|AttributeEvent
name|e
parameter_list|)
block|{
name|updateEntityCell
argument_list|(
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbAttributeChanged
parameter_list|(
name|AttributeEvent
name|e
parameter_list|)
block|{
name|updateEntityCell
argument_list|(
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbAttributeRemoved
parameter_list|(
name|AttributeEvent
name|e
parameter_list|)
block|{
name|updateEntityCell
argument_list|(
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbRelationshipAdded
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
comment|// nothing because relationship does not have target yet
block|}
specifier|public
name|void
name|dbRelationshipChanged
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
name|updateRelationshipCell
argument_list|(
operator|(
name|DbRelationship
operator|)
name|e
operator|.
name|getRelationship
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbRelationshipRemoved
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
name|remapRelationship
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|removeRelationshipCell
argument_list|(
operator|(
name|DbRelationship
operator|)
name|e
operator|.
name|getRelationship
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|GraphType
name|getType
parameter_list|()
block|{
return|return
name|GraphType
operator|.
name|ER
return|;
block|}
block|}
end_class

end_unit

