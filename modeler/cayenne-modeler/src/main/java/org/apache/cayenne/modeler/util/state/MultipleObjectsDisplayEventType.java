begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|MultipleObjectsDisplayEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
class|class
name|MultipleObjectsDisplayEventType
extends|extends
name|DisplayEventType
block|{
specifier|public
name|MultipleObjectsDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|super
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fireLastDisplayEvent
parameter_list|()
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|parentObjectName
init|=
name|preferences
operator|.
name|getParentObject
argument_list|()
decl_stmt|;
name|ConfigurationNode
name|parentObject
decl_stmt|;
name|ConfigurationNode
index|[]
name|multipleObjects
decl_stmt|;
if|if
condition|(
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|parentObjectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|DataMap
name|dataMap
init|=
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|parentObjectName
argument_list|)
decl_stmt|;
name|parentObject
operator|=
name|dataMap
expr_stmt|;
name|multipleObjects
operator|=
name|getLastMultipleObjects
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dataChannel
operator|.
name|getNodeDescriptor
argument_list|(
name|parentObjectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|DataNodeDescriptor
name|dataNode
init|=
name|dataChannel
operator|.
name|getNodeDescriptor
argument_list|(
name|parentObjectName
argument_list|)
decl_stmt|;
name|parentObject
operator|=
name|dataNode
expr_stmt|;
name|multipleObjects
operator|=
name|getLastMultipleObjects
argument_list|(
name|dataNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parentObject
operator|=
name|dataChannel
expr_stmt|;
name|multipleObjects
operator|=
name|getLastMultipleObjects
argument_list|(
name|dataChannel
argument_list|)
expr_stmt|;
block|}
name|MultipleObjectsDisplayEvent
name|multipleDisplayEvent
init|=
operator|new
name|MultipleObjectsDisplayEvent
argument_list|(
name|this
argument_list|,
name|multipleObjects
argument_list|,
name|parentObject
argument_list|)
decl_stmt|;
name|controller
operator|.
name|fireMultipleObjectsDisplayEvent
argument_list|(
name|multipleDisplayEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|saveLastDisplayEvent
parameter_list|()
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|MultipleObjectsDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setParentObject
argument_list|(
name|getObjectName
argument_list|(
name|controller
operator|.
name|getCurrentParentPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|multipleObjects
init|=
name|controller
operator|.
name|getCurrentPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|multipleObjects
operator|==
literal|null
condition|)
block|{
name|preferences
operator|.
name|setMultipleObjects
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|multipleObjects
control|)
block|{
name|String
name|objectName
init|=
name|getObjectName
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|objectName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|objectName
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|preferences
operator|.
name|setMultipleObjects
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|ConfigurationNode
index|[]
name|getLastMultipleObjects
parameter_list|(
name|DataChannelDescriptor
name|dataChannel
parameter_list|)
block|{
name|List
argument_list|<
name|ConfigurationNode
argument_list|>
name|configurationNodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|ConfigurationNode
argument_list|>
argument_list|()
decl_stmt|;
name|ConfigurationNode
index|[]
name|nodes
init|=
operator|new
name|ConfigurationNode
index|[
literal|0
index|]
decl_stmt|;
name|String
name|multipleObjects
init|=
name|preferences
operator|.
name|getMultipleObjects
argument_list|()
decl_stmt|;
if|if
condition|(
name|multipleObjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|configurationNodeList
operator|.
name|toArray
argument_list|(
name|nodes
argument_list|)
return|;
block|}
for|for
control|(
name|String
name|objectName
range|:
name|multipleObjects
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|ConfigurationNode
name|configNode
init|=
name|getConfigNode
argument_list|(
name|dataChannel
argument_list|,
name|objectName
argument_list|)
decl_stmt|;
if|if
condition|(
name|configNode
operator|!=
literal|null
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|configNode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|configurationNodeList
operator|.
name|toArray
argument_list|(
name|nodes
argument_list|)
return|;
block|}
specifier|protected
name|ConfigurationNode
index|[]
name|getLastMultipleObjects
parameter_list|(
name|DataNodeDescriptor
name|dataNode
parameter_list|)
block|{
name|List
argument_list|<
name|ConfigurationNode
argument_list|>
name|configurationNodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|ConfigurationNode
argument_list|>
argument_list|()
decl_stmt|;
name|ConfigurationNode
index|[]
name|nodes
init|=
operator|new
name|ConfigurationNode
index|[
literal|0
index|]
decl_stmt|;
name|String
name|multipleObjects
init|=
name|preferences
operator|.
name|getMultipleObjects
argument_list|()
decl_stmt|;
if|if
condition|(
name|multipleObjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|configurationNodeList
operator|.
name|toArray
argument_list|(
name|nodes
argument_list|)
return|;
block|}
for|for
control|(
name|String
name|objectName
range|:
name|multipleObjects
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|dataNode
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|contains
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataNode
operator|.
name|getDataChannelDescriptor
argument_list|()
operator|.
name|getDataMap
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|configurationNodeList
operator|.
name|toArray
argument_list|(
name|nodes
argument_list|)
return|;
block|}
specifier|protected
name|ConfigurationNode
index|[]
name|getLastMultipleObjects
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|List
argument_list|<
name|ConfigurationNode
argument_list|>
name|configurationNodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|ConfigurationNode
argument_list|>
argument_list|()
decl_stmt|;
name|ConfigurationNode
index|[]
name|nodes
init|=
operator|new
name|ConfigurationNode
index|[
literal|0
index|]
decl_stmt|;
name|String
name|multipleObjects
init|=
name|preferences
operator|.
name|getMultipleObjects
argument_list|()
decl_stmt|;
if|if
condition|(
name|multipleObjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|configurationNodeList
operator|.
name|toArray
argument_list|(
name|nodes
argument_list|)
return|;
block|}
for|for
control|(
name|String
name|objectName
range|:
name|multipleObjects
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|objectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dataMap
operator|.
name|getDbEntity
argument_list|(
name|objectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataMap
operator|.
name|getDbEntity
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dataMap
operator|.
name|getEmbeddable
argument_list|(
name|objectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataMap
operator|.
name|getEmbeddable
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dataMap
operator|.
name|getProcedure
argument_list|(
name|objectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataMap
operator|.
name|getProcedure
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dataMap
operator|.
name|getQuery
argument_list|(
name|objectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataMap
operator|.
name|getQuery
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|configurationNodeList
operator|.
name|toArray
argument_list|(
name|nodes
argument_list|)
return|;
block|}
specifier|private
name|ConfigurationNode
name|getConfigNode
parameter_list|(
name|DataChannelDescriptor
name|dataChannel
parameter_list|,
name|String
name|objectName
parameter_list|)
block|{
if|if
condition|(
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
return|return
name|dataChannel
return|;
block|}
for|for
control|(
name|DataNodeDescriptor
name|dataNode
range|:
name|dataChannel
operator|.
name|getNodeDescriptors
argument_list|()
control|)
block|{
if|if
condition|(
name|dataNode
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
return|return
name|dataNode
return|;
block|}
block|}
for|for
control|(
name|DataMap
name|dataMap
range|:
name|dataChannel
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
if|if
condition|(
name|dataMap
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
return|return
name|dataMap
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

