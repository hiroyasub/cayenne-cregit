begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Toolkit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CompoundEdit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|UndoableEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataMapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|QueryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EmbeddableAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ProcedureParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EmbeddableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|MapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|ConfirmRemoveDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
operator|.
name|RemoveCompoundUndoableEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
operator|.
name|RemoveUndoableEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|AbstractQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_comment
comment|/**  * Removes currently selected object from the project. This can be Domain, DataNode,  * Entity, Attribute or Relationship.  */
end_comment

begin_class
specifier|public
class|class
name|RemoveAction
extends|extends
name|CayenneAction
block|{
specifier|public
specifier|static
name|String
name|getActionName
parameter_list|()
block|{
return|return
literal|"Remove"
return|;
block|}
specifier|public
name|RemoveAction
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|getActionName
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|RemoveAction
parameter_list|(
name|String
name|actionName
parameter_list|,
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|actionName
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIconName
parameter_list|()
block|{
return|return
literal|"icon-trash.gif"
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyStroke
name|getAcceleratorKey
parameter_list|()
block|{
return|return
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_D
argument_list|,
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getMenuShortcutKeyMask
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates and returns dialog for delete prompt      *       * @param allowAsking If false, no question will be asked no matter what settings are      */
specifier|public
name|ConfirmRemoveDialog
name|getConfirmDeleteDialog
parameter_list|(
name|boolean
name|allowAsking
parameter_list|)
block|{
return|return
operator|new
name|ConfirmRemoveDialog
argument_list|(
name|allowAsking
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|performAction
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|performAction
argument_list|(
name|e
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs delete action      *       * @param allowAsking If false, no question will be asked no matter what settings are      */
specifier|public
name|void
name|performAction
parameter_list|(
name|ActionEvent
name|e
parameter_list|,
name|boolean
name|allowAsking
parameter_list|)
block|{
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
name|ConfirmRemoveDialog
name|dialog
init|=
name|getConfirmDeleteDialog
argument_list|(
name|allowAsking
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediator
operator|.
name|getCurrentObjEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dialog
operator|.
name|shouldDelete
argument_list|(
literal|"ObjEntity"
argument_list|,
name|mediator
operator|.
name|getCurrentObjEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|application
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|RemoveUndoableEdit
argument_list|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentObjEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|removeObjEntity
argument_list|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentObjEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dialog
operator|.
name|shouldDelete
argument_list|(
literal|"DbEntity"
argument_list|,
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|application
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|RemoveUndoableEdit
argument_list|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|removeDbEntity
argument_list|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|mediator
operator|.
name|getCurrentQuery
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dialog
operator|.
name|shouldDelete
argument_list|(
literal|"query"
argument_list|,
name|mediator
operator|.
name|getCurrentQuery
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|application
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|RemoveUndoableEdit
argument_list|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentQuery
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|removeQuery
argument_list|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|mediator
operator|.
name|getCurrentProcedure
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dialog
operator|.
name|shouldDelete
argument_list|(
literal|"procedure"
argument_list|,
name|mediator
operator|.
name|getCurrentProcedure
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|application
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|RemoveUndoableEdit
argument_list|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentProcedure
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|removeProcedure
argument_list|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentProcedure
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|mediator
operator|.
name|getCurrentEmbeddable
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dialog
operator|.
name|shouldDelete
argument_list|(
literal|"embeddable"
argument_list|,
name|mediator
operator|.
name|getCurrentEmbeddable
argument_list|()
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
name|application
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|RemoveUndoableEdit
argument_list|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentEmbeddable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|removeEmbeddable
argument_list|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentEmbeddable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dialog
operator|.
name|shouldDelete
argument_list|(
literal|"data map"
argument_list|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// In context of Data node just remove from Data Node
if|if
condition|(
name|mediator
operator|.
name|getCurrentDataNode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|application
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|RemoveUndoableEdit
argument_list|(
name|application
argument_list|,
name|mediator
operator|.
name|getCurrentDataNode
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|removeDataMapFromDataNode
argument_list|(
name|mediator
operator|.
name|getCurrentDataNode
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not under Data Node, remove completely
name|application
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|RemoveUndoableEdit
argument_list|(
name|application
argument_list|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|removeDataMap
argument_list|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|mediator
operator|.
name|getCurrentDataNode
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dialog
operator|.
name|shouldDelete
argument_list|(
literal|"data node"
argument_list|,
name|mediator
operator|.
name|getCurrentDataNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|application
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|RemoveUndoableEdit
argument_list|(
name|application
argument_list|,
name|mediator
operator|.
name|getCurrentDataNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|removeDataNode
argument_list|(
name|mediator
operator|.
name|getCurrentDataNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|mediator
operator|.
name|getCurrentPaths
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// multiple deletion
if|if
condition|(
name|dialog
operator|.
name|shouldDelete
argument_list|(
literal|"selected objects"
argument_list|)
condition|)
block|{
name|Object
index|[]
name|paths
init|=
name|mediator
operator|.
name|getCurrentPaths
argument_list|()
decl_stmt|;
name|CompoundEdit
name|compoundEdit
init|=
operator|new
name|RemoveCompoundUndoableEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|path
range|:
name|paths
control|)
block|{
name|compoundEdit
operator|.
name|addEdit
argument_list|(
name|removeLastPathComponent
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|application
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|compoundEdit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|removeDataMap
parameter_list|(
name|DataMap
name|map
parameter_list|)
block|{
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
name|DataChannelDescriptor
name|domain
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|DataMapEvent
name|e
init|=
operator|new
name|DataMapEvent
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|map
argument_list|,
name|MapEvent
operator|.
name|REMOVE
argument_list|)
decl_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
name|domain
operator|.
name|getDataMaps
argument_list|()
operator|.
name|remove
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|DataNodeDescriptor
argument_list|>
name|iterator
init|=
name|domain
operator|.
name|getNodeDescriptors
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataNodeDescriptor
name|node
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|contains
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|removeDataMapFromDataNode
argument_list|(
name|node
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
name|mediator
operator|.
name|fireDataMapEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeDataNode
parameter_list|(
name|DataNodeDescriptor
name|node
parameter_list|)
block|{
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
name|DataChannelDescriptor
name|domain
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|DataNodeEvent
name|e
init|=
operator|new
name|DataNodeEvent
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|node
argument_list|,
name|MapEvent
operator|.
name|REMOVE
argument_list|)
decl_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
name|domain
operator|.
name|getNodeDescriptors
argument_list|()
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireDataNodeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes current DbEntity from its DataMap and fires "remove" EntityEvent.      */
specifier|public
name|void
name|removeDbEntity
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|DbEntity
name|ent
parameter_list|)
block|{
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
name|EntityEvent
name|e
init|=
operator|new
name|EntityEvent
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|ent
argument_list|,
name|MapEvent
operator|.
name|REMOVE
argument_list|)
decl_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeDbEntity
argument_list|(
name|ent
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireDbEntityEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes current Query from its DataMap and fires "remove" QueryEvent.      */
specifier|public
name|void
name|removeQuery
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
name|QueryEvent
name|e
init|=
operator|new
name|QueryEvent
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|query
argument_list|,
name|MapEvent
operator|.
name|REMOVE
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeQuery
argument_list|(
name|query
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireQueryEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes current Procedure from its DataMap and fires "remove" ProcedureEvent.      */
specifier|public
name|void
name|removeProcedure
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|Procedure
name|procedure
parameter_list|)
block|{
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
name|ProcedureEvent
name|e
init|=
operator|new
name|ProcedureEvent
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|procedure
argument_list|,
name|MapEvent
operator|.
name|REMOVE
argument_list|)
decl_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeProcedure
argument_list|(
name|procedure
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireProcedureEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes current object entity from its DataMap.      */
specifier|public
name|void
name|removeObjEntity
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|ObjEntity
name|entity
parameter_list|)
block|{
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
name|EntityEvent
name|e
init|=
operator|new
name|EntityEvent
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|entity
argument_list|,
name|MapEvent
operator|.
name|REMOVE
argument_list|)
decl_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeObjEntity
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireObjEntityEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// remove queries that depend on entity
comment|// TODO: (Andrus, 09/09/2005) show warning dialog?
comment|// clone to be able to remove within iterator...
for|for
control|(
name|Query
name|query
range|:
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|(
name|map
operator|.
name|getQueries
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|AbstractQuery
condition|)
block|{
name|AbstractQuery
name|next
init|=
operator|(
name|AbstractQuery
operator|)
name|query
decl_stmt|;
name|Object
name|root
init|=
name|next
operator|.
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|==
name|entity
operator|||
operator|(
name|root
operator|instanceof
name|String
operator|&&
name|root
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|removeQuery
argument_list|(
name|map
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|removeEmbeddable
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|Embeddable
name|embeddable
parameter_list|)
block|{
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
name|EmbeddableEvent
name|e
init|=
operator|new
name|EmbeddableEvent
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|embeddable
argument_list|,
name|MapEvent
operator|.
name|REMOVE
argument_list|)
decl_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeEmbeddable
argument_list|(
name|embeddable
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireEmbeddableEvent
argument_list|(
name|e
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeDataMapFromDataNode
parameter_list|(
name|DataNodeDescriptor
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
name|DataNodeEvent
name|e
init|=
operator|new
name|DataNodeEvent
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|remove
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Force reloading of the data node in the browse view
name|mediator
operator|.
name|fireDataNodeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> if last object in the path contains a removable object.      */
annotation|@
name|Override
specifier|public
name|boolean
name|enableForPath
parameter_list|(
name|ConfigurationNode
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|DataChannelDescriptor
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|DataMap
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|DataNodeDescriptor
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Entity
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Attribute
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Relationship
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Procedure
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|ProcedureParameter
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Embeddable
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|EmbeddableAttribute
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Removes an object, depending on its type      */
specifier|private
name|UndoableEdit
name|removeLastPathComponent
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|UndoableEdit
name|undo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|DataMap
condition|)
block|{
name|undo
operator|=
operator|new
name|RemoveUndoableEdit
argument_list|(
name|application
argument_list|,
operator|(
name|DataMap
operator|)
name|object
argument_list|)
expr_stmt|;
name|removeDataMap
argument_list|(
operator|(
name|DataMap
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|DataNodeDescriptor
condition|)
block|{
name|undo
operator|=
operator|new
name|RemoveUndoableEdit
argument_list|(
name|application
argument_list|,
operator|(
name|DataNodeDescriptor
operator|)
name|object
argument_list|)
expr_stmt|;
name|removeDataNode
argument_list|(
operator|(
name|DataNodeDescriptor
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|DbEntity
condition|)
block|{
name|undo
operator|=
operator|new
name|RemoveUndoableEdit
argument_list|(
operator|(
operator|(
name|DbEntity
operator|)
name|object
operator|)
operator|.
name|getDataMap
argument_list|()
argument_list|,
operator|(
name|DbEntity
operator|)
name|object
argument_list|)
expr_stmt|;
name|removeDbEntity
argument_list|(
operator|(
operator|(
name|DbEntity
operator|)
name|object
operator|)
operator|.
name|getDataMap
argument_list|()
argument_list|,
operator|(
name|DbEntity
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|ObjEntity
condition|)
block|{
name|undo
operator|=
operator|new
name|RemoveUndoableEdit
argument_list|(
operator|(
operator|(
name|ObjEntity
operator|)
name|object
operator|)
operator|.
name|getDataMap
argument_list|()
argument_list|,
operator|(
name|ObjEntity
operator|)
name|object
argument_list|)
expr_stmt|;
name|removeObjEntity
argument_list|(
operator|(
operator|(
name|ObjEntity
operator|)
name|object
operator|)
operator|.
name|getDataMap
argument_list|()
argument_list|,
operator|(
name|ObjEntity
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Query
condition|)
block|{
name|undo
operator|=
operator|new
name|RemoveUndoableEdit
argument_list|(
operator|(
operator|(
name|Query
operator|)
name|object
operator|)
operator|.
name|getDataMap
argument_list|()
argument_list|,
operator|(
name|Query
operator|)
name|object
argument_list|)
expr_stmt|;
name|removeQuery
argument_list|(
operator|(
operator|(
name|Query
operator|)
name|object
operator|)
operator|.
name|getDataMap
argument_list|()
argument_list|,
operator|(
name|Query
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Procedure
condition|)
block|{
name|undo
operator|=
operator|new
name|RemoveUndoableEdit
argument_list|(
operator|(
operator|(
name|Procedure
operator|)
name|object
operator|)
operator|.
name|getDataMap
argument_list|()
argument_list|,
operator|(
name|Procedure
operator|)
name|object
argument_list|)
expr_stmt|;
name|removeProcedure
argument_list|(
operator|(
operator|(
name|Procedure
operator|)
name|object
operator|)
operator|.
name|getDataMap
argument_list|()
argument_list|,
operator|(
name|Procedure
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Embeddable
condition|)
block|{
name|undo
operator|=
operator|new
name|RemoveUndoableEdit
argument_list|(
operator|(
operator|(
name|Embeddable
operator|)
name|object
operator|)
operator|.
name|getDataMap
argument_list|()
argument_list|,
operator|(
name|Embeddable
operator|)
name|object
argument_list|)
expr_stmt|;
name|removeEmbeddable
argument_list|(
operator|(
operator|(
name|Embeddable
operator|)
name|object
operator|)
operator|.
name|getDataMap
argument_list|()
argument_list|,
operator|(
name|Embeddable
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
return|return
name|undo
return|;
block|}
block|}
end_class

end_unit

