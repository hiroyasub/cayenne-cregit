begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
operator|.
name|MapClassGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|FSPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
operator|.
name|Domain
import|;
end_import

begin_comment
comment|/**  * Manages code generation templates.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|CodeTemplateManager
block|{
specifier|public
specifier|static
specifier|final
name|String
name|STANDARD_SERVER_SUPERCLASS
init|=
literal|"Standard Server Superclass"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STANDARD_SERVER_SUBCLASS
init|=
literal|"Standard Server Subclass"
decl_stmt|;
specifier|protected
name|Map
name|standardSubclassTemplates
decl_stmt|;
specifier|protected
name|Map
name|standardSuperclassTemplates
decl_stmt|;
specifier|protected
name|Map
name|customTemplates
decl_stmt|;
specifier|public
specifier|static
name|Domain
name|getTemplateDomain
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
return|return
name|application
operator|.
name|getPreferenceDomain
argument_list|()
operator|.
name|getSubdomain
argument_list|(
name|CodeTemplateManager
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|CodeTemplateManager
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|standardSuperclassTemplates
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|standardSuperclassTemplates
operator|.
name|put
argument_list|(
name|STANDARD_SERVER_SUPERCLASS
argument_list|,
name|MapClassGenerator
operator|.
name|SUPERCLASS_TEMPLATE_1_1
argument_list|)
expr_stmt|;
name|standardSuperclassTemplates
operator|.
name|put
argument_list|(
literal|"Standard Client Superclass"
argument_list|,
name|MapClassGenerator
operator|.
name|CLIENT_SUPERCLASS_TEMPLATE_1_2
argument_list|)
expr_stmt|;
name|standardSubclassTemplates
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|standardSubclassTemplates
operator|.
name|put
argument_list|(
name|STANDARD_SERVER_SUBCLASS
argument_list|,
name|MapClassGenerator
operator|.
name|SUBCLASS_TEMPLATE_1_1
argument_list|)
expr_stmt|;
name|standardSubclassTemplates
operator|.
name|put
argument_list|(
literal|"Standard Client Subclass"
argument_list|,
name|MapClassGenerator
operator|.
name|CLIENT_SUBCLASS_TEMPLATE_1_2
argument_list|)
expr_stmt|;
name|updateCustomTemplates
argument_list|(
name|getTemplateDomain
argument_list|(
name|application
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Updates custom templates from preferences.      */
specifier|public
name|void
name|updateCustomTemplates
parameter_list|(
name|Domain
name|preferenceDomain
parameter_list|)
block|{
name|Map
name|templates
init|=
name|preferenceDomain
operator|.
name|getDetailsMap
argument_list|(
name|FSPath
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|customTemplates
operator|=
operator|new
name|HashMap
argument_list|(
name|templates
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|templates
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|FSPath
name|path
init|=
operator|(
name|FSPath
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|customTemplates
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|path
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTemplatePath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Object
name|value
init|=
name|customTemplates
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
name|value
operator|=
name|standardSuperclassTemplates
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
name|value
operator|=
name|standardSubclassTemplates
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|Map
name|getCustomTemplates
parameter_list|()
block|{
return|return
name|customTemplates
return|;
block|}
specifier|public
name|Map
name|getStandardSubclassTemplates
parameter_list|()
block|{
return|return
name|standardSubclassTemplates
return|;
block|}
specifier|public
name|Map
name|getStandardSuperclassTemplates
parameter_list|()
block|{
return|return
name|standardSuperclassTemplates
return|;
block|}
block|}
end_class

end_unit

