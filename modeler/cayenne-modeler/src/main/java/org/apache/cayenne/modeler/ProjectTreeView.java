begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataMapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataMapListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataNodeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DomainEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DomainListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|ProcedureListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|QueryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|QueryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EmbeddableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EmbeddableListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ObjEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CopyAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateDataMapAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateDbEntityAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateEmbeddableAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateNodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateObjEntityAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateProcedureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateQueryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CutAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|DbEntitySyncAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|LinkDataMapsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ObjEntitySyncAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|PasteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|RemoveAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataNodeDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataNodeDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DbEntityDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DomainDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DomainDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EmbeddableDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EmbeddableDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EntityDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|MultipleObjectsDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|MultipleObjectsDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ObjEntityDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|QueryDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|QueryDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CellRenderers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|Comparators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|QueryDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|TopBorder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTree
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|MenuElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeExpansionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeWillExpandListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultMutableTreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|MutableTreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreeSelectionModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DnDConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Panel displaying Cayenne project as a tree.  */
end_comment

begin_class
specifier|public
class|class
name|ProjectTreeView
extends|extends
name|JTree
implements|implements
name|DomainDisplayListener
implements|,
name|DomainListener
implements|,
name|DataMapDisplayListener
implements|,
name|DataMapListener
implements|,
name|DataNodeDisplayListener
implements|,
name|DataNodeListener
implements|,
name|ObjEntityListener
implements|,
name|ObjEntityDisplayListener
implements|,
name|DbEntityListener
implements|,
name|DbEntityDisplayListener
implements|,
name|QueryListener
implements|,
name|QueryDisplayListener
implements|,
name|ProcedureListener
implements|,
name|ProcedureDisplayListener
implements|,
name|MultipleObjectsDisplayListener
implements|,
name|EmbeddableDisplayListener
implements|,
name|EmbeddableListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logObj
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProjectTreeView
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Color
name|SELECTION_COLOR
init|=
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"Tree.selectionBackground"
argument_list|)
decl_stmt|;
specifier|protected
name|ProjectController
name|mediator
decl_stmt|;
specifier|protected
name|TreeSelectionListener
name|treeSelectionListener
decl_stmt|;
specifier|protected
name|TreeWillExpandListener
name|treeWillExpandListener
decl_stmt|;
specifier|protected
name|JPopupMenu
name|popup
decl_stmt|;
specifier|private
name|TreeDragSource
name|tds
decl_stmt|;
specifier|public
name|ProjectTreeView
parameter_list|(
name|ProjectController
name|mediator
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|initView
argument_list|()
expr_stmt|;
name|initController
argument_list|()
expr_stmt|;
name|initFromModel
argument_list|(
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|tds
operator|=
operator|new
name|TreeDragSource
argument_list|(
name|this
argument_list|,
name|DnDConstants
operator|.
name|ACTION_COPY
argument_list|,
name|mediator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initView
parameter_list|()
block|{
name|setCellRenderer
argument_list|(
name|CellRenderers
operator|.
name|treeRenderer
argument_list|()
argument_list|)
expr_stmt|;
name|setOpaque
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setBorder
argument_list|(
name|TopBorder
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initController
parameter_list|()
block|{
name|initTreeSelectionListener
argument_list|()
expr_stmt|;
name|initTreeExpandListener
argument_list|()
expr_stmt|;
name|addMouseListener
argument_list|(
operator|new
name|MouseClickHandler
argument_list|()
argument_list|)
expr_stmt|;
name|setupMediator
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initTreeSelectionListener
parameter_list|()
block|{
name|treeSelectionListener
operator|=
operator|new
name|TreeSelectionListener
argument_list|()
block|{
specifier|public
name|void
name|valueChanged
parameter_list|(
name|TreeSelectionEvent
name|e
parameter_list|)
block|{
name|TreePath
index|[]
name|paths
init|=
name|getSelectionPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|paths
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|ConfigurationNode
name|projectParentPath
init|=
literal|null
decl_stmt|;
name|ConfigurationNode
index|[]
name|projectPaths
init|=
operator|new
name|ConfigurationNode
index|[
name|paths
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|commonParentPath
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|projectPaths
index|[
name|i
index|]
operator|=
name|createProjectPath
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|TreePath
name|parentPath
init|=
name|paths
index|[
name|i
index|]
operator|.
name|getParentPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|parentPath
operator|!=
literal|null
operator|&&
operator|!
name|parentPath
operator|.
name|equals
argument_list|(
name|paths
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getParentPath
argument_list|()
argument_list|)
condition|)
block|{
name|commonParentPath
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|commonParentPath
condition|)
block|{
name|TreePath
name|parentPath
init|=
name|paths
index|[
literal|0
index|]
operator|.
name|getParentPath
argument_list|()
decl_stmt|;
name|projectParentPath
operator|=
name|createProjectPath
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
block|}
name|mediator
operator|.
name|fireMultipleObjectsDisplayEvent
argument_list|(
operator|new
name|MultipleObjectsDisplayEvent
argument_list|(
name|this
argument_list|,
name|projectPaths
argument_list|,
name|projectParentPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|paths
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|processSelection
argument_list|(
name|paths
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**              * Converts TreePath to Object              */
specifier|private
name|ConfigurationNode
name|createProjectPath
parameter_list|(
name|TreePath
name|treePath
parameter_list|)
block|{
name|Object
index|[]
name|path
init|=
name|treePath
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|treeNode
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
return|return
operator|(
name|ConfigurationNode
operator|)
name|treeNode
operator|.
name|getUserObject
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|addTreeSelectionListener
argument_list|(
name|treeSelectionListener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initTreeExpandListener
parameter_list|()
block|{
name|treeWillExpandListener
operator|=
operator|new
name|TreeWillExpandListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|treeWillExpand
parameter_list|(
name|TreeExpansionEvent
name|e
parameter_list|)
block|{
name|TreePath
name|path
init|=
name|e
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isPathSelected
argument_list|(
name|path
argument_list|)
operator|&&
operator|!
name|isSelectionEmpty
argument_list|()
condition|)
block|{
name|setSelectionPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|treeWillCollapse
parameter_list|(
name|TreeExpansionEvent
name|e
parameter_list|)
block|{
name|TreePath
name|path
init|=
name|e
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isPathSelected
argument_list|(
name|path
argument_list|)
operator|&&
operator|!
name|isSelectionEmpty
argument_list|()
condition|)
block|{
name|setSelectionPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|addTreeWillExpandListener
argument_list|(
name|treeWillExpandListener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupMediator
parameter_list|()
block|{
name|mediator
operator|.
name|addDomainListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDomainDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDataNodeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDataNodeDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDataMapListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDataMapDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addObjEntityListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addObjEntityDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDbEntityListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDbEntityDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addEmbeddableDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addEmbeddableListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addProcedureListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addProcedureDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addQueryListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addQueryDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addMultipleObjectsDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|getApplication
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|setupCutCopyPaste
argument_list|(
name|this
argument_list|,
name|CutAction
operator|.
name|class
argument_list|,
name|CopyAction
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initFromModel
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
comment|// build model
name|ProjectTreeModel
name|model
init|=
operator|new
name|ProjectTreeModel
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|setRootVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|getSelectionModel
argument_list|()
operator|.
name|setSelectionMode
argument_list|(
name|TreeSelectionModel
operator|.
name|DISCONTIGUOUS_TREE_SELECTION
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns tree model cast to ProjectTreeModel.      */
specifier|public
name|ProjectTreeModel
name|getProjectModel
parameter_list|()
block|{
return|return
operator|(
name|ProjectTreeModel
operator|)
name|getModel
argument_list|()
return|;
block|}
comment|/**      * Returns a "name" property of the tree node.      */
annotation|@
name|Override
specifier|public
name|String
name|convertValueToText
parameter_list|(
name|Object
name|value
parameter_list|,
name|boolean
name|selected
parameter_list|,
name|boolean
name|expanded
parameter_list|,
name|boolean
name|leaf
parameter_list|,
name|int
name|row
parameter_list|,
name|boolean
name|hasFocus
parameter_list|)
block|{
comment|// unwrap
while|while
condition|(
name|value
operator|instanceof
name|DefaultMutableTreeNode
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|DefaultMutableTreeNode
operator|)
name|value
operator|)
operator|.
name|getUserObject
argument_list|()
expr_stmt|;
block|}
comment|// String - just return it
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Project - return the name of top file
if|if
condition|(
name|value
operator|instanceof
name|Project
condition|)
block|{
name|Resource
name|resource
init|=
operator|(
operator|(
name|Project
operator|)
name|value
operator|)
operator|.
name|getConfigurationResource
argument_list|()
decl_stmt|;
return|return
operator|(
name|resource
operator|!=
literal|null
operator|)
condition|?
name|resource
operator|.
name|getURL
argument_list|()
operator|.
name|getPath
argument_list|()
else|:
literal|""
return|;
block|}
comment|// read name property
try|try
block|{
if|if
condition|(
name|value
operator|instanceof
name|Embeddable
condition|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|PropertyUtils
operator|.
name|getProperty
argument_list|(
name|value
argument_list|,
literal|"className"
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|PropertyUtils
operator|.
name|getProperty
argument_list|(
name|value
argument_list|,
literal|"name"
argument_list|)
argument_list|)
else|:
literal|""
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logObj
operator|.
name|warn
argument_list|(
literal|"Exception reading property 'name', class "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|void
name|currentDomainChanged
parameter_list|(
name|DomainDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isDomainChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentDataNodeChanged
parameter_list|(
name|DataNodeDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isDataNodeChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|,
name|e
operator|.
name|getDataNode
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentDataMapChanged
parameter_list|(
name|DataMapDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isDataMapChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentObjEntityChanged
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
name|e
operator|.
name|setEntityChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|currentEntityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentDbEntityChanged
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
name|e
operator|.
name|setEntityChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|currentEntityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|currentEntityChanged
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isEntityChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getEntity
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentProcedureChanged
parameter_list|(
name|ProcedureDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isProcedureChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getProcedure
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentQueryChanged
parameter_list|(
name|QueryDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isQueryChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getQuery
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentObjectsChanged
parameter_list|(
name|MultipleObjectsDisplayEvent
name|e
parameter_list|,
name|Application
name|application
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
name|e
operator|.
name|getParentNode
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ConfigurationNode
index|[]
name|nodes
init|=
name|e
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|TreePath
index|[]
name|treePaths
init|=
operator|new
name|TreePath
index|[
name|nodes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DefaultMutableTreeNode
name|treeNode
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getParentNode
argument_list|()
block|,
name|nodes
index|[
name|i
index|]
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|treeNode
operator|!=
literal|null
condition|)
block|{
name|treePaths
index|[
name|i
index|]
operator|=
operator|new
name|TreePath
argument_list|(
name|treeNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|e
operator|.
name|getParentNode
argument_list|()
operator|==
name|nodes
index|[
name|i
index|]
condition|)
block|{
name|treeNode
operator|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getParentNode
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|treePaths
index|[
name|i
index|]
operator|=
operator|new
name|TreePath
argument_list|(
name|treeNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isVisible
argument_list|(
name|treePaths
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|makeVisible
argument_list|(
name|treePaths
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Rectangle
name|bounds
init|=
name|getPathBounds
argument_list|(
name|treePaths
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|bounds
operator|!=
literal|null
condition|)
block|{
name|bounds
operator|.
name|height
operator|=
name|getVisibleRect
argument_list|()
operator|.
name|height
expr_stmt|;
name|scrollRectToVisible
argument_list|(
name|bounds
argument_list|)
expr_stmt|;
block|}
block|}
name|setSelectionPaths
argument_list|(
name|treePaths
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|procedureAdded
parameter_list|(
name|ProcedureEvent
name|e
parameter_list|)
block|{
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|e
operator|.
name|getProcedure
argument_list|()
operator|.
name|getDataMap
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Procedure
name|procedure
init|=
name|e
operator|.
name|getProcedure
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|currentNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|procedure
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
name|node
argument_list|,
name|currentNode
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|procedureChanged
parameter_list|(
name|ProcedureEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|e
operator|.
name|getProcedure
argument_list|()
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getProcedure
argument_list|()
block|}
decl_stmt|;
name|updateNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|positionNode
argument_list|(
name|path
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|procedureRemoved
parameter_list|(
name|ProcedureEvent
name|e
parameter_list|)
block|{
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|e
operator|.
name|getProcedure
argument_list|()
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getProcedure
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|queryAdded
parameter_list|(
name|QueryEvent
name|e
parameter_list|)
block|{
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|QueryDescriptor
name|query
init|=
name|e
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|currentNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|query
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
name|node
argument_list|,
name|currentNode
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|queryChanged
parameter_list|(
name|QueryEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|e
operator|.
name|getQuery
argument_list|()
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getQuery
argument_list|()
block|}
decl_stmt|;
name|updateNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|positionNode
argument_list|(
name|path
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|queryRemoved
parameter_list|(
name|QueryEvent
name|e
parameter_list|)
block|{
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getQuery
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|domainChanged
parameter_list|(
name|DomainEvent
name|e
parameter_list|)
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|}
decl_stmt|;
name|updateNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|positionNode
argument_list|(
name|path
argument_list|,
name|Comparators
operator|.
name|getNamedObjectComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dataNodeChanged
parameter_list|(
name|DataNodeEvent
name|e
parameter_list|)
block|{
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|e
operator|.
name|getDataNode
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|positionNode
argument_list|(
operator|(
name|DefaultMutableTreeNode
operator|)
name|node
operator|.
name|getParent
argument_list|()
argument_list|,
name|node
argument_list|,
name|Comparators
operator|.
name|getDataDomainChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getProjectModel
argument_list|()
operator|.
name|nodeChanged
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|DataChannelDescriptor
name|domain
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
comment|// check for DataMap additions/removals...
name|String
index|[]
name|mapsName
init|=
name|e
operator|.
name|getDataNode
argument_list|()
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|mapCount
init|=
name|mapsName
operator|.
name|length
decl_stmt|;
comment|// DataMap was linked
if|if
condition|(
name|mapCount
operator|>
name|node
operator|.
name|getChildCount
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|aMapsName
range|:
name|mapsName
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|node
operator|.
name|getChildCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|DefaultMutableTreeNode
name|child
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|node
operator|.
name|getChildAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|.
name|getDataMap
argument_list|(
name|aMapsName
argument_list|)
operator|==
name|child
operator|.
name|getUserObject
argument_list|()
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|DefaultMutableTreeNode
name|newMapNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|domain
operator|.
name|getDataMap
argument_list|(
name|aMapsName
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
name|node
argument_list|,
name|newMapNode
argument_list|,
name|Comparators
operator|.
name|getNamedObjectComparator
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|else if
condition|(
name|mapCount
operator|<
name|node
operator|.
name|getChildCount
argument_list|()
condition|)
block|{
comment|// DataMap was unlinked
name|int
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|j
operator|<
name|node
operator|.
name|getChildCount
argument_list|()
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|DefaultMutableTreeNode
name|child
decl_stmt|;
name|child
operator|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|node
operator|.
name|getChildAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|child
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|aMapsName
range|:
name|mapsName
control|)
block|{
if|if
condition|(
name|domain
operator|.
name|getDataMap
argument_list|(
name|aMapsName
operator|.
name|toString
argument_list|()
argument_list|)
operator|==
name|obj
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|removeNode
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|dataNodeAdded
parameter_list|(
name|DataNodeEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DataNodeDescriptor
name|dataNode
init|=
name|e
operator|.
name|getDataNode
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|currentNode
init|=
name|ProjectTreeFactory
operator|.
name|wrapProjectNode
argument_list|(
name|dataNode
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
name|node
argument_list|,
name|currentNode
argument_list|,
name|Comparators
operator|.
name|getDataDomainChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dataNodeRemoved
parameter_list|(
name|DataNodeEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
condition|)
block|{
return|return;
block|}
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|e
operator|.
name|getDataNode
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dataMapChanged
parameter_list|(
name|DataMapEvent
name|e
parameter_list|)
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|}
decl_stmt|;
name|updateNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|mediator
operator|.
name|updateEntityResolver
argument_list|()
expr_stmt|;
name|positionNode
argument_list|(
name|path
argument_list|,
name|Comparators
operator|.
name|getDataDomainChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dataMapAdded
parameter_list|(
name|DataMapEvent
name|e
parameter_list|)
block|{
name|DefaultMutableTreeNode
name|domainNode
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|DefaultMutableTreeNode
name|newMapNode
init|=
name|ProjectTreeFactory
operator|.
name|wrapProjectNode
argument_list|(
name|e
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
name|mediator
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|addDataMap
argument_list|(
name|e
operator|.
name|getDataMap
argument_list|()
argument_list|)
expr_stmt|;
name|positionNode
argument_list|(
name|domainNode
argument_list|,
name|newMapNode
argument_list|,
name|Comparators
operator|.
name|getDataDomainChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getDbImportController
argument_list|()
operator|.
name|isGlobalImport
argument_list|()
condition|)
block|{
name|showNode
argument_list|(
name|newMapNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setSelected
argument_list|(
name|newMapNode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dataMapRemoved
parameter_list|(
name|DataMapEvent
name|e
parameter_list|)
block|{
name|DataMap
name|map
init|=
name|e
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
name|DataChannelDescriptor
name|dataChannelDescriptor
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|dataChannelDescriptor
block|,
name|map
block|}
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|removeDataMap
argument_list|(
name|e
operator|.
name|getDataMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clean up map from the nodes
for|for
control|(
name|DataNodeDescriptor
name|dataNode
range|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|dataChannelDescriptor
operator|.
name|getNodeDescriptors
argument_list|()
argument_list|)
control|)
block|{
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|dataChannelDescriptor
block|,
name|dataNode
block|,
name|map
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|objEntityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|entityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|objEntityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|entityAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|objEntityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|entityRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbEntityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|entityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbEntityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|entityAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbEntityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|entityRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**      * Makes Entity visible and selected.      *<ul>      *<li>If entity is from the current node, refreshes the node making sure changes in      * the entity name are reflected.</li>      *<li>If entity is in a different node, makes that node visible and selected.</li>      *</ul>      */
specifier|protected
name|void
name|entityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|e
operator|.
name|getEntity
argument_list|()
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getEntity
argument_list|()
block|}
decl_stmt|;
name|updateNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|positionNode
argument_list|(
name|path
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Event handler for ObjEntity and DbEntity additions. Adds a tree node for the entity      * and make it selected.      */
specifier|protected
name|void
name|entityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|Entity
name|entity
init|=
name|e
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|mapNode
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|e
operator|.
name|getEntity
argument_list|()
operator|.
name|getDataMap
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapNode
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|currentNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|entity
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
name|mapNode
argument_list|,
name|currentNode
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Event handler for ObjEntity and DbEntity removals. Removes a tree node for the      * entity and selects its sibling.      */
specifier|protected
name|void
name|entityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
condition|)
block|{
return|return;
block|}
comment|// remove from DataMap tree
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|e
operator|.
name|getEntity
argument_list|()
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getEntity
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes current node from the tree. Selects a new node adjacent to the currently      * selected node instead.      */
specifier|protected
name|void
name|removeNode
parameter_list|(
name|DefaultMutableTreeNode
name|toBeRemoved
parameter_list|)
block|{
comment|// lookup for the new selected node
name|Object
name|selectedNode
init|=
literal|null
decl_stmt|;
name|TreePath
name|selectionPath
init|=
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectionPath
operator|!=
literal|null
condition|)
block|{
name|selectedNode
operator|=
name|selectionPath
operator|.
name|getLastPathComponent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|toBeRemoved
operator|==
name|selectedNode
condition|)
block|{
comment|// first search siblings
name|DefaultMutableTreeNode
name|newSelection
init|=
name|toBeRemoved
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|newSelection
operator|==
literal|null
condition|)
block|{
name|newSelection
operator|=
name|toBeRemoved
operator|.
name|getPreviousSibling
argument_list|()
expr_stmt|;
comment|// try parent
if|if
condition|(
name|newSelection
operator|==
literal|null
condition|)
block|{
name|newSelection
operator|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|toBeRemoved
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|// search the whole tree
if|if
condition|(
name|newSelection
operator|==
literal|null
condition|)
block|{
name|newSelection
operator|=
name|toBeRemoved
operator|.
name|getNextNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|newSelection
operator|==
literal|null
condition|)
block|{
name|newSelection
operator|=
name|toBeRemoved
operator|.
name|getPreviousNode
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|showNode
argument_list|(
name|newSelection
argument_list|)
expr_stmt|;
block|}
comment|// remove this node
name|getProjectModel
argument_list|()
operator|.
name|removeNodeFromParent
argument_list|(
name|toBeRemoved
argument_list|)
expr_stmt|;
block|}
comment|/** Makes node current, visible and selected. */
specifier|protected
name|void
name|showNode
parameter_list|(
name|DefaultMutableTreeNode
name|node
parameter_list|)
block|{
name|TreePath
name|path
init|=
operator|new
name|TreePath
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|makeVisible
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Rectangle
name|bounds
init|=
name|getPathBounds
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|bounds
operator|!=
literal|null
condition|)
block|{
name|bounds
operator|.
name|height
operator|=
name|getVisibleRect
argument_list|()
operator|.
name|height
expr_stmt|;
name|scrollRectToVisible
argument_list|(
name|bounds
argument_list|)
expr_stmt|;
block|}
block|}
name|setSelectionPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/** Makes node current, visible but not selected. */
specifier|private
name|void
name|setSelected
parameter_list|(
name|DefaultMutableTreeNode
name|node
parameter_list|)
block|{
name|TreePath
name|path
init|=
operator|new
name|TreePath
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|makeVisible
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|showNode
parameter_list|(
name|Object
index|[]
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|showNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|updateNode
parameter_list|(
name|Object
index|[]
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|getProjectModel
argument_list|()
operator|.
name|nodeChanged
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeNode
parameter_list|(
name|Object
index|[]
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|removeNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Processes node selection regardless of whether a new node was selected, or an      * already selected node was clicked again. Normally called from event listener      * methods.      */
specifier|public
name|void
name|processSelection
parameter_list|(
name|TreePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|currentNode
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|Object
index|[]
name|data
init|=
name|getUserObjects
argument_list|(
name|currentNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// this should clear the right-side panel
name|DomainDisplayEvent
name|domEvent
init|=
operator|new
name|DomainDisplayEvent
argument_list|(
name|this
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|domEvent
operator|.
name|setDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireDomainDisplayEvent
argument_list|(
name|domEvent
argument_list|)
expr_stmt|;
return|return;
block|}
name|Object
name|obj
init|=
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|DataChannelDescriptor
condition|)
block|{
name|mediator
operator|.
name|fireDomainDisplayEvent
argument_list|(
operator|new
name|DomainDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|DataMap
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|mediator
operator|.
name|fireDataMapDisplayEvent
argument_list|(
operator|new
name|DataMapDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|DataMap
operator|)
name|obj
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|,
operator|(
name|DataNodeDescriptor
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|data
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|mediator
operator|.
name|fireDataMapDisplayEvent
argument_list|(
operator|new
name|DataMapDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|DataMap
operator|)
name|obj
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|DataNodeDescriptor
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|mediator
operator|.
name|fireDataNodeDisplayEvent
argument_list|(
operator|new
name|DataNodeDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|,
operator|(
name|DataNodeDescriptor
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|Entity
condition|)
block|{
name|EntityDisplayEvent
name|e
init|=
operator|new
name|EntityDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|Entity
operator|)
name|obj
argument_list|)
decl_stmt|;
name|e
operator|.
name|setUnselectAttributes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|e
operator|.
name|setDataMap
argument_list|(
operator|(
name|DataMap
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|)
expr_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setDataNode
argument_list|(
operator|(
name|DataNodeDescriptor
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|e
operator|.
name|setDataMap
argument_list|(
operator|(
name|DataMap
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|)
expr_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ObjEntity
condition|)
block|{
name|mediator
operator|.
name|fireObjEntityDisplayEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|DbEntity
condition|)
block|{
name|mediator
operator|.
name|fireDbEntityDisplayEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|Embeddable
condition|)
block|{
name|EmbeddableDisplayEvent
name|e
init|=
operator|new
name|EmbeddableDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|Embeddable
operator|)
name|obj
argument_list|,
operator|(
name|DataMap
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
decl_stmt|;
name|mediator
operator|.
name|fireEmbeddableDisplayEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|Procedure
condition|)
block|{
name|ProcedureDisplayEvent
name|e
init|=
operator|new
name|ProcedureDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|Procedure
operator|)
name|obj
argument_list|,
operator|(
name|DataMap
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
decl_stmt|;
name|mediator
operator|.
name|fireProcedureDisplayEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|QueryDescriptor
condition|)
block|{
name|QueryDisplayEvent
name|e
init|=
operator|new
name|QueryDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|QueryDescriptor
operator|)
name|obj
argument_list|,
operator|(
name|DataMap
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
decl_stmt|;
name|mediator
operator|.
name|fireQueryDisplayEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scrollPathToVisible
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns array of the user objects ending with this and starting with one under      * root. That is the array of actual objects rather than wrappers.      */
specifier|private
name|Object
index|[]
name|getUserObjects
parameter_list|(
name|DefaultMutableTreeNode
name|node
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|node
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|node
operator|.
name|getUserObject
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|node
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|()
return|;
block|}
specifier|private
name|void
name|positionNode
parameter_list|(
name|Object
index|[]
name|path
parameter_list|,
name|Comparator
name|comparator
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|positionNode
argument_list|(
literal|null
argument_list|,
name|node
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|positionNode
parameter_list|(
name|MutableTreeNode
name|parent
parameter_list|,
name|DefaultMutableTreeNode
name|treeNode
parameter_list|,
name|Comparator
name|comparator
parameter_list|)
block|{
name|removeTreeSelectionListener
argument_list|(
name|treeSelectionListener
argument_list|)
expr_stmt|;
try|try
block|{
name|getProjectModel
argument_list|()
operator|.
name|positionNode
argument_list|(
name|parent
argument_list|,
name|treeNode
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|addTreeSelectionListener
argument_list|(
name|treeSelectionListener
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|TreeSelectionListener
name|getTreeSelectionListener
parameter_list|()
block|{
return|return
name|treeSelectionListener
return|;
block|}
comment|/**      * Creates JPopupMenu containing main functions      */
specifier|private
name|JPopupMenu
name|createJPopupMenu
parameter_list|()
block|{
name|JPopupMenu
name|popup
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|CreateNodeAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|CreateDataMapAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|CreateObjEntityAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|CreateEmbeddableAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|CreateDbEntityAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|CreateProcedureAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|CreateQueryAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|ObjEntitySyncAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|DbEntitySyncAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|LinkDataMapsAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|RemoveAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|CutAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|CopyAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|buildMenu
argument_list|(
name|PasteAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|popup
return|;
block|}
comment|/**      * Creates and returns an menu item associated with the key.      *       * @param actionType action type      */
specifier|private
name|JMenuItem
name|buildMenu
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Action
argument_list|>
name|actionType
parameter_list|)
block|{
name|CayenneAction
name|action
init|=
operator|(
name|CayenneAction
operator|)
name|mediator
operator|.
name|getApplication
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|actionType
argument_list|)
decl_stmt|;
return|return
name|action
operator|.
name|buildMenu
argument_list|()
return|;
block|}
comment|/**      * Class to handle:      *  - right-click and show popup for selected tree row      *  - left click row selection based on full row length (instead of default selection based on label size)      */
class|class
name|MouseClickHandler
extends|extends
name|MouseAdapter
block|{
name|void
name|selectRowForEvent
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|int
name|closestRow
init|=
name|getClosestRowForLocation
argument_list|(
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
decl_stmt|;
name|Rectangle
name|closestRowBounds
init|=
name|getRowBounds
argument_list|(
name|closestRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getY
argument_list|()
operator|>=
name|closestRowBounds
operator|.
name|getY
argument_list|()
operator|&&
name|e
operator|.
name|getY
argument_list|()
operator|<
name|closestRowBounds
operator|.
name|getY
argument_list|()
operator|+
name|closestRowBounds
operator|.
name|getHeight
argument_list|()
operator|&&
operator|!
name|isRowSelected
argument_list|(
name|closestRow
argument_list|)
condition|)
block|{
name|setSelectionRow
argument_list|(
name|closestRow
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|SwingUtilities
operator|.
name|isLeftMouseButton
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|selectRowForEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|mouseReleased
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
comment|// Selecting specified row
name|selectRowForEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|popup
operator|==
literal|null
condition|)
block|{
name|popup
operator|=
name|createJPopupMenu
argument_list|()
expr_stmt|;
block|}
name|popupMenuFilter
argument_list|()
expr_stmt|;
name|popup
operator|.
name|show
argument_list|(
name|ProjectTreeView
operator|.
name|this
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|embeddableAdded
parameter_list|(
name|EmbeddableEvent
name|e
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
name|Embeddable
name|embeddable
init|=
name|e
operator|.
name|getEmbeddable
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|mapNode
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|map
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapNode
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|currentNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|embeddable
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
name|mapNode
argument_list|,
name|currentNode
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|embeddableChanged
parameter_list|(
name|EmbeddableEvent
name|e
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|map
block|,
name|e
operator|.
name|getEmbeddable
argument_list|()
block|}
decl_stmt|;
name|updateNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|positionNode
argument_list|(
name|path
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|embeddableRemoved
parameter_list|(
name|EmbeddableEvent
name|e
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
condition|)
block|{
return|return;
block|}
comment|// remove from DataMap tree
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getDomain
argument_list|()
else|:
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
block|,
name|map
block|,
name|e
operator|.
name|getEmbeddable
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentEmbeddableChanged
parameter_list|(
name|EmbeddableDisplayEvent
name|e
parameter_list|)
block|{
name|e
operator|.
name|setEmbeddableChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isEmbeddableChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getEmbeddable
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Filter all disabled actions in popupMenu, but skip Cut-Copy-Paste block. It should always exist.
specifier|public
name|void
name|popupMenuFilter
parameter_list|()
block|{
name|Action
name|cutAction
init|=
name|mediator
operator|.
name|getApplication
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|CutAction
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|MenuElement
name|element
range|:
name|popup
operator|.
name|getSubElements
argument_list|()
control|)
block|{
name|JMenuItem
name|item
init|=
operator|(
name|JMenuItem
operator|)
name|element
decl_stmt|;
if|if
condition|(
operator|!
name|item
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
name|cutAction
argument_list|)
condition|)
block|{
name|item
operator|.
name|setVisible
argument_list|(
name|item
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
specifier|public
name|TreeDragSource
name|getTds
parameter_list|()
block|{
return|return
name|tds
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|paintComponent
parameter_list|(
name|Graphics
name|g
parameter_list|)
block|{
name|g
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|white
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|getWidth
argument_list|()
argument_list|,
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSelectionCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|g
operator|.
name|setColor
argument_list|(
name|SELECTION_COLOR
argument_list|)
expr_stmt|;
name|int
index|[]
name|rows
init|=
name|getSelectionRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|rows
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
range|:
name|rows
control|)
block|{
name|Rectangle
name|r
init|=
name|getRowBounds
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|y
argument_list|,
name|getWidth
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|super
operator|.
name|paintComponent
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

