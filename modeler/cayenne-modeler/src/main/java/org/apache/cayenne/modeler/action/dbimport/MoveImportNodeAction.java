begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|dbimport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ReverseEngineering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
operator|.
name|DbImportTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbimport
operator|.
name|DbImportTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbimport
operator|.
name|DbImportView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbimport
operator|.
name|DraggableTreePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
operator|.
name|DbImportTreeUndoableEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|MoveImportNodeAction
extends|extends
name|CayenneAction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ICON_NAME
init|=
literal|"icon-backward.png"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_NAME
init|=
literal|"Include"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_NAME
init|=
literal|""
decl_stmt|;
specifier|private
name|DbImportTree
name|sourceTree
decl_stmt|;
specifier|private
name|DbImportTree
name|targetTree
decl_stmt|;
specifier|private
name|DraggableTreePanel
name|panel
decl_stmt|;
specifier|protected
name|boolean
name|moveInverted
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
name|classMap
decl_stmt|;
specifier|public
name|MoveImportNodeAction
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|ACTION_NAME
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
name|MoveImportNodeAction
parameter_list|(
name|String
name|actionName
parameter_list|,
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|actionName
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|initMap
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initMap
parameter_list|()
block|{
name|classMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|classMap
operator|.
name|put
argument_list|(
name|IncludeTable
operator|.
name|class
argument_list|,
name|ExcludeTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|classMap
operator|.
name|put
argument_list|(
name|IncludeColumn
operator|.
name|class
argument_list|,
name|ExcludeColumn
operator|.
name|class
argument_list|)
expr_stmt|;
name|classMap
operator|.
name|put
argument_list|(
name|IncludeProcedure
operator|.
name|class
argument_list|,
name|ExcludeProcedure
operator|.
name|class
argument_list|)
expr_stmt|;
name|classMap
operator|.
name|put
argument_list|(
name|Schema
operator|.
name|class
argument_list|,
name|Schema
operator|.
name|class
argument_list|)
expr_stmt|;
name|classMap
operator|.
name|put
argument_list|(
name|Catalog
operator|.
name|class
argument_list|,
name|Catalog
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getIconName
parameter_list|()
block|{
return|return
name|ICON_NAME
return|;
block|}
specifier|private
name|boolean
name|canInsert
parameter_list|(
name|TreePath
name|path
parameter_list|,
name|DbImportTreeNode
name|foundNode
parameter_list|)
block|{
name|DbImportTreeNode
name|sourceElement
init|=
operator|(
name|DbImportTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|DbImportTreeNode
name|selectedElement
decl_stmt|;
if|if
condition|(
name|foundNode
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|targetTree
operator|.
name|getSelectionPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DbImportTreeNode
name|node
init|=
name|targetTree
operator|.
name|getSelectedNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|node
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|Catalog
operator|.
name|class
operator|)
operator|||
operator|(
name|node
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|Schema
operator|.
name|class
operator|)
operator|||
operator|(
name|node
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|ReverseEngineering
operator|.
name|class
operator|)
condition|)
block|{
name|selectedElement
operator|=
name|targetTree
operator|.
name|getSelectedNode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|selectedElement
operator|=
operator|(
name|DbImportTreeNode
operator|)
name|targetTree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getParentPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|selectedElement
operator|=
name|targetTree
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|selectedElement
operator|=
name|foundNode
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|nodeClassesIsSameTypes
argument_list|(
name|sourceElement
argument_list|,
name|selectedElement
argument_list|)
operator|)
operator|&&
operator|(
name|sourceElement
operator|.
name|getSimpleNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|selectedElement
operator|.
name|getSimpleNodeName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|childCount
init|=
name|selectedElement
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childCount
condition|;
name|i
operator|++
control|)
block|{
name|DbImportTreeNode
name|child
init|=
operator|(
name|DbImportTreeNode
operator|)
name|selectedElement
operator|.
name|getChildAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|nodeClassesIsSameTypes
argument_list|(
name|sourceElement
argument_list|,
name|child
argument_list|)
operator|)
operator|&&
operator|(
name|sourceElement
operator|.
name|getSimpleNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getSimpleNodeName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|performAction
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|TreePath
index|[]
name|paths
init|=
name|sourceTree
operator|.
name|getSelectionPaths
argument_list|()
decl_stmt|;
name|TreeManipulationAction
name|action
init|=
literal|null
decl_stmt|;
name|String
name|insertableName
init|=
name|EMPTY_NAME
decl_stmt|;
name|DbImportView
name|rootParent
init|=
operator|(
name|DbImportView
operator|)
name|panel
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|rootParent
operator|.
name|getReverseEngineeringProgress
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
block|{
name|boolean
name|isChanged
init|=
literal|false
decl_stmt|;
name|ReverseEngineering
name|reverseEngineeringOldCopy
init|=
operator|new
name|ReverseEngineering
argument_list|(
name|targetTree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|TreePath
name|path
range|:
name|paths
control|)
block|{
name|DbImportTreeNode
name|selectedElement
init|=
operator|(
name|DbImportTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|DbImportTreeNode
name|previousNode
decl_stmt|;
name|DbImportTreeNode
name|foundNode
init|=
name|targetTree
operator|.
name|findNodeByParentsChain
argument_list|(
name|targetTree
operator|.
name|getRootNode
argument_list|()
argument_list|,
name|selectedElement
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// If parent nodes from db schema doesn't exist, create it
if|if
condition|(
name|foundNode
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|selectedElement
operator|.
name|getParents
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|DbImportTreeNode
name|insertedNode
init|=
name|selectedElement
operator|.
name|getParents
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|previousNode
operator|=
name|targetTree
operator|.
name|findNodeByParentsChain
argument_list|(
name|targetTree
operator|.
name|getRootNode
argument_list|()
argument_list|,
name|insertedNode
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|previousNode
operator|==
literal|null
condition|)
block|{
name|previousNode
operator|=
name|targetTree
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
block|}
name|TreeManipulationAction
name|manipulationAction
init|=
name|panel
operator|.
name|getActionByNodeType
argument_list|(
name|insertedNode
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|canInsert
argument_list|(
operator|new
name|TreePath
argument_list|(
name|insertedNode
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|previousNode
argument_list|)
condition|)
block|{
name|manipulationAction
operator|.
name|setFoundNode
argument_list|(
name|previousNode
argument_list|)
expr_stmt|;
name|manipulationAction
operator|.
name|setInsertableNodeName
argument_list|(
name|insertedNode
operator|.
name|getSimpleNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|manipulationAction
operator|.
name|setTree
argument_list|(
name|targetTree
argument_list|)
expr_stmt|;
name|manipulationAction
operator|.
name|setMovedFromDbSchema
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|manipulationAction
operator|.
name|actionPerformed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|manipulationAction
operator|.
name|setFoundNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|manipulationAction
operator|.
name|setMultipleAction
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Again find node where we insert our node
name|foundNode
operator|=
name|targetTree
operator|.
name|findNodeByParentsChain
argument_list|(
name|targetTree
operator|.
name|getRootNode
argument_list|()
argument_list|,
name|selectedElement
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|moveInverted
condition|)
block|{
name|action
operator|=
name|panel
operator|.
name|getActionByNodeType
argument_list|(
name|selectedElement
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|panel
operator|.
name|getActionByNodeType
argument_list|(
name|classMap
operator|.
name|get
argument_list|(
name|selectedElement
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|paths
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|action
operator|.
name|setMultipleAction
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|.
name|setMultipleAction
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canInsert
argument_list|(
name|path
argument_list|,
name|foundNode
argument_list|)
condition|)
block|{
name|insertableName
operator|=
name|selectedElement
operator|.
name|getSimpleNodeName
argument_list|()
expr_stmt|;
name|action
operator|.
name|setFoundNode
argument_list|(
name|foundNode
argument_list|)
expr_stmt|;
name|action
operator|.
name|setInsertableNodeName
argument_list|(
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|insertableName
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setTree
argument_list|(
name|targetTree
argument_list|)
expr_stmt|;
name|action
operator|.
name|setMovedFromDbSchema
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|action
operator|.
name|actionPerformed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|action
operator|.
name|setFoundNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|action
operator|.
name|resetActionFlags
argument_list|()
expr_stmt|;
name|isChanged
operator|=
literal|true
expr_stmt|;
name|sourceTree
operator|.
name|setSelectionRow
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getMoveButton
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getMoveInvertButton
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|paths
operator|.
name|length
operator|>
literal|1
operator|)
operator|&&
operator|(
name|targetTree
operator|.
name|getSelectionPath
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|getProjectController
argument_list|()
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DbImportTreeNode
argument_list|>
name|expandList
init|=
name|targetTree
operator|.
name|getTreeExpandList
argument_list|()
decl_stmt|;
name|targetTree
operator|.
name|translateReverseEngineeringToTree
argument_list|(
name|targetTree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|targetTree
operator|.
name|expandTree
argument_list|(
name|expandList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|isChanged
operator|)
operator|&&
operator|(
operator|!
name|insertableName
operator|.
name|equals
argument_list|(
name|EMPTY_NAME
argument_list|)
operator|)
condition|)
block|{
name|ReverseEngineering
name|reverseEngineeringNewCopy
init|=
operator|new
name|ReverseEngineering
argument_list|(
name|targetTree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|)
decl_stmt|;
name|DbImportTreeUndoableEdit
name|undoableEdit
init|=
operator|new
name|DbImportTreeUndoableEdit
argument_list|(
name|reverseEngineeringOldCopy
argument_list|,
name|reverseEngineeringNewCopy
argument_list|,
name|targetTree
argument_list|,
name|getProjectController
argument_list|()
argument_list|)
decl_stmt|;
name|getProjectController
argument_list|()
operator|.
name|getApplication
argument_list|()
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undoableEdit
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rootParent
operator|.
name|getReverseEngineeringProgress
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|resetActionFlags
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|nodeClassesIsSameTypes
parameter_list|(
name|DbImportTreeNode
name|sourceElement
parameter_list|,
name|DbImportTreeNode
name|selectedElement
parameter_list|)
block|{
if|if
condition|(
name|sourceElement
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|selectedElement
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|sourceElement
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|IncludeTable
operator|.
name|class
condition|)
block|{
if|if
condition|(
operator|(
name|selectedElement
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|IncludeTable
operator|.
name|class
operator|)
operator|||
operator|(
name|selectedElement
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|ExcludeTable
operator|.
name|class
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|sourceElement
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|IncludeProcedure
operator|.
name|class
condition|)
block|{
if|if
condition|(
operator|(
name|selectedElement
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|IncludeProcedure
operator|.
name|class
operator|)
operator|||
operator|(
name|selectedElement
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|ExcludeProcedure
operator|.
name|class
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setSourceTree
parameter_list|(
name|DbImportTree
name|sourceTree
parameter_list|)
block|{
name|this
operator|.
name|sourceTree
operator|=
name|sourceTree
expr_stmt|;
block|}
specifier|public
name|void
name|setTargetTree
parameter_list|(
name|DbImportTree
name|targetTree
parameter_list|)
block|{
name|this
operator|.
name|targetTree
operator|=
name|targetTree
expr_stmt|;
block|}
specifier|public
name|void
name|setPanel
parameter_list|(
name|DraggableTreePanel
name|panel
parameter_list|)
block|{
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
block|}
block|}
end_class

end_unit

