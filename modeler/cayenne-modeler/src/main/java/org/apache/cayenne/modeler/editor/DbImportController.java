begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|DefaultTableModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataMapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
operator|.
name|DbLoadResultDialog
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|DbImportController
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DIALOG_TITLE
init|=
literal|"Reverse Engineering Result"
decl_stmt|;
specifier|private
name|DbLoadResultDialog
name|dbLoadResultDialog
decl_stmt|;
specifier|private
name|boolean
name|globalImport
decl_stmt|;
specifier|public
name|DbImportController
parameter_list|()
block|{
name|this
operator|.
name|dbLoadResultDialog
operator|=
operator|new
name|DbLoadResultDialog
argument_list|(
name|DIALOG_TITLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DbLoadResultDialog
name|createDialog
parameter_list|()
block|{
return|return
name|dbLoadResultDialog
return|;
block|}
specifier|public
name|void
name|showDialog
parameter_list|()
block|{
name|dbLoadResultDialog
operator|.
name|pack
argument_list|()
expr_stmt|;
name|dbLoadResultDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setGlobalImport
parameter_list|(
name|boolean
name|globalImport
parameter_list|)
block|{
name|this
operator|.
name|globalImport
operator|=
name|globalImport
expr_stmt|;
block|}
specifier|public
name|boolean
name|isGlobalImport
parameter_list|()
block|{
return|return
name|globalImport
return|;
block|}
specifier|public
name|void
name|checkImport
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|dbLoadResultDialog
operator|.
name|getTableForMap
argument_list|()
operator|.
name|remove
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|resetDialog
parameter_list|()
block|{
name|ConcurrentMap
argument_list|<
name|DataMap
argument_list|,
name|JTable
argument_list|>
name|tableMap
init|=
name|dbLoadResultDialog
operator|.
name|getTableForMap
argument_list|()
decl_stmt|;
for|for
control|(
name|DataMap
name|dataMap
range|:
name|tableMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|clearTable
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
name|dbLoadResultDialog
operator|.
name|getTableForMap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dbLoadResultDialog
operator|.
name|removeListenersFromButtons
argument_list|()
expr_stmt|;
name|dbLoadResultDialog
operator|.
name|getTablePanel
argument_list|()
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clearTable
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|JTable
name|table
init|=
name|dbLoadResultDialog
operator|.
name|getTableForMap
argument_list|()
operator|.
name|get
argument_list|(
name|dataMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultTableModel
name|tableModel
init|=
operator|(
name|DefaultTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|int
name|rowCount
init|=
name|tableModel
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|rowCount
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|tableModel
operator|.
name|removeRow
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fireDataMapChangeEvent
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getProjectController
argument_list|()
operator|.
name|fireDataMapEvent
argument_list|(
operator|new
name|DataMapEvent
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

