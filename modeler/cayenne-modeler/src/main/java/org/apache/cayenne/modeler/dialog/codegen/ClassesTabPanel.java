begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|codegen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BoxLayout
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ScrollPaneConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|EmptyBorder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FlowLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|ClassesTabPanel
extends|extends
name|JPanel
block|{
specifier|protected
name|JCheckBox
name|checkAll
decl_stmt|;
specifier|protected
name|JLabel
name|checkAllLabel
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|DataMap
argument_list|,
name|JTable
argument_list|>
name|dataMapTables
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|DataMap
argument_list|,
name|JCheckBox
argument_list|>
name|dataMapJCheckBoxMap
decl_stmt|;
specifier|public
name|ClassesTabPanel
parameter_list|(
name|Collection
argument_list|<
name|DataMap
argument_list|>
name|dataMaps
parameter_list|)
block|{
name|dataMapTables
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dataMapJCheckBoxMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// TODO: andrus 04/07/2006 - is there an easy way to stick that checkbox in the
comment|// table header????
name|this
operator|.
name|checkAll
operator|=
operator|new
name|JCheckBox
argument_list|()
expr_stmt|;
name|this
operator|.
name|checkAllLabel
operator|=
operator|new
name|JLabel
argument_list|(
literal|"Check All Classes"
argument_list|)
expr_stmt|;
name|checkAll
operator|.
name|addItemListener
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
name|checkAll
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|checkAllLabel
operator|.
name|setText
argument_list|(
literal|"Uncheck All Classess"
argument_list|)
expr_stmt|;
name|dataMapJCheckBoxMap
operator|.
name|keySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|val
lambda|->
name|dataMapJCheckBoxMap
operator|.
name|get
argument_list|(
name|val
argument_list|)
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkAllLabel
operator|.
name|setText
argument_list|(
literal|"Check All Classes"
argument_list|)
expr_stmt|;
name|dataMapJCheckBoxMap
operator|.
name|keySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|val
lambda|->
name|dataMapJCheckBoxMap
operator|.
name|get
argument_list|(
name|val
argument_list|)
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// assemble
name|JPanel
name|topPanel
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|FlowLayout
argument_list|(
name|FlowLayout
operator|.
name|CENTER
argument_list|)
argument_list|)
decl_stmt|;
name|topPanel
operator|.
name|setBorder
argument_list|(
name|UIManager
operator|.
name|getBorder
argument_list|(
literal|"ToolBar.border"
argument_list|)
argument_list|)
expr_stmt|;
name|topPanel
operator|.
name|add
argument_list|(
name|checkAll
argument_list|)
expr_stmt|;
name|topPanel
operator|.
name|add
argument_list|(
name|checkAllLabel
argument_list|)
expr_stmt|;
name|JPanel
name|panel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|panel
operator|.
name|setLayout
argument_list|(
operator|new
name|BoxLayout
argument_list|(
name|panel
argument_list|,
name|BoxLayout
operator|.
name|Y_AXIS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|DataMap
name|dataMap
range|:
name|dataMaps
control|)
block|{
name|JTable
name|table
init|=
operator|new
name|CayenneTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|setRowHeight
argument_list|(
literal|22
argument_list|)
expr_stmt|;
name|dataMapTables
operator|.
name|put
argument_list|(
name|dataMap
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|JPanel
name|scrollTable
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
decl_stmt|;
name|scrollTable
operator|.
name|add
argument_list|(
name|dataMapTables
operator|.
name|get
argument_list|(
name|dataMap
argument_list|)
operator|.
name|getTableHeader
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|scrollTable
operator|.
name|add
argument_list|(
name|dataMapTables
operator|.
name|get
argument_list|(
name|dataMap
argument_list|)
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|scrollTable
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
name|dataMapTables
operator|.
name|get
argument_list|(
name|dataMap
argument_list|)
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|width
argument_list|,
operator|(
name|dataMap
operator|.
name|getEmbeddables
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|dataMap
operator|.
name|getObjEntities
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|*
name|dataMapTables
operator|.
name|get
argument_list|(
name|dataMap
argument_list|)
operator|.
name|getRowHeight
argument_list|()
operator|+
literal|45
argument_list|)
argument_list|)
expr_stmt|;
name|JPanel
name|labelPanel
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
decl_stmt|;
name|labelPanel
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
name|dataMapTables
operator|.
name|get
argument_list|(
name|dataMap
argument_list|)
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|width
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|JLabel
name|dataMapLabel
init|=
operator|new
name|JLabel
argument_list|(
name|dataMap
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|dataMapLabel
operator|.
name|setAlignmentX
argument_list|(
name|Component
operator|.
name|CENTER_ALIGNMENT
argument_list|)
expr_stmt|;
name|dataMapLabel
operator|.
name|setBorder
argument_list|(
operator|new
name|EmptyBorder
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|labelPanel
operator|.
name|add
argument_list|(
name|dataMapLabel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|JCheckBox
name|dataMapCheckBox
init|=
operator|new
name|JCheckBox
argument_list|()
decl_stmt|;
name|dataMapJCheckBoxMap
operator|.
name|put
argument_list|(
name|dataMap
argument_list|,
name|dataMapCheckBox
argument_list|)
expr_stmt|;
name|labelPanel
operator|.
name|add
argument_list|(
name|dataMapCheckBox
argument_list|,
name|BorderLayout
operator|.
name|WEST
argument_list|)
expr_stmt|;
name|JPanel
name|currPanel
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
decl_stmt|;
name|currPanel
operator|.
name|add
argument_list|(
name|labelPanel
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|currPanel
operator|.
name|add
argument_list|(
name|scrollTable
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|currPanel
argument_list|)
expr_stmt|;
block|}
name|JScrollPane
name|tablePanel
init|=
operator|new
name|JScrollPane
argument_list|(
name|panel
argument_list|,
name|ScrollPaneConstants
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|ScrollPaneConstants
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
decl_stmt|;
comment|// set some minimal preferred size, so that it is smaller than other forms used in
comment|// the dialog... this way we get the right automated overall size
name|tablePanel
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|450
argument_list|,
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|topPanel
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|tablePanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllCheckBoxesFromDataMapSelected
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|JTable
name|table
init|=
name|dataMapTables
operator|.
name|get
argument_list|(
name|dataMap
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|Boolean
operator|)
name|table
operator|.
name|getModel
argument_list|()
operator|.
name|getValueAt
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Map
argument_list|<
name|DataMap
argument_list|,
name|JTable
argument_list|>
name|getDataMapTables
parameter_list|()
block|{
return|return
name|dataMapTables
return|;
block|}
specifier|public
name|Map
argument_list|<
name|DataMap
argument_list|,
name|JCheckBox
argument_list|>
name|getDataMapJCheckBoxMap
parameter_list|()
block|{
return|return
name|dataMapJCheckBoxMap
return|;
block|}
specifier|public
name|JCheckBox
name|getCheckAll
parameter_list|()
block|{
return|return
name|checkAll
return|;
block|}
block|}
end_class

end_unit

