begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseWheelEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseWheelListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|LineBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|UndoableEditEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataMapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataMapListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|RelationshipEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ActionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateAttributeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateRelationshipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|graph
operator|.
name|action
operator|.
name|EntityDisplayAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|graph
operator|.
name|action
operator|.
name|RemoveEntityAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgraph
operator|.
name|JGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgraph
operator|.
name|graph
operator|.
name|DefaultCellViewFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgraph
operator|.
name|graph
operator|.
name|DefaultEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgraph
operator|.
name|graph
operator|.
name|DefaultGraphCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgraph
operator|.
name|graph
operator|.
name|DefaultGraphModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgraph
operator|.
name|graph
operator|.
name|GraphConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgraph
operator|.
name|graph
operator|.
name|GraphLayoutCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgraph
operator|.
name|graph
operator|.
name|GraphModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgraph
operator|.
name|layout
operator|.
name|JGraphFacade
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgraph
operator|.
name|layout
operator|.
name|organic
operator|.
name|JGraphOrganicLayout
import|;
end_import

begin_comment
comment|/**  * Base class for building graphs of entities  */
end_comment

begin_class
specifier|abstract
class|class
name|BaseGraphBuilder
implements|implements
name|GraphBuilder
implements|,
name|DataMapListener
block|{
specifier|static
specifier|final
name|Font
name|EDGE_FONT
init|=
operator|new
name|Font
argument_list|(
literal|"Verdana"
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|/**      * Graph      */
specifier|protected
name|JGraph
name|graph
decl_stmt|;
comment|/**      * Domain      */
specifier|protected
specifier|transient
name|DataChannelDescriptor
name|domain
decl_stmt|;
comment|/**      * Created entity cells. Maps to entity name, since GraphBuilder can be      * serialized      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|DefaultGraphCell
argument_list|>
name|entityCells
decl_stmt|;
comment|/**      * Created relationship cells Maps to relationship qualified name, since      * GraphBuilder can be serialized      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|relCells
decl_stmt|;
comment|/**      * Created non-isolated objects      */
specifier|protected
name|List
argument_list|<
name|DefaultGraphCell
argument_list|>
name|createdObjects
decl_stmt|;
comment|/**      * Current project controller      */
specifier|protected
specifier|transient
name|ProjectController
name|mediator
decl_stmt|;
specifier|protected
specifier|transient
name|Entity
name|selectedEntity
decl_stmt|;
specifier|transient
name|JPopupMenu
name|popup
decl_stmt|;
name|boolean
name|undoEventsDisabled
decl_stmt|;
specifier|public
name|void
name|buildGraph
parameter_list|(
name|ProjectController
name|mediator
parameter_list|,
name|DataChannelDescriptor
name|domain
parameter_list|,
name|boolean
name|doLayout
parameter_list|)
block|{
if|if
condition|(
name|graph
operator|!=
literal|null
condition|)
block|{
comment|// graph already built, exiting silently
return|return;
block|}
name|graph
operator|=
operator|new
name|JGraph
argument_list|()
expr_stmt|;
name|GraphModel
name|model
init|=
operator|new
name|DefaultGraphModel
argument_list|()
decl_stmt|;
name|graph
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|setProjectController
argument_list|(
name|mediator
argument_list|)
expr_stmt|;
name|setDataDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|GraphLayoutCache
name|view
init|=
operator|new
name|GraphLayoutCache
argument_list|(
name|model
argument_list|,
operator|new
name|DefaultCellViewFactory
argument_list|()
argument_list|)
decl_stmt|;
name|graph
operator|.
name|setGraphLayoutCache
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|Object
name|selected
init|=
name|graph
operator|.
name|getSelectionCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|selected
operator|!=
literal|null
operator|&&
name|selected
operator|instanceof
name|DefaultGraphCell
condition|)
block|{
name|Object
name|userObject
init|=
operator|(
operator|(
name|DefaultGraphCell
operator|)
name|selected
operator|)
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|userObject
operator|instanceof
name|EntityCellMetadata
condition|)
block|{
name|showPopup
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|,
operator|(
operator|(
name|EntityCellMetadata
operator|)
name|userObject
operator|)
operator|.
name|fetchEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addMouseWheelListener
argument_list|(
operator|new
name|MouseWheelListener
argument_list|()
block|{
specifier|public
name|void
name|mouseWheelMoved
parameter_list|(
name|MouseWheelEvent
name|e
parameter_list|)
block|{
name|graph
operator|.
name|setScale
argument_list|(
name|graph
operator|.
name|getScale
argument_list|()
operator|/
name|Math
operator|.
name|pow
argument_list|(
name|ZOOM_FACTOR
argument_list|,
name|e
operator|.
name|getWheelRotation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|entityCells
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DefaultGraphCell
argument_list|>
argument_list|()
expr_stmt|;
name|createdObjects
operator|=
operator|new
name|ArrayList
argument_list|<
name|DefaultGraphCell
argument_list|>
argument_list|()
expr_stmt|;
name|relCells
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
argument_list|()
expr_stmt|;
comment|/**          * an array for entities that are not connected to anyone. We add them          * separately so that layout doesn't touch them          */
name|List
argument_list|<
name|DefaultGraphCell
argument_list|>
name|isolatedObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|DefaultGraphCell
argument_list|>
argument_list|()
decl_stmt|;
comment|/**          * 1. Add all entities          */
for|for
control|(
name|DataMap
name|map
range|:
name|domain
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
name|DefaultGraphCell
name|mapCell
init|=
operator|new
name|DefaultGraphCell
argument_list|()
decl_stmt|;
name|createdObjects
operator|.
name|add
argument_list|(
name|mapCell
argument_list|)
expr_stmt|;
for|for
control|(
name|Entity
name|entity
range|:
name|getEntities
argument_list|(
name|map
argument_list|)
control|)
block|{
name|DefaultGraphCell
name|cell
init|=
name|createEntityCell
argument_list|(
name|entity
argument_list|)
decl_stmt|;
comment|// mapCell.add(cell);
comment|// cell.setParent(mapCell);
name|List
argument_list|<
name|DefaultGraphCell
argument_list|>
name|array
init|=
operator|!
name|isIsolated
argument_list|(
name|domain
argument_list|,
name|entity
argument_list|)
condition|?
name|createdObjects
else|:
name|isolatedObjects
decl_stmt|;
name|array
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
operator|(
name|DefaultGraphCell
operator|)
name|cell
operator|.
name|getChildAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// port
block|}
block|}
comment|/**          * 2. Add all relationships          */
for|for
control|(
name|DataMap
name|map
range|:
name|domain
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
for|for
control|(
name|Entity
name|entity
range|:
name|getEntities
argument_list|(
name|map
argument_list|)
control|)
block|{
name|DefaultGraphCell
name|sourceCell
init|=
name|entityCells
operator|.
name|get
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|postProcessEntity
argument_list|(
name|entity
argument_list|,
name|sourceCell
argument_list|)
expr_stmt|;
block|}
block|}
name|view
operator|.
name|insert
argument_list|(
name|createdObjects
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doLayout
condition|)
block|{
name|JGraphFacade
name|facade
init|=
operator|new
name|JGraphFacade
argument_list|(
name|graph
argument_list|)
decl_stmt|;
name|JGraphOrganicLayout
name|layout
init|=
operator|new
name|JGraphOrganicLayout
argument_list|()
decl_stmt|;
name|layout
operator|.
name|setNodeDistributionCostFactor
argument_list|(
literal|5000000000000.0
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setEdgeLengthCostFactor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setEdgeCrossingCostFactor
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setOptimizeBorderLine
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setOptimizeEdgeDistance
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// JGraphSimpleLayout layout = new
comment|// JGraphSimpleLayout(JGraphSimpleLayout.TYPE_TILT, 4000, 2000);
name|layout
operator|.
name|run
argument_list|(
name|facade
argument_list|)
expr_stmt|;
name|Map
name|nested
init|=
name|facade
operator|.
name|createNestedMap
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Obtain a map of
comment|// the
comment|// resulting
comment|// attribute
comment|// changes from the
comment|// facade
name|edit
argument_list|(
name|nested
argument_list|)
expr_stmt|;
comment|// Apply the results to the actual graph
block|}
comment|/**          * Adding isolated objects          *           * We're placing them so that they will take maximum space in left top          * corner. The sample order is below:          *           * 1 2 6 7... 3 5 8 ... 4 9... 10 ...          */
if|if
condition|(
name|isolatedObjects
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|n
init|=
name|isolatedObjects
operator|.
name|size
argument_list|()
operator|/
literal|2
decl_stmt|;
comment|// number of isolated entities
name|int
name|x
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|Math
operator|.
name|sqrt
argument_list|(
literal|1
operator|+
literal|8
operator|*
name|n
argument_list|)
operator|-
literal|1
operator|)
operator|/
literal|2
argument_list|)
decl_stmt|;
comment|// side of
comment|// triangle
name|Dimension
name|pref
init|=
name|graph
operator|.
name|getPreferredSize
argument_list|()
decl_stmt|;
name|int
name|dx
init|=
name|pref
operator|.
name|width
operator|/
literal|2
operator|/
name|x
decl_stmt|;
comment|// x-distance between entities
name|int
name|dy
init|=
name|pref
operator|.
name|height
operator|/
literal|2
operator|/
name|x
decl_stmt|;
comment|// y-distance between entities
name|int
name|posX
init|=
name|dx
operator|/
literal|2
decl_stmt|;
name|int
name|posY
init|=
name|dy
operator|/
literal|2
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|isolatedIndex
init|=
literal|0
init|;
name|isolatedIndex
operator|<
name|isolatedObjects
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|isolatedIndex
operator|<
name|isolatedObjects
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
name|x
operator|-
name|row
condition|;
name|i
operator|++
control|)
block|{
name|GraphConstants
operator|.
name|setBounds
argument_list|(
name|isolatedObjects
operator|.
name|get
argument_list|(
name|isolatedIndex
argument_list|)
operator|.
name|getAttributes
argument_list|()
argument_list|,
operator|new
name|Rectangle2D
operator|.
name|Double
argument_list|(
name|pref
operator|.
name|width
operator|-
name|posX
argument_list|,
name|pref
operator|.
name|height
operator|-
literal|3
operator|*
name|posY
operator|/
literal|2
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|isolatedIndex
operator|+=
literal|2
expr_stmt|;
comment|// because every 2nd object is port
name|posX
operator|+=
name|dx
expr_stmt|;
block|}
name|posX
operator|=
name|dx
operator|/
literal|2
expr_stmt|;
name|posY
operator|+=
name|dy
operator|/
literal|2
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
block|}
name|view
operator|.
name|insert
argument_list|(
name|isolatedObjects
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|graph
operator|.
name|getModel
argument_list|()
operator|.
name|addUndoableEditListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DefaultGraphCell
name|createEntityCell
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|DefaultGraphCell
name|cell
init|=
operator|new
name|DefaultGraphCell
argument_list|(
name|getCellMetadata
argument_list|(
name|entity
argument_list|)
argument_list|)
decl_stmt|;
name|GraphConstants
operator|.
name|setResize
argument_list|(
name|cell
operator|.
name|getAttributes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|GraphConstants
operator|.
name|setBorder
argument_list|(
name|cell
operator|.
name|getAttributes
argument_list|()
argument_list|,
operator|new
name|LineBorder
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
argument_list|)
expr_stmt|;
name|GraphConstants
operator|.
name|setEditable
argument_list|(
name|cell
operator|.
name|getAttributes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|entityCells
operator|.
name|put
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addPort
argument_list|()
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|public
name|DefaultGraphCell
name|getEntityCell
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
return|return
name|entityCells
operator|.
name|get
argument_list|(
name|entityName
argument_list|)
return|;
block|}
comment|/**      * Post (i.e. after creation on entity cell) process of the entity      */
specifier|protected
name|void
name|postProcessEntity
parameter_list|(
name|Entity
name|entity
parameter_list|,
name|DefaultGraphCell
name|cell
parameter_list|)
block|{
for|for
control|(
name|Relationship
name|rel
range|:
name|entity
operator|.
name|getRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|rel
operator|.
name|getSourceEntity
argument_list|()
operator|!=
literal|null
operator|&&
name|rel
operator|.
name|getTargetEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DefaultEdge
name|edge
init|=
name|createRelationshipCell
argument_list|(
name|rel
argument_list|)
decl_stmt|;
if|if
condition|(
name|edge
operator|!=
literal|null
condition|)
block|{
name|createdObjects
operator|.
name|add
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Returns whether an entity is not connected to any other TODO: not fine      * algorithm, it iterates through all entities and all rels      */
specifier|protected
name|boolean
name|isIsolated
parameter_list|(
name|DataChannelDescriptor
name|domain
parameter_list|,
name|Entity
name|entity
parameter_list|)
block|{
if|if
condition|(
name|entity
operator|.
name|getRelationships
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// searching for rels that have a target="entity"
for|for
control|(
name|DataMap
name|map
range|:
name|domain
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
for|for
control|(
name|Entity
name|source
range|:
name|getEntities
argument_list|(
name|map
argument_list|)
control|)
block|{
if|if
condition|(
name|source
operator|.
name|getAnyRelationship
argument_list|(
name|entity
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
specifier|abstract
name|Collection
argument_list|<
name|?
extends|extends
name|Entity
argument_list|>
name|getEntities
parameter_list|(
name|DataMap
name|map
parameter_list|)
function_decl|;
comment|/**      * Returns label for relationship on the graph, considering its "mandatory"      * and "to-many" properties      */
specifier|private
specifier|static
name|String
name|getRelationshipLabel
parameter_list|(
name|Relationship
name|rel
parameter_list|)
block|{
if|if
condition|(
name|rel
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|rel
operator|.
name|isToMany
argument_list|()
condition|)
block|{
return|return
literal|"0..*"
return|;
block|}
return|return
name|rel
operator|.
name|isMandatory
argument_list|()
condition|?
literal|"1"
else|:
literal|"0..1"
return|;
block|}
comment|/**      * Returns metadata (user object) for this cell      */
specifier|protected
specifier|abstract
name|EntityCellMetadata
name|getCellMetadata
parameter_list|(
name|Entity
name|e
parameter_list|)
function_decl|;
specifier|protected
name|void
name|showPopup
parameter_list|(
name|Point
name|p
parameter_list|,
name|Entity
name|entity
parameter_list|)
block|{
name|selectedEntity
operator|=
name|entity
expr_stmt|;
if|if
condition|(
name|popup
operator|==
literal|null
condition|)
block|{
name|popup
operator|=
name|createPopupMenu
argument_list|()
expr_stmt|;
block|}
name|popup
operator|.
name|show
argument_list|(
name|graph
argument_list|,
name|p
operator|.
name|x
argument_list|,
name|p
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Entity
name|getSelectedEntity
parameter_list|()
block|{
return|return
name|selectedEntity
return|;
block|}
comment|/**      * Creates popup menu      */
specifier|protected
name|JPopupMenu
name|createPopupMenu
parameter_list|()
block|{
name|ActionManager
name|actionManager
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
decl_stmt|;
name|JPopupMenu
name|menu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
name|menu
operator|.
name|add
argument_list|(
operator|new
name|EntityDisplayAction
argument_list|(
name|this
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
operator|new
name|EntityDisplayAction
argument_list|(
name|this
argument_list|,
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateAttributeAction
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
operator|new
name|EntityDisplayAction
argument_list|(
name|this
argument_list|,
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateRelationshipAction
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
operator|new
name|RemoveEntityAction
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|menu
return|;
block|}
comment|/**      * Updates specified entity on the graph      */
specifier|protected
name|void
name|updateEntityCell
parameter_list|(
name|Entity
name|e
parameter_list|)
block|{
name|DefaultGraphCell
name|cell
init|=
name|entityCells
operator|.
name|get
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|!=
literal|null
condition|)
block|{
name|GraphConstants
operator|.
name|setValue
argument_list|(
name|cell
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|getCellMetadata
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|GraphConstants
operator|.
name|setResize
argument_list|(
name|cell
operator|.
name|getAttributes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Map
name|nested
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|nested
operator|.
name|put
argument_list|(
name|cell
argument_list|,
name|cell
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|edit
argument_list|(
name|nested
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|updateRelationshipCell
parameter_list|(
name|Relationship
name|rel
parameter_list|)
block|{
if|if
condition|(
name|rel
operator|.
name|getSourceEntity
argument_list|()
operator|!=
literal|null
operator|&&
name|rel
operator|.
name|getTargetEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DefaultEdge
name|edge
init|=
name|relCells
operator|.
name|get
argument_list|(
name|getQualifiedName
argument_list|(
name|rel
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|edge
operator|!=
literal|null
condition|)
block|{
name|updateRelationshipLabels
argument_list|(
name|edge
argument_list|,
name|rel
argument_list|,
name|rel
operator|.
name|getReverseRelationship
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|nested
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|nested
operator|.
name|put
argument_list|(
name|edge
argument_list|,
name|edge
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|edit
argument_list|(
name|nested
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|insertRelationshipCell
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|removeEntityCell
parameter_list|(
name|Entity
name|e
parameter_list|)
block|{
specifier|final
name|DefaultGraphCell
name|cell
init|=
name|entityCells
operator|.
name|get
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|!=
literal|null
condition|)
block|{
name|runWithUndoDisabled
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|graph
operator|.
name|getGraphLayoutCache
argument_list|()
operator|.
name|remove
argument_list|(
operator|new
name|Object
index|[]
block|{
name|cell
block|}
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|entityCells
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeRelationshipCell
parameter_list|(
name|Relationship
name|rel
parameter_list|)
block|{
specifier|final
name|DefaultEdge
name|edge
init|=
name|relCells
operator|.
name|get
argument_list|(
name|getQualifiedName
argument_list|(
name|rel
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|edge
operator|!=
literal|null
condition|)
block|{
name|runWithUndoDisabled
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|graph
operator|.
name|getGraphLayoutCache
argument_list|()
operator|.
name|remove
argument_list|(
operator|new
name|Object
index|[]
block|{
name|edge
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|relCells
operator|.
name|remove
argument_list|(
name|getQualifiedName
argument_list|(
name|rel
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|DefaultEdge
name|createRelationshipCell
parameter_list|(
name|Relationship
name|rel
parameter_list|)
block|{
if|if
condition|(
operator|!
name|relCells
operator|.
name|containsKey
argument_list|(
name|getQualifiedName
argument_list|(
name|rel
argument_list|)
argument_list|)
condition|)
block|{
name|Relationship
name|reverse
init|=
name|rel
operator|.
name|getReverseRelationship
argument_list|()
decl_stmt|;
name|DefaultEdge
name|edge
init|=
operator|new
name|DefaultEdge
argument_list|()
decl_stmt|;
comment|// GraphConstants.setLineStyle(edge.getAttributes(),
comment|// GraphConstants.STYLE_ORTHOGONAL);
comment|// GraphConstants.setRouting(edge.getAttributes(),
comment|// GraphConstants.ROUTING_SIMPLE);
name|GraphConstants
operator|.
name|setEditable
argument_list|(
name|edge
operator|.
name|getAttributes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|GraphConstants
operator|.
name|setLabelAlongEdge
argument_list|(
name|edge
operator|.
name|getAttributes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|GraphConstants
operator|.
name|setSelectable
argument_list|(
name|edge
operator|.
name|getAttributes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|GraphConstants
operator|.
name|setFont
argument_list|(
name|edge
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|EDGE_FONT
argument_list|)
expr_stmt|;
name|updateRelationshipLabels
argument_list|(
name|edge
argument_list|,
name|rel
argument_list|,
name|reverse
argument_list|)
expr_stmt|;
name|relCells
operator|.
name|put
argument_list|(
name|getQualifiedName
argument_list|(
name|rel
argument_list|)
argument_list|,
name|edge
argument_list|)
expr_stmt|;
if|if
condition|(
name|reverse
operator|!=
literal|null
condition|)
block|{
name|relCells
operator|.
name|put
argument_list|(
name|getQualifiedName
argument_list|(
name|reverse
argument_list|)
argument_list|,
name|edge
argument_list|)
expr_stmt|;
block|}
return|return
name|edge
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|insertRelationshipCell
parameter_list|(
name|Relationship
name|rel
parameter_list|)
block|{
name|DefaultEdge
name|edge
init|=
name|createRelationshipCell
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|insertEntityCell
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|DefaultGraphCell
name|cell
init|=
name|createEntityCell
argument_list|(
name|entity
argument_list|)
decl_stmt|;
comment|// putting cell to a random posistion..
name|GraphConstants
operator|.
name|setBounds
argument_list|(
name|cell
operator|.
name|getAttributes
argument_list|()
argument_list|,
operator|new
name|Rectangle2D
operator|.
name|Double
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|graph
operator|.
name|getWidth
argument_list|()
argument_list|,
name|Math
operator|.
name|random
argument_list|()
operator|*
name|graph
operator|.
name|getHeight
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// setting graph type-specific attrs
name|postProcessEntity
argument_list|(
name|entity
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
comment|/**      * Updates relationship labels for specified relationship edge.      *       * @param order      *            order of relationship in entity's same target relationships -      *            to differ labels of relationships with same source and target      */
specifier|protected
name|void
name|updateRelationshipLabels
parameter_list|(
name|DefaultEdge
name|edge
parameter_list|,
name|Relationship
name|rel
parameter_list|,
name|Relationship
name|reverse
parameter_list|)
block|{
name|DefaultGraphCell
name|sourceCell
init|=
name|entityCells
operator|.
name|get
argument_list|(
name|rel
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|DefaultGraphCell
name|targetCell
init|=
name|entityCells
operator|.
name|get
argument_list|(
name|rel
operator|.
name|getTargetEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|edge
operator|.
name|setSource
argument_list|(
name|sourceCell
operator|!=
literal|null
condition|?
name|sourceCell
operator|.
name|getChildAt
argument_list|(
literal|0
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|edge
operator|.
name|setTarget
argument_list|(
name|targetCell
operator|!=
literal|null
condition|?
name|targetCell
operator|.
name|getChildAt
argument_list|(
literal|0
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|Object
index|[]
name|labels
init|=
block|{
name|rel
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|getRelationshipLabel
argument_list|(
name|rel
argument_list|)
block|,
name|reverse
operator|==
literal|null
operator|?
literal|""
operator|:
name|reverse
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|getRelationshipLabel
argument_list|(
name|reverse
argument_list|)
block|}
decl_stmt|;
name|GraphConstants
operator|.
name|setExtraLabels
argument_list|(
name|edge
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|labels
argument_list|)
expr_stmt|;
name|Point2D
index|[]
name|labelPositions
init|=
block|{
operator|new
name|Point2D
operator|.
name|Double
argument_list|(
name|GraphConstants
operator|.
name|PERMILLE
operator|*
operator|(
literal|0.1
operator|+
literal|0.2
operator|*
name|Math
operator|.
name|random
argument_list|()
operator|)
argument_list|,
literal|10
argument_list|)
block|,
operator|new
name|Point2D
operator|.
name|Double
argument_list|(
name|GraphConstants
operator|.
name|PERMILLE
operator|*
operator|(
literal|0.9
operator|-
literal|0.2
operator|*
name|Math
operator|.
name|random
argument_list|()
operator|)
argument_list|,
operator|-
literal|10
argument_list|)
block|}
decl_stmt|;
name|GraphConstants
operator|.
name|setExtraLabelPositions
argument_list|(
name|edge
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|labelPositions
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JGraph
name|getGraph
parameter_list|()
block|{
return|return
name|graph
return|;
block|}
specifier|public
name|void
name|dataMapAdded
parameter_list|(
name|DataMapEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dataMapChanged
parameter_list|(
name|DataMapEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dataMapRemoved
parameter_list|(
name|DataMapEvent
name|e
parameter_list|)
block|{
for|for
control|(
name|Entity
name|entity
range|:
name|getEntities
argument_list|(
name|e
operator|.
name|getDataMap
argument_list|()
argument_list|)
control|)
block|{
name|removeEntityCell
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setProjectController
parameter_list|(
name|ProjectController
name|mediator
parameter_list|)
block|{
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|mediator
operator|.
name|addDataMapListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDataDomain
parameter_list|(
name|DataChannelDescriptor
name|domain
parameter_list|)
block|{
name|this
operator|.
name|domain
operator|=
name|domain
expr_stmt|;
block|}
specifier|public
name|DataChannelDescriptor
name|getDataDomain
parameter_list|()
block|{
return|return
name|domain
return|;
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|mediator
operator|.
name|removeDataMapListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if entity name has changed, then changes map key      */
specifier|protected
name|void
name|remapEntity
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|entityCells
operator|.
name|put
argument_list|(
name|e
operator|.
name|getNewName
argument_list|()
argument_list|,
name|entityCells
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getOldName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks if entity name has changed, then changes map key      */
specifier|protected
name|void
name|remapRelationship
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|relCells
operator|.
name|put
argument_list|(
name|getQualifiedName
argument_list|(
name|e
operator|.
name|getRelationship
argument_list|()
argument_list|)
argument_list|,
name|relCells
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|e
operator|.
name|getOldName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns qualified name (entity name + relationship name) for a      * relationship      */
specifier|static
name|String
name|getQualifiedName
parameter_list|(
name|Relationship
name|rel
parameter_list|)
block|{
return|return
name|rel
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|rel
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<graph type=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|"\" scale=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|graph
operator|.
name|getScale
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|indent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|DefaultGraphCell
argument_list|>
name|entry
range|:
name|entityCells
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<entity name=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
name|DefaultGraphCell
name|cell
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Rectangle2D
name|rect
init|=
name|graph
operator|.
name|getCellBounds
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|encodeRecangle
argument_list|(
name|encoder
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|indent
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"</graph>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|encodeRecangle
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|,
name|Rectangle2D
name|rect
parameter_list|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"x=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|rect
operator|.
name|getX
argument_list|()
operator|+
literal|"\" y=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|rect
operator|.
name|getY
argument_list|()
operator|+
literal|"\" width=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|rect
operator|.
name|getWidth
argument_list|()
operator|+
literal|"\" height=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|rect
operator|.
name|getHeight
argument_list|()
operator|+
literal|"\" "
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|edit
parameter_list|(
specifier|final
name|Map
name|map
parameter_list|)
block|{
name|runWithUndoDisabled
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|graph
operator|.
name|getGraphLayoutCache
argument_list|()
operator|.
name|edit
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|insert
parameter_list|(
specifier|final
name|Object
name|cell
parameter_list|)
block|{
name|runWithUndoDisabled
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|graph
operator|.
name|getGraphLayoutCache
argument_list|()
operator|.
name|insert
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runWithUndoDisabled
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|undoEventsDisabled
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|r
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|undoEventsDisabled
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|undoableEditHappened
parameter_list|(
name|UndoableEditEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|undoEventsDisabled
condition|)
block|{
comment|// graph has been modified
name|mediator
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getUndoManager
argument_list|()
operator|.
name|undoableEditHappened
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

