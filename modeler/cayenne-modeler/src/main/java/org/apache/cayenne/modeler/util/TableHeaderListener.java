begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|TableColumnPreferences
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|JTableHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumnModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_class
specifier|public
class|class
name|TableHeaderListener
extends|extends
name|MouseAdapter
block|{
specifier|private
name|JTableHeader
name|header
decl_stmt|;
specifier|private
name|SortButtonRenderer
name|renderer
decl_stmt|;
specifier|private
name|JTable
name|table
decl_stmt|;
specifier|private
name|TableColumnPreferences
name|tableColumnPreferences
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|EPSILON
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Cursor
name|EAST
init|=
name|Cursor
operator|.
name|getPredefinedCursor
argument_list|(
name|Cursor
operator|.
name|E_RESIZE_CURSOR
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Cursor
name|WEST
init|=
name|Cursor
operator|.
name|getPredefinedCursor
argument_list|(
name|Cursor
operator|.
name|W_RESIZE_CURSOR
argument_list|)
decl_stmt|;
specifier|public
name|TableHeaderListener
parameter_list|(
name|JTableHeader
name|header
parameter_list|,
name|SortButtonRenderer
name|renderer
parameter_list|)
block|{
name|this
operator|.
name|header
operator|=
name|header
expr_stmt|;
name|this
operator|.
name|renderer
operator|=
name|renderer
expr_stmt|;
name|table
operator|=
name|header
operator|.
name|getTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|>
literal|1
operator|&&
name|isResizeCursor
argument_list|()
condition|)
block|{
name|resize
argument_list|(
name|getLeftColumn
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|isResizeCursor
argument_list|()
condition|)
block|{
name|int
name|col
init|=
name|header
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sortCol
init|=
name|table
operator|.
name|convertColumnIndexToModel
argument_list|(
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|CayenneTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|isColumnSortable
argument_list|(
name|sortCol
argument_list|)
condition|)
block|{
name|boolean
name|isAscent
decl_stmt|;
if|if
condition|(
name|SortButtonRenderer
operator|.
name|DOWN
operator|==
name|renderer
operator|.
name|getState
argument_list|(
name|col
argument_list|)
condition|)
block|{
name|isAscent
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|isAscent
operator|=
literal|true
expr_stmt|;
block|}
name|sortByDefinedColumn
argument_list|(
name|col
argument_list|,
name|sortCol
argument_list|,
name|isAscent
argument_list|)
expr_stmt|;
name|tableColumnPreferences
operator|.
name|setSortOrder
argument_list|(
name|isAscent
argument_list|)
expr_stmt|;
name|tableColumnPreferences
operator|.
name|setSortColumn
argument_list|(
name|sortCol
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|renderer
operator|.
name|setPressedColumn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// clear
name|header
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|sortByDefinedColumn
parameter_list|(
name|int
name|col
parameter_list|,
name|int
name|sortCol
parameter_list|,
name|boolean
name|order
parameter_list|)
block|{
name|CayenneTableModel
name|model
init|=
operator|(
name|CayenneTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|isColumnSortable
argument_list|(
name|sortCol
argument_list|)
condition|)
block|{
name|renderer
operator|.
name|setPressedColumn
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|renderer
operator|.
name|setSelectedColumn
argument_list|(
name|col
argument_list|,
name|order
argument_list|)
expr_stmt|;
name|header
operator|.
name|repaint
argument_list|()
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|isEditing
argument_list|()
condition|)
block|{
name|table
operator|.
name|getCellEditor
argument_list|()
operator|.
name|stopCellEditing
argument_list|()
expr_stmt|;
block|}
name|model
operator|.
name|sortByColumn
argument_list|(
name|sortCol
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setPreferences
parameter_list|(
name|TableColumnPreferences
name|tableColumnPreferences
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|tableColumnPreferences
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|tableColumnPreferences
operator|=
name|tableColumnPreferences
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isResizeCursor
parameter_list|()
block|{
name|Cursor
name|cursor
init|=
name|table
operator|.
name|getTableHeader
argument_list|()
operator|.
name|getCursor
argument_list|()
decl_stmt|;
return|return
name|cursor
operator|.
name|equals
argument_list|(
name|EAST
argument_list|)
operator|||
name|cursor
operator|.
name|equals
argument_list|(
name|WEST
argument_list|)
return|;
block|}
specifier|private
name|int
name|getLeftColumn
parameter_list|(
name|Point
name|pt
parameter_list|)
block|{
name|pt
operator|.
name|x
operator|-=
name|EPSILON
expr_stmt|;
return|return
name|table
operator|.
name|getTableHeader
argument_list|()
operator|.
name|columnAtPoint
argument_list|(
name|pt
argument_list|)
return|;
block|}
specifier|private
name|void
name|resize
parameter_list|(
name|int
name|col
parameter_list|)
block|{
name|TableColumnModel
name|tcm
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|TableColumn
name|tc
init|=
name|tcm
operator|.
name|getColumn
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|TableCellRenderer
name|tcr
init|=
name|tc
operator|.
name|getHeaderRenderer
argument_list|()
decl_stmt|;
if|if
condition|(
name|tcr
operator|==
literal|null
condition|)
name|tcr
operator|=
name|table
operator|.
name|getTableHeader
argument_list|()
operator|.
name|getDefaultRenderer
argument_list|()
expr_stmt|;
name|Object
name|obj
init|=
name|tc
operator|.
name|getHeaderValue
argument_list|()
decl_stmt|;
name|Component
name|comp
init|=
name|tcr
operator|.
name|getTableCellRendererComponent
argument_list|(
name|table
argument_list|,
name|obj
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|maxWidth
init|=
name|comp
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|width
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|ub
init|=
name|table
operator|.
name|getRowCount
argument_list|()
init|;
name|i
operator|!=
name|ub
condition|;
operator|++
name|i
control|)
block|{
name|tcr
operator|=
name|table
operator|.
name|getCellRenderer
argument_list|(
name|i
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|obj
operator|=
name|table
operator|.
name|getValueAt
argument_list|(
name|i
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|comp
operator|=
name|tcr
operator|.
name|getTableCellRendererComponent
argument_list|(
name|table
argument_list|,
name|obj
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|i
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|comp
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|width
decl_stmt|;
if|if
condition|(
name|w
operator|>
name|maxWidth
condition|)
name|maxWidth
operator|=
name|w
expr_stmt|;
block|}
name|maxWidth
operator|+=
literal|10
expr_stmt|;
name|tc
operator|.
name|setPreferredWidth
argument_list|(
name|maxWidth
argument_list|)
expr_stmt|;
name|tc
operator|.
name|setWidth
argument_list|(
name|maxWidth
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

