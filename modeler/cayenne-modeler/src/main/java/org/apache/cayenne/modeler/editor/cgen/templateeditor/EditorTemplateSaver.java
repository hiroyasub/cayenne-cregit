begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|cgen
operator|.
name|templateeditor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
operator|.
name|CgenConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
operator|.
name|CgenTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
operator|.
name|TemplateType
import|;
end_import

begin_comment
comment|/**  * since 4.3  */
end_comment

begin_class
specifier|public
class|class
name|EditorTemplateSaver
block|{
specifier|private
specifier|final
name|CgenConfiguration
name|configuration
decl_stmt|;
specifier|public
name|EditorTemplateSaver
parameter_list|(
name|CgenConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|TemplateType
name|type
parameter_list|,
name|Boolean
name|isTemplateDefault
parameter_list|,
name|String
name|templateText
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isMakePairs
argument_list|()
operator|||
operator|!
name|isTemplateDefault
condition|)
block|{
name|setTemplate
argument_list|(
name|type
argument_list|,
name|isTemplateDefault
argument_list|,
name|templateText
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setDefaultSingleTemplate
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setTemplate
parameter_list|(
name|TemplateType
name|templateType
parameter_list|,
name|Boolean
name|isDefault
parameter_list|,
name|String
name|templateText
parameter_list|)
block|{
name|String
name|template
decl_stmt|;
if|if
condition|(
name|isDefault
condition|)
block|{
name|template
operator|=
name|templateType
operator|.
name|pathFromSourceRoot
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|template
operator|=
name|templateText
expr_stmt|;
block|}
switch|switch
condition|(
name|templateType
condition|)
block|{
case|case
name|ENTITY_SUPERCLASS
case|:
block|{
name|configuration
operator|.
name|setSuperTemplate
argument_list|(
operator|new
name|CgenTemplate
argument_list|(
name|template
argument_list|,
literal|false
argument_list|,
name|TemplateType
operator|.
name|ENTITY_SUPERCLASS
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ENTITY_SUBCLASS
case|:
block|{
name|configuration
operator|.
name|setTemplate
argument_list|(
operator|new
name|CgenTemplate
argument_list|(
name|template
argument_list|,
literal|false
argument_list|,
name|TemplateType
operator|.
name|ENTITY_SUBCLASS
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EMBEDDABLE_SUPERCLASS
case|:
block|{
name|configuration
operator|.
name|setEmbeddableSuperTemplate
argument_list|(
operator|new
name|CgenTemplate
argument_list|(
name|template
argument_list|,
literal|false
argument_list|,
name|TemplateType
operator|.
name|EMBEDDABLE_SUPERCLASS
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EMBEDDABLE_SUBCLASS
case|:
block|{
name|configuration
operator|.
name|setEmbeddableTemplate
argument_list|(
operator|new
name|CgenTemplate
argument_list|(
name|template
argument_list|,
literal|false
argument_list|,
name|TemplateType
operator|.
name|EMBEDDABLE_SUBCLASS
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DATAMAP_SUPERCLASS
case|:
block|{
name|configuration
operator|.
name|setDataMapSuperTemplate
argument_list|(
operator|new
name|CgenTemplate
argument_list|(
name|template
argument_list|,
literal|false
argument_list|,
name|TemplateType
operator|.
name|DATAMAP_SUPERCLASS
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DATAMAP_SUBCLASS
case|:
block|{
name|configuration
operator|.
name|setDataMapTemplate
argument_list|(
operator|new
name|CgenTemplate
argument_list|(
name|template
argument_list|,
literal|false
argument_list|,
name|TemplateType
operator|.
name|DATAMAP_SUBCLASS
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal template type for for nonSingle template "
operator|+
name|templateType
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|setDefaultSingleTemplate
parameter_list|(
name|TemplateType
name|templateType
parameter_list|)
block|{
switch|switch
condition|(
name|templateType
condition|)
block|{
case|case
name|ENTITY_SUBCLASS
case|:
block|{
name|configuration
operator|.
name|setTemplate
argument_list|(
name|TemplateType
operator|.
name|ENTITY_SINGLE_CLASS
operator|.
name|defaultTemplate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EMBEDDABLE_SUBCLASS
case|:
block|{
name|configuration
operator|.
name|setEmbeddableTemplate
argument_list|(
name|TemplateType
operator|.
name|EMBEDDABLE_SINGLE_CLASS
operator|.
name|defaultTemplate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DATAMAP_SUBCLASS
case|:
block|{
name|configuration
operator|.
name|setDataMapTemplate
argument_list|(
name|TemplateType
operator|.
name|DATAMAP_SINGLE_CLASS
operator|.
name|defaultTemplate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal template type for single template "
operator|+
name|templateType
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

