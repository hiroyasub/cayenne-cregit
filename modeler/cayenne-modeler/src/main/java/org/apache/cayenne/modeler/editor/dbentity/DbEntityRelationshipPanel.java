begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbentity
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ListSelectionModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TableModelEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TableModelListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbRelationshipListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|RelationshipEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|DbRelationshipDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ActionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CopyAttributeRelationshipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CutAttributeRelationshipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|PasteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|RemoveAttributeRelationshipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DbEntityDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EntityDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|TablePopupHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|TableColumnPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|BoardTableCellRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CellRenderers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ModelerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|PanelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|UIUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|combo
operator|.
name|AutoCompletion
import|;
end_import

begin_comment
comment|/**  * Displays DbRelationships for the current DbEntity.  */
end_comment

begin_class
specifier|public
class|class
name|DbEntityRelationshipPanel
extends|extends
name|JPanel
implements|implements
name|DbEntityDisplayListener
implements|,
name|DbEntityListener
implements|,
name|DbRelationshipListener
implements|,
name|TableModelListener
block|{
specifier|protected
name|ProjectController
name|mediator
decl_stmt|;
specifier|protected
name|CayenneTable
name|table
decl_stmt|;
specifier|private
name|TableColumnPreferences
name|tablePreferences
decl_stmt|;
specifier|private
name|ActionListener
name|resolver
decl_stmt|;
specifier|private
name|boolean
name|enabledResolve
decl_stmt|;
specifier|private
name|DbEntityAttributeRelationshipTab
name|parentPanel
decl_stmt|;
comment|/**      * By now popup menu item is made similiar to toolbar button. (i.e. all functionality      * is here) This should be probably refactored as Action.      */
specifier|protected
name|JMenuItem
name|resolveMenu
decl_stmt|;
comment|/**      * Combo to edit 'target' field      */
specifier|protected
name|JComboBox
argument_list|<
name|DbEntity
argument_list|>
name|targetCombo
decl_stmt|;
specifier|public
name|DbEntityRelationshipPanel
parameter_list|(
name|ProjectController
name|mediator
parameter_list|,
name|DbEntityAttributeRelationshipTab
name|parentPanel
parameter_list|)
block|{
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|this
operator|.
name|parentPanel
operator|=
name|parentPanel
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|initController
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|()
block|{
name|this
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|ActionManager
name|actionManager
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
decl_stmt|;
name|table
operator|=
operator|new
name|CayenneTable
argument_list|()
expr_stmt|;
name|table
operator|.
name|setDefaultRenderer
argument_list|(
name|DbEntity
operator|.
name|class
argument_list|,
name|CellRenderers
operator|.
name|entityTableRendererWithIcons
argument_list|(
name|mediator
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setDefaultRenderer
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|BoardTableCellRenderer
argument_list|()
argument_list|)
expr_stmt|;
name|tablePreferences
operator|=
operator|new
name|TableColumnPreferences
argument_list|(
name|DbRelationshipTableModel
operator|.
name|class
argument_list|,
literal|"relationshipTable"
argument_list|)
expr_stmt|;
comment|// Create and install a popup
name|Icon
name|ico
init|=
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"icon-edit.png"
argument_list|)
decl_stmt|;
name|resolveMenu
operator|=
operator|new
name|CayenneAction
operator|.
name|CayenneMenuItem
argument_list|(
literal|"Database Mapping"
argument_list|,
name|ico
argument_list|)
expr_stmt|;
name|JPopupMenu
name|popup
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|resolveMenu
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|RemoveAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|popup
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|CutAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|CopyAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|PasteAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|TablePopupHandler
operator|.
name|install
argument_list|(
name|table
argument_list|,
name|popup
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|PanelFactory
operator|.
name|createTablePanel
argument_list|(
name|table
argument_list|,
literal|null
argument_list|)
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initController
parameter_list|()
block|{
name|this
operator|.
name|mediator
operator|.
name|addDbEntityDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|mediator
operator|.
name|addDbEntityListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|mediator
operator|.
name|addDbRelationshipListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|resolver
operator|=
name|e
lambda|->
block|{
name|int
name|row
init|=
name|table
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
condition|)
block|{
return|return;
block|}
comment|// Get DbRelationship
name|DbRelationshipTableModel
name|model
init|=
operator|(
name|DbRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|DbRelationship
name|rel
init|=
name|model
operator|.
name|getRelationship
argument_list|(
name|row
argument_list|)
decl_stmt|;
operator|new
name|DbRelationshipDialog
argument_list|(
name|mediator
argument_list|)
operator|.
name|modifyRaltionship
argument_list|(
name|rel
argument_list|)
operator|.
name|startUp
argument_list|()
expr_stmt|;
block|}
expr_stmt|;
name|resolveMenu
operator|.
name|addActionListener
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|table
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|addListSelectionListener
argument_list|(
operator|new
name|DbRelationshipListSelectionListener
argument_list|()
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|getApplication
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|setupCutCopyPaste
argument_list|(
name|table
argument_list|,
name|CutAttributeRelationshipAction
operator|.
name|class
argument_list|,
name|CopyAttributeRelationshipAction
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|tableChanged
parameter_list|(
name|TableModelEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|table
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|DbRelationshipTableModel
name|model
init|=
operator|(
name|DbRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|DbRelationship
name|rel
init|=
name|model
operator|.
name|getRelationship
argument_list|(
name|table
operator|.
name|getSelectedRow
argument_list|()
argument_list|)
decl_stmt|;
name|enabledResolve
operator|=
operator|(
name|rel
operator|.
name|getTargetEntity
argument_list|()
operator|!=
literal|null
operator|)
expr_stmt|;
name|resolveMenu
operator|.
name|setEnabled
argument_list|(
name|enabledResolve
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Selects a specified relationship in the relationships table.      */
specifier|public
name|void
name|selectRelationships
parameter_list|(
name|DbRelationship
index|[]
name|rels
parameter_list|)
block|{
name|DbRelationshipTableModel
name|model
init|=
operator|(
name|DbRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|List
name|listRels
init|=
name|model
operator|.
name|getObjectList
argument_list|()
decl_stmt|;
name|int
index|[]
name|newSel
init|=
operator|new
name|int
index|[
name|rels
operator|.
name|length
index|]
decl_stmt|;
name|parentPanel
operator|.
name|updateActions
argument_list|(
name|rels
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rels
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newSel
index|[
name|i
index|]
operator|=
name|listRels
operator|.
name|indexOf
argument_list|(
name|rels
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|select
argument_list|(
name|newSel
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|removeActionListener
argument_list|(
name|getResolver
argument_list|()
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|addActionListener
argument_list|(
name|getResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads obj relationships into table.      */
specifier|public
name|void
name|currentDbEntityChanged
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
name|DbEntity
name|entity
init|=
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
operator|&&
name|e
operator|.
name|isEntityChanged
argument_list|()
condition|)
block|{
comment|// TODO: this line seems to slow down the Modeler significantly sometimes
comment|// (esp. noticable if selected entity has no relationships!),
comment|// even when this tab is not showing...maybe we should simply mark the view as
comment|// dirty and rebuild it when it becomes visible
name|rebuildTable
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
comment|// if an entity was selected on a tree,
comment|// unselect currently selected row
if|if
condition|(
name|e
operator|.
name|isUnselectAttributes
argument_list|()
condition|)
block|{
name|table
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|rebuildTable
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
block|{
name|DbRelationshipTableModel
name|model
init|=
operator|new
name|DbRelationshipTableModel
argument_list|(
name|entity
argument_list|,
name|mediator
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|model
operator|.
name|addTableModelListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|table
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRowHeight
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRowMargin
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|TableColumn
name|col
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|DbRelationshipTableModel
operator|.
name|TARGET
argument_list|)
decl_stmt|;
name|targetCombo
operator|=
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|()
expr_stmt|;
name|AutoCompletion
operator|.
name|enable
argument_list|(
name|targetCombo
argument_list|)
expr_stmt|;
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|DbRelationshipTableModel
operator|.
name|TO_DEPENDENT_KEY
argument_list|)
operator|.
name|setCellRenderer
argument_list|(
operator|new
name|CheckBoxCellRenderer
argument_list|()
argument_list|)
expr_stmt|;
name|targetCombo
operator|.
name|setRenderer
argument_list|(
name|CellRenderers
operator|.
name|entityListRendererWithIcons
argument_list|(
name|entity
operator|.
name|getDataMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|targetCombo
operator|.
name|setModel
argument_list|(
name|createComboModel
argument_list|()
argument_list|)
expr_stmt|;
name|col
operator|.
name|setCellEditor
argument_list|(
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createCellEditor
argument_list|(
name|targetCombo
argument_list|)
argument_list|)
expr_stmt|;
name|tablePreferences
operator|.
name|bind
argument_list|(
name|table
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DbRelationshipTableModel
operator|.
name|NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbEntityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dbEntityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|reloadEntityList
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbEntityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|reloadEntityList
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbRelationshipChanged
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|!=
name|this
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|table
operator|.
name|getModel
argument_list|()
operator|instanceof
name|DbRelationshipTableModel
operator|)
condition|)
block|{
name|rebuildTable
argument_list|(
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|select
argument_list|(
name|e
operator|.
name|getRelationship
argument_list|()
argument_list|)
expr_stmt|;
name|DbRelationshipTableModel
name|model
init|=
operator|(
name|DbRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dbRelationshipAdded
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
name|rebuildTable
argument_list|(
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|select
argument_list|(
name|e
operator|.
name|getRelationship
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbRelationshipRemoved
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
name|DbRelationshipTableModel
name|model
init|=
operator|(
name|DbRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|DbRelationship
name|relationship
init|=
operator|(
name|DbRelationship
operator|)
name|e
operator|.
name|getRelationship
argument_list|()
decl_stmt|;
name|int
name|ind
init|=
name|model
operator|.
name|getObjectList
argument_list|()
operator|.
name|indexOf
argument_list|(
name|relationship
argument_list|)
decl_stmt|;
name|model
operator|.
name|removeRelationship
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
name|table
operator|.
name|select
argument_list|(
name|ind
argument_list|)
expr_stmt|;
block|}
comment|/**      * Refresh the list of db entities (targets). Also refresh the table in case some db      * relationships were deleted.      */
specifier|private
name|void
name|reloadEntityList
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
operator|==
name|e
operator|.
name|getEntity
argument_list|()
comment|// If current model added/removed, do nothing.
operator|||
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// If this is just loading new currentDbEntity, do nothing
return|return;
block|}
name|targetCombo
operator|.
name|setModel
argument_list|(
name|createComboModel
argument_list|()
argument_list|)
expr_stmt|;
name|DbRelationshipTableModel
name|model
init|=
operator|(
name|DbRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a list of DbEntities.      */
specifier|private
name|ComboBoxModel
argument_list|<
name|DbEntity
argument_list|>
name|createComboModel
parameter_list|()
block|{
name|EntityResolver
name|resolver
init|=
name|mediator
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|DbEntity
index|[]
name|objects
init|=
name|resolver
operator|.
name|getDbEntities
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|DbEntity
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|DefaultComboBoxModel
argument_list|<>
argument_list|(
name|objects
argument_list|)
return|;
block|}
specifier|public
name|ActionListener
name|getResolver
parameter_list|()
block|{
return|return
name|resolver
return|;
block|}
specifier|private
class|class
name|DbRelationshipListSelectionListener
implements|implements
name|ListSelectionListener
block|{
specifier|public
name|void
name|valueChanged
parameter_list|(
name|ListSelectionEvent
name|e
parameter_list|)
block|{
name|DbRelationship
index|[]
name|rels
init|=
operator|new
name|DbRelationship
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|e
operator|.
name|getValueIsAdjusting
argument_list|()
operator|&&
operator|!
operator|(
operator|(
name|ListSelectionModel
operator|)
name|e
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|isSelectionEmpty
argument_list|()
condition|)
block|{
name|parentPanel
operator|.
name|getAttributePanel
argument_list|()
operator|.
name|table
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
if|if
condition|(
name|parentPanel
operator|.
name|getAttributePanel
argument_list|()
operator|.
name|table
operator|.
name|getCellEditor
argument_list|()
operator|!=
literal|null
condition|)
name|parentPanel
operator|.
name|getAttributePanel
argument_list|()
operator|.
name|table
operator|.
name|getCellEditor
argument_list|()
operator|.
name|stopCellEditing
argument_list|()
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|RemoveAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|setCurrentSelectedPanel
argument_list|(
name|parentPanel
operator|.
name|getRelationshipPanel
argument_list|()
argument_list|)
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|CutAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|setCurrentSelectedPanel
argument_list|(
name|parentPanel
operator|.
name|getRelationshipPanel
argument_list|()
argument_list|)
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|CopyAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|setCurrentSelectedPanel
argument_list|(
name|parentPanel
operator|.
name|getRelationshipPanel
argument_list|()
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|removeActionListener
argument_list|(
name|getResolver
argument_list|()
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|addActionListener
argument_list|(
name|getResolver
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|DbRelationshipTableModel
name|model
init|=
operator|(
name|DbRelationshipTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|int
index|[]
name|sel
init|=
name|table
operator|.
name|getSelectedRows
argument_list|()
decl_stmt|;
name|rels
operator|=
operator|new
name|DbRelationship
index|[
name|sel
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sel
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rels
index|[
name|i
index|]
operator|=
name|model
operator|.
name|getRelationship
argument_list|(
name|sel
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sel
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|UIUtil
operator|.
name|scrollToSelectedRow
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|enabledResolve
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|enabledResolve
operator|=
literal|false
expr_stmt|;
block|}
name|resolveMenu
operator|.
name|setEnabled
argument_list|(
name|enabledResolve
argument_list|)
expr_stmt|;
block|}
name|mediator
operator|.
name|setCurrentDbRelationships
argument_list|(
name|rels
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|updateActions
argument_list|(
name|rels
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|CheckBoxCellRenderer
implements|implements
name|TableCellRenderer
block|{
specifier|private
specifier|final
name|JCheckBox
name|renderer
decl_stmt|;
specifier|public
name|CheckBoxCellRenderer
parameter_list|()
block|{
name|renderer
operator|=
operator|new
name|JCheckBox
argument_list|()
expr_stmt|;
name|renderer
operator|.
name|setHorizontalAlignment
argument_list|(
name|SwingConstants
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|hasFocus
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|Color
name|color
init|=
name|isSelected
condition|?
name|table
operator|.
name|getSelectionBackground
argument_list|()
else|:
name|table
operator|.
name|getBackground
argument_list|()
decl_stmt|;
name|renderer
operator|.
name|setBackground
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|renderer
operator|.
name|setEnabled
argument_list|(
name|table
operator|.
name|isCellEditable
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|renderer
operator|.
name|setSelected
argument_list|(
name|value
operator|!=
literal|null
operator|&&
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|renderer
return|;
block|}
block|}
block|}
end_class

end_unit

