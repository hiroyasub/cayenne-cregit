begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ReverseEngineering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
operator|.
name|DbImportTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbimport
operator|.
name|DbImportTree
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|AbstractUndoableEdit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CannotRedoException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CannotUndoException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|DbImportTreeUndoableEdit
extends|extends
name|AbstractUndoableEdit
block|{
specifier|private
name|ReverseEngineering
name|previousReverseEngineering
decl_stmt|;
specifier|private
name|ReverseEngineering
name|nextReverseEngineering
decl_stmt|;
specifier|private
name|DbImportTree
name|tree
decl_stmt|;
specifier|private
name|ProjectController
name|projectController
decl_stmt|;
specifier|public
name|DbImportTreeUndoableEdit
parameter_list|(
name|ReverseEngineering
name|previousReverseEngineering
parameter_list|,
name|ReverseEngineering
name|nextReverseEngineering
parameter_list|,
name|DbImportTree
name|tree
parameter_list|,
name|ProjectController
name|projectController
parameter_list|)
block|{
name|this
operator|.
name|tree
operator|=
name|tree
expr_stmt|;
name|this
operator|.
name|previousReverseEngineering
operator|=
name|previousReverseEngineering
expr_stmt|;
name|this
operator|.
name|nextReverseEngineering
operator|=
name|nextReverseEngineering
expr_stmt|;
name|this
operator|.
name|projectController
operator|=
name|projectController
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRedo
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|redo
parameter_list|()
throws|throws
name|CannotRedoException
block|{
name|tree
operator|.
name|stopEditing
argument_list|()
expr_stmt|;
name|tree
operator|.
name|setReverseEngineering
argument_list|(
name|this
operator|.
name|nextReverseEngineering
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DbImportTreeNode
argument_list|>
name|list
init|=
name|tree
operator|.
name|getTreeExpandList
argument_list|()
decl_stmt|;
name|projectController
operator|.
name|getApplication
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|add
argument_list|(
name|projectController
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|tree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|)
expr_stmt|;
name|projectController
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tree
operator|.
name|translateReverseEngineeringToTree
argument_list|(
name|tree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tree
operator|.
name|expandTree
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|undo
parameter_list|()
throws|throws
name|CannotUndoException
block|{
name|tree
operator|.
name|stopEditing
argument_list|()
expr_stmt|;
name|tree
operator|.
name|setReverseEngineering
argument_list|(
name|this
operator|.
name|previousReverseEngineering
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DbImportTreeNode
argument_list|>
name|list
init|=
name|tree
operator|.
name|getTreeExpandList
argument_list|()
decl_stmt|;
name|projectController
operator|.
name|getApplication
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|add
argument_list|(
name|projectController
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|tree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|)
expr_stmt|;
name|projectController
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tree
operator|.
name|translateReverseEngineeringToTree
argument_list|(
name|tree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tree
operator|.
name|expandTree
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

