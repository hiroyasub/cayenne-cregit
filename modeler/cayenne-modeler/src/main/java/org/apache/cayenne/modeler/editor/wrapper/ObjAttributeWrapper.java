begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|wrapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|validation
operator|.
name|ObjAttributeWrapperValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ProjectUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationResult
import|;
end_import

begin_comment
comment|/**  *  A wrapper for a ObjAttribute instance. Allows to add failures, that connected  *  with attribute.  */
end_comment

begin_class
specifier|public
class|class
name|ObjAttributeWrapper
implements|implements
name|Wrapper
argument_list|<
name|ObjAttribute
argument_list|>
block|{
specifier|private
specifier|final
name|ObjAttribute
name|objAttribute
decl_stmt|;
specifier|private
specifier|final
name|ValidationResult
name|validationResult
decl_stmt|;
specifier|private
specifier|final
name|ObjAttributeWrapperValidator
name|validator
init|=
operator|new
name|ObjAttributeWrapperValidator
argument_list|()
decl_stmt|;
comment|// TODO: for now name is only wrapped attribute we validating but this
comment|//       can be extended to other ObjAttribute fields as well
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|ObjAttributeWrapper
parameter_list|(
name|ObjAttribute
name|objAttribute
parameter_list|)
block|{
if|if
condition|(
name|objAttribute
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attribute cannot be null."
argument_list|)
throw|;
block|}
name|this
operator|.
name|objAttribute
operator|=
name|objAttribute
expr_stmt|;
name|validationResult
operator|=
operator|new
name|ValidationResult
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ObjAttribute
name|getValue
parameter_list|()
block|{
return|return
name|objAttribute
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
operator|!
name|validationResult
operator|.
name|hasFailures
argument_list|()
return|;
block|}
comment|/**      * @param column Index of column.      * @return String failure description, null if there is no such failure.      */
specifier|public
name|String
name|getFailureDescription
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|validationResult
operator|.
name|hasFailures
argument_list|(
name|column
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|ValidationFailure
argument_list|>
name|failures
init|=
name|validationResult
operator|.
name|getFailures
argument_list|(
name|column
argument_list|)
decl_stmt|;
comment|// there is only one failure for each column
name|result
operator|=
name|failures
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDescription
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitEdits
parameter_list|()
block|{
if|if
condition|(
name|isValid
argument_list|()
condition|)
block|{
name|ProjectUtil
operator|.
name|setAttributeName
argument_list|(
name|this
operator|.
name|getValue
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Correct ObjAttributeWrapper failures.      */
annotation|@
name|Override
specifier|public
name|void
name|resetEdits
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|validationResult
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ObjEntity
name|getEntity
parameter_list|()
block|{
return|return
name|objAttribute
operator|.
name|getEntity
argument_list|()
return|;
block|}
specifier|public
name|void
name|setEntity
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
name|objAttribute
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
operator|==
literal|null
condition|?
name|objAttribute
operator|.
name|getName
argument_list|()
else|:
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|validator
operator|.
name|validate
argument_list|(
name|this
argument_list|,
name|validationResult
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getParent
parameter_list|()
block|{
return|return
name|objAttribute
operator|.
name|getEntity
argument_list|()
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|Object
name|parent
parameter_list|)
block|{
name|objAttribute
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getJavaClass
parameter_list|()
block|{
return|return
name|objAttribute
operator|.
name|getJavaClass
argument_list|()
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|objAttribute
operator|.
name|getType
argument_list|()
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|objAttribute
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUsedForLocking
parameter_list|()
block|{
return|return
name|objAttribute
operator|.
name|isUsedForLocking
argument_list|()
return|;
block|}
specifier|public
name|void
name|setUsedForLocking
parameter_list|(
name|boolean
name|usedForLocking
parameter_list|)
block|{
name|objAttribute
operator|.
name|setUsedForLocking
argument_list|(
name|usedForLocking
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLazy
parameter_list|()
block|{
return|return
name|objAttribute
operator|.
name|isLazy
argument_list|()
return|;
block|}
specifier|public
name|void
name|setLazy
parameter_list|(
name|boolean
name|lazy
parameter_list|)
block|{
name|objAttribute
operator|.
name|setLazy
argument_list|(
name|lazy
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DbAttribute
name|getDbAttribute
parameter_list|()
block|{
try|try
block|{
return|return
name|objAttribute
operator|.
name|getDbAttribute
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExpressionException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|isInherited
parameter_list|()
block|{
return|return
name|objAttribute
operator|.
name|isInherited
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDbAttributeName
parameter_list|()
block|{
return|return
name|objAttribute
operator|.
name|getDbAttributeName
argument_list|()
return|;
block|}
specifier|public
name|void
name|setDbAttributePath
parameter_list|(
name|String
name|dbAttributePath
parameter_list|)
block|{
name|objAttribute
operator|.
name|setDbAttributePath
argument_list|(
name|dbAttributePath
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDbAttributePath
parameter_list|()
block|{
return|return
name|objAttribute
operator|.
name|getDbAttributePath
argument_list|()
return|;
block|}
block|}
end_class

end_unit

