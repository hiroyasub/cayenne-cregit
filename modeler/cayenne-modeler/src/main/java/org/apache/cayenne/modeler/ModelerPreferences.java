begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|CayenneUserDir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|ExtendedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * ModelerPreferences class supports persistent user preferences. Preferences are saved in  * the user home directory in "<code>$HOME/.cayenne/modeler.preferences</code>" file.  *<p>  *<i>This class is obsolete; its users will be migrated to use preference service.</i>  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|ModelerPreferences
extends|extends
name|ExtendedProperties
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|logObj
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ModelerPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Name of the preferences file. */
specifier|public
specifier|static
specifier|final
name|String
name|PREFERENCES_NAME
init|=
literal|"modeler.preferences"
decl_stmt|;
comment|/** Name of the log file. */
specifier|public
specifier|static
specifier|final
name|String
name|LOGFILE_NAME
init|=
literal|"modeler.log"
decl_stmt|;
comment|// Keys for the preference file.
comment|/** List of the last 4 opened project files. */
specifier|public
specifier|static
specifier|final
name|String
name|LAST_PROJ_FILES
init|=
literal|"Editor.lastSeveralProjectFiles"
decl_stmt|;
comment|/** GUI layout */
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_LAFNAME
init|=
literal|"Editor.lookAndFeel"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_THEMENAME
init|=
literal|"Editor.theme"
decl_stmt|;
comment|/** Log file */
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_LOGFILE_ENABLED
init|=
literal|"Editor.logfileEnabled"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_LOGFILE
init|=
literal|"Editor.logfile"
decl_stmt|;
specifier|protected
specifier|static
name|ModelerPreferences
name|sharedInstance
decl_stmt|;
specifier|protected
name|ModelerPreferences
parameter_list|()
block|{
block|}
comment|/**      * Returns Cayenne preferences singleton.      */
specifier|public
specifier|static
name|ModelerPreferences
name|getPreferences
parameter_list|()
block|{
if|if
condition|(
name|sharedInstance
operator|==
literal|null
condition|)
block|{
name|sharedInstance
operator|=
operator|new
name|ModelerPreferences
argument_list|()
expr_stmt|;
name|sharedInstance
operator|.
name|loadPreferences
argument_list|()
expr_stmt|;
block|}
return|return
name|sharedInstance
return|;
block|}
comment|/**      * Returns preferences directory<code>$HOME/.cayenne</code>. If such directory      * does not exist, it is created as a side effect of this method.      */
specifier|public
name|File
name|preferencesDirectory
parameter_list|()
block|{
return|return
name|CayenneUserDir
operator|.
name|getInstance
argument_list|()
operator|.
name|getDirectory
argument_list|()
return|;
block|}
comment|/**      * Saves preferences. Preferences stored in      *<code>$HOME/.cayenne/modeler.preferences</code> file.      */
specifier|public
name|void
name|storePreferences
parameter_list|()
block|{
name|File
name|prefFile
init|=
operator|new
name|File
argument_list|(
name|preferencesDirectory
argument_list|()
argument_list|,
name|PREFERENCES_NAME
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|prefFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logObj
operator|.
name|debug
argument_list|(
literal|"Cannot save preferences - file "
operator|+
name|prefFile
operator|+
literal|" does not exist"
argument_list|)
expr_stmt|;
return|return;
block|}
name|save
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|prefFile
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logObj
operator|.
name|debug
argument_list|(
literal|"Error saving preferences: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Loads preferences from<code>$HOME/.cayenne/modeler.preferences</code> file.      */
specifier|public
name|void
name|loadPreferences
parameter_list|()
block|{
try|try
block|{
name|File
name|prefsFile
init|=
operator|new
name|File
argument_list|(
name|preferencesDirectory
argument_list|()
argument_list|,
name|PREFERENCES_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|prefsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|prefsFile
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|logObj
operator|.
name|warn
argument_list|(
literal|"Can't create preferences file "
operator|+
name|prefsFile
argument_list|)
expr_stmt|;
block|}
block|}
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|prefsFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logObj
operator|.
name|warn
argument_list|(
literal|"Error creating preferences file."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

