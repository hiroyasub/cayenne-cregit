begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|ObjAttributeTableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|wrapper
operator|.
name|ObjAttributeWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|validation
operator|.
name|ConfigurationNodeValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationResult
import|;
end_import

begin_class
specifier|public
class|class
name|ObjAttributeWrapperValidator
extends|extends
name|ConfigurationNodeValidator
block|{
specifier|public
name|boolean
name|validate
parameter_list|(
name|ObjAttributeWrapper
name|wrapper
parameter_list|,
name|ValidationResult
name|validationResult
parameter_list|)
block|{
if|if
condition|(
name|isAttributeNameOverlapped
argument_list|(
name|wrapper
argument_list|)
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
operator|new
name|AttributeValidationFailure
argument_list|(
name|ObjAttributeTableModel
operator|.
name|OBJ_ATTRIBUTE
argument_list|,
literal|"Duplicate attribute name."
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapper
operator|.
name|isValid
argument_list|()
return|;
block|}
comment|/**      * @return false if entity has attribute with the same name.      */
specifier|private
name|boolean
name|isAttributeNameOverlapped
parameter_list|(
name|ObjAttributeWrapper
name|attr
parameter_list|)
block|{
name|ObjAttribute
name|temp
init|=
name|attr
operator|.
name|getEntity
argument_list|()
operator|.
name|getAttributeMap
argument_list|()
operator|.
name|get
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|temp
operator|!=
literal|null
operator|&&
name|attr
operator|.
name|getValue
argument_list|()
operator|!=
name|temp
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

