begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DomainEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DomainListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgraph
operator|.
name|JGraph
import|;
end_import

begin_comment
comment|/**  * Class for storing information about datadomain's builders.  * Has methods for saving and loading graphs, as well as building graph for  * specified data domain.  * This class is center of all graph management in CM  */
end_comment

begin_class
specifier|public
class|class
name|GraphRegistry
implements|implements
name|DomainListener
block|{
comment|/**      * Main storage of graph builders      */
name|Map
argument_list|<
name|DataChannelDescriptor
argument_list|,
name|GraphMap
argument_list|>
name|graphMaps
decl_stmt|;
specifier|public
name|GraphRegistry
parameter_list|()
block|{
name|graphMaps
operator|=
operator|new
name|HashMap
argument_list|<
name|DataChannelDescriptor
argument_list|,
name|GraphMap
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Builds graph with specified type, or returns existing one      */
specifier|public
name|JGraph
name|loadGraph
parameter_list|(
name|ProjectController
name|mediator
parameter_list|,
name|DataChannelDescriptor
name|domain
parameter_list|,
name|GraphType
name|type
parameter_list|)
block|{
name|GraphMap
name|graphMap
init|=
name|graphMaps
operator|.
name|get
argument_list|(
name|domain
argument_list|)
decl_stmt|;
if|if
condition|(
name|graphMap
operator|==
literal|null
condition|)
block|{
name|graphMap
operator|=
operator|new
name|GraphMap
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|graphMaps
operator|.
name|put
argument_list|(
name|domain
argument_list|,
name|graphMap
argument_list|)
expr_stmt|;
block|}
name|GraphBuilder
name|builder
init|=
name|graphMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|graphMap
operator|.
name|createGraphBuilder
argument_list|(
name|type
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//marking this builder as default
name|graphMap
operator|.
name|setSelectedType
argument_list|(
name|builder
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getGraph
argument_list|()
return|;
block|}
comment|/**      * Gets graph map for specified domain, creating it if needed      */
specifier|public
name|GraphMap
name|getGraphMap
parameter_list|(
name|DataChannelDescriptor
name|domain
parameter_list|)
block|{
name|GraphMap
name|map
init|=
name|graphMaps
operator|.
name|get
argument_list|(
name|domain
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|GraphMap
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|graphMaps
operator|.
name|put
argument_list|(
name|domain
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|public
name|void
name|domainChanged
parameter_list|(
name|DomainEvent
name|e
parameter_list|)
block|{
block|}
name|void
name|unregisterDomain
parameter_list|(
name|DataChannelDescriptor
name|dataChannelDescriptor
parameter_list|)
block|{
name|GraphMap
name|map
init|=
name|graphMaps
operator|.
name|get
argument_list|(
name|dataChannelDescriptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|GraphBuilder
name|builder
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|graphMaps
operator|.
name|remove
argument_list|(
name|dataChannelDescriptor
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes all listeners (and itself) from ProjectController      */
specifier|public
name|void
name|unregister
parameter_list|(
name|ProjectController
name|mediator
parameter_list|)
block|{
name|unregisterDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|removeDomainListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

