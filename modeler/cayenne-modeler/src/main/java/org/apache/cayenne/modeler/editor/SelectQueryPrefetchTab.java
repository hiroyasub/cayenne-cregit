begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|QueryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
operator|.
name|AddPrefetchUndoableEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|EntityTreeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|EntityTreeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ModelerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|image
operator|.
name|FilteredIconFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultCellEditor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JToolBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|AbstractTableModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|DefaultTableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreeModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Subclass of the SelectQueryOrderingTab configured to work with prefetches.  *   */
end_comment

begin_class
specifier|public
class|class
name|SelectQueryPrefetchTab
extends|extends
name|SelectQueryOrderingTab
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JOINT_PREFETCH_SEMANTICS
init|=
literal|"Joint"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DISJOINT_PREFETCH_SEMANTICS
init|=
literal|"Disjoint"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DISJOINT_BY_ID_PREFETCH_SEMANTICS
init|=
literal|"Disjoint by id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UNDEFINED_SEMANTICS
init|=
literal|"Undefined semantics"
decl_stmt|;
specifier|public
name|SelectQueryPrefetchTab
parameter_list|(
name|ProjectController
name|mediator
parameter_list|)
block|{
name|super
argument_list|(
name|mediator
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initFromModel
parameter_list|()
block|{
name|super
operator|.
name|initFromModel
argument_list|()
expr_stmt|;
name|setUpPrefetchBox
argument_list|(
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUpPrefetchBox
parameter_list|(
name|TableColumn
name|column
parameter_list|)
block|{
name|JComboBox
name|prefetchBox
init|=
operator|new
name|JComboBox
argument_list|()
decl_stmt|;
name|prefetchBox
operator|.
name|addItem
argument_list|(
name|JOINT_PREFETCH_SEMANTICS
argument_list|)
expr_stmt|;
name|prefetchBox
operator|.
name|addItem
argument_list|(
name|DISJOINT_PREFETCH_SEMANTICS
argument_list|)
expr_stmt|;
name|prefetchBox
operator|.
name|addItem
argument_list|(
name|DISJOINT_BY_ID_PREFETCH_SEMANTICS
argument_list|)
expr_stmt|;
name|prefetchBox
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getEditorView
argument_list|()
operator|.
name|getEventController
argument_list|()
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellEditor
argument_list|(
operator|new
name|DefaultCellEditor
argument_list|(
name|prefetchBox
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultTableCellRenderer
name|renderer
init|=
operator|new
name|DefaultTableCellRenderer
argument_list|()
decl_stmt|;
name|renderer
operator|.
name|setToolTipText
argument_list|(
literal|"Click for combo box"
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellRenderer
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|JComponent
name|createToolbar
parameter_list|()
block|{
name|JButton
name|add
init|=
operator|new
name|CayenneAction
operator|.
name|CayenneToolbarButton
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|add
operator|.
name|setText
argument_list|(
literal|"Add Prefetch"
argument_list|)
expr_stmt|;
name|Icon
name|addIcon
init|=
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"icon-plus.png"
argument_list|)
decl_stmt|;
name|add
operator|.
name|setIcon
argument_list|(
name|addIcon
argument_list|)
expr_stmt|;
name|add
operator|.
name|setDisabledIcon
argument_list|(
name|FilteredIconFactory
operator|.
name|createDisabledIcon
argument_list|(
name|addIcon
argument_list|)
argument_list|)
expr_stmt|;
name|add
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|String
name|prefetch
init|=
name|getSelectedPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefetch
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|addPrefetch
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|AddPrefetchUndoableEdit
argument_list|(
name|prefetch
argument_list|,
name|SelectQueryPrefetchTab
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|JButton
name|remove
init|=
operator|new
name|CayenneAction
operator|.
name|CayenneToolbarButton
argument_list|(
literal|null
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|remove
operator|.
name|setText
argument_list|(
literal|"Remove Prefetch"
argument_list|)
expr_stmt|;
name|Icon
name|removeIcon
init|=
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"icon-trash.png"
argument_list|)
decl_stmt|;
name|remove
operator|.
name|setIcon
argument_list|(
name|removeIcon
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setDisabledIcon
argument_list|(
name|FilteredIconFactory
operator|.
name|createDisabledIcon
argument_list|(
name|removeIcon
argument_list|)
argument_list|)
expr_stmt|;
name|remove
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|int
name|selection
init|=
name|table
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|selection
operator|<
literal|0
condition|)
block|{
return|return;
block|}
name|String
name|prefetch
init|=
operator|(
name|String
operator|)
name|table
operator|.
name|getModel
argument_list|()
operator|.
name|getValueAt
argument_list|(
name|selection
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|removePrefetch
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|JToolBar
name|toolBar
init|=
operator|new
name|JToolBar
argument_list|()
decl_stmt|;
name|toolBar
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|()
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|setFloatable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|add
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|remove
argument_list|)
expr_stmt|;
return|return
name|toolBar
return|;
block|}
specifier|protected
name|TreeModel
name|createBrowserModel
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|EntityTreeModel
name|treeModel
init|=
operator|new
name|EntityTreeModel
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|treeModel
operator|.
name|setFilter
argument_list|(
operator|new
name|EntityTreeFilter
argument_list|()
block|{
specifier|public
name|boolean
name|attributeMatch
parameter_list|(
name|Object
name|node
parameter_list|,
name|Attribute
name|attr
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|relationshipMatch
parameter_list|(
name|Object
name|node
parameter_list|,
name|Relationship
name|rel
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|treeModel
return|;
block|}
specifier|protected
name|TableModel
name|createTableModel
parameter_list|()
block|{
return|return
operator|new
name|PrefetchModel
argument_list|()
return|;
block|}
specifier|public
name|void
name|addPrefetch
parameter_list|(
name|String
name|prefetch
parameter_list|)
block|{
comment|// check if such prefetch already exists
if|if
condition|(
operator|!
name|selectQuery
operator|.
name|getPrefetchesMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|selectQuery
operator|.
name|getPrefetchesMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|prefetch
argument_list|)
condition|)
block|{
return|return;
block|}
comment|//default value id disjoint
name|selectQuery
operator|.
name|addPrefetch
argument_list|(
name|prefetch
argument_list|,
name|getPrefetchType
argument_list|(
name|DISJOINT_PREFETCH_SEMANTICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset the model, since it is immutable
name|table
operator|.
name|setModel
argument_list|(
name|createTableModel
argument_list|()
argument_list|)
expr_stmt|;
name|setUpPrefetchBox
argument_list|(
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireQueryEvent
argument_list|(
operator|new
name|QueryEvent
argument_list|(
name|this
argument_list|,
name|selectQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removePrefetch
parameter_list|(
name|String
name|prefetch
parameter_list|)
block|{
name|selectQuery
operator|.
name|removePrefetch
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
comment|// reset the model, since it is immutable
name|table
operator|.
name|setModel
argument_list|(
name|createTableModel
argument_list|()
argument_list|)
expr_stmt|;
name|setUpPrefetchBox
argument_list|(
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireQueryEvent
argument_list|(
operator|new
name|QueryEvent
argument_list|(
name|this
argument_list|,
name|selectQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isToMany
parameter_list|(
name|String
name|prefetch
parameter_list|)
block|{
if|if
condition|(
name|selectQuery
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Object
name|root
init|=
name|selectQuery
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// totally invalid path would result in ExpressionException
try|try
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
name|prefetch
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|exp
operator|.
name|evaluate
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|Relationship
condition|)
block|{
return|return
operator|(
operator|(
name|Relationship
operator|)
name|object
operator|)
operator|.
name|isToMany
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ExpressionException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|int
name|getPrefetchType
parameter_list|(
name|String
name|semantics
parameter_list|)
block|{
switch|switch
condition|(
name|semantics
condition|)
block|{
case|case
literal|"Joint"
case|:
return|return
literal|1
return|;
case|case
literal|"Disjoint"
case|:
return|return
literal|2
return|;
case|case
literal|"Disjoint by id"
case|:
return|return
literal|3
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
specifier|protected
name|String
name|getPrefetchTypeString
parameter_list|(
name|int
name|semantics
parameter_list|)
block|{
switch|switch
condition|(
name|semantics
condition|)
block|{
case|case
literal|1
case|:
return|return
name|JOINT_PREFETCH_SEMANTICS
return|;
case|case
literal|2
case|:
return|return
name|DISJOINT_PREFETCH_SEMANTICS
return|;
case|case
literal|3
case|:
return|return
name|DISJOINT_BY_ID_PREFETCH_SEMANTICS
return|;
default|default:
return|return
name|UNDEFINED_SEMANTICS
return|;
block|}
block|}
comment|/**      * A table model for the Prefetch table.      */
specifier|final
class|class
name|PrefetchModel
extends|extends
name|AbstractTableModel
block|{
name|String
index|[]
name|prefetches
decl_stmt|;
name|PrefetchModel
parameter_list|()
block|{
if|if
condition|(
name|selectQuery
operator|!=
literal|null
condition|)
block|{
name|prefetches
operator|=
operator|new
name|String
index|[
name|selectQuery
operator|.
name|getPrefetchesMap
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|selectQuery
operator|.
name|getPrefetchesMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|prefetches
index|[
name|i
index|]
operator|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
operator|(
name|prefetches
operator|!=
literal|null
operator|)
condition|?
name|prefetches
operator|.
name|length
else|:
literal|0
return|;
block|}
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
return|return
name|prefetches
index|[
name|row
index|]
return|;
case|case
literal|1
case|:
return|return
name|isToMany
argument_list|(
name|prefetches
index|[
name|row
index|]
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
case|case
literal|2
case|:
return|return
name|getPrefetchTypeString
argument_list|(
name|selectQuery
operator|.
name|getPrefetchesMap
argument_list|()
operator|.
name|get
argument_list|(
name|prefetches
index|[
name|row
index|]
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Invalid column: "
operator|+
name|column
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
return|return
name|String
operator|.
name|class
return|;
case|case
literal|1
case|:
return|return
name|Boolean
operator|.
name|class
return|;
case|case
literal|2
case|:
return|return
name|String
operator|.
name|class
return|;
default|default:
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Invalid column: "
operator|+
name|column
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|"Prefetch Path"
return|;
case|case
literal|1
case|:
return|return
literal|"To Many"
return|;
case|case
literal|2
case|:
return|return
literal|"Prefetch Type"
return|;
default|default:
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Invalid columnw: "
operator|+
name|column
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
return|return
name|column
operator|==
literal|2
condition|?
literal|true
else|:
literal|false
return|;
block|}
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|2
case|:
name|selectQuery
operator|.
name|addPrefetch
argument_list|(
name|prefetches
index|[
name|row
index|]
argument_list|,
name|getPrefetchType
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_class

end_unit

