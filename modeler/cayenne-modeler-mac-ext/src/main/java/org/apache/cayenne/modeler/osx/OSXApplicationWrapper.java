begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|osx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|apple
operator|.
name|eawt
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class wraps apple {@link com.apple.eawt.Application} class and dynamically  * proxying it's lifecycle handlers setup.  *<p>  * This code exists to support both Java 8 and 9, as handler interfaces where incompatibly moved  * to other package between these versions.  *<p>  * See<a href="https://bugs.openjdk.java.net/browse/JDK-8160437">JDK-8160437 issue</a> for details.  *  * @see #setAboutHandler(Runnable) run action on "About App" menu item select  * @see #setPreferencesHandler(Runnable) run action on "Preferences..." menu item select  * @see #setQuitHandler(Consumer) run action on "Quit App" menu item select  *  * @see OSXQuitResponseWrapper  *  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|OSXApplicationWrapper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OSXApplicationWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// package for handler classes for Java 8 and older
specifier|private
specifier|static
specifier|final
name|String
name|JAVA8_PACKAGE
init|=
literal|"com.apple.eawt."
decl_stmt|;
comment|// package for handler classes for Java 9 and newer
specifier|private
specifier|static
specifier|final
name|String
name|JAVA9_PACKAGE
init|=
literal|"java.awt.desktop."
decl_stmt|;
specifier|private
specifier|final
name|Application
name|application
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|aboutHandlerClass
decl_stmt|;
specifier|private
name|Method
name|setAboutHandler
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|preferencesHandlerClass
decl_stmt|;
specifier|private
name|Method
name|setPreferencesHandler
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|quitHandlerClass
decl_stmt|;
specifier|private
name|Method
name|setQuitHandler
decl_stmt|;
specifier|public
name|OSXApplicationWrapper
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|this
operator|.
name|application
operator|=
name|application
expr_stmt|;
name|initMethods
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setPreferencesHandler
parameter_list|(
name|Runnable
name|action
parameter_list|)
block|{
name|setHandler
argument_list|(
name|setPreferencesHandler
argument_list|,
name|preferencesHandlerClass
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAboutHandler
parameter_list|(
name|Runnable
name|action
parameter_list|)
block|{
name|setHandler
argument_list|(
name|setAboutHandler
argument_list|,
name|aboutHandlerClass
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setQuitHandler
parameter_list|(
name|Consumer
argument_list|<
name|OSXQuitResponseWrapper
argument_list|>
name|action
parameter_list|)
block|{
name|InvocationHandler
name|handler
init|=
parameter_list|(
name|proxy
parameter_list|,
name|method
parameter_list|,
name|args
parameter_list|)
lambda|->
block|{
comment|// args: 0 - event, 1 - quitResponse
name|action
operator|.
name|accept
argument_list|(
operator|new
name|OSXQuitResponseWrapper
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
decl_stmt|;
name|Object
name|proxy
init|=
name|createProxy
argument_list|(
name|quitHandlerClass
argument_list|,
name|handler
argument_list|)
decl_stmt|;
try|try
block|{
name|setQuitHandler
operator|.
name|invoke
argument_list|(
name|application
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Unable to call "
operator|+
name|setQuitHandler
operator|.
name|getName
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find required handlers' methods and classes      */
specifier|private
name|void
name|initMethods
parameter_list|()
block|{
name|aboutHandlerClass
operator|=
name|getHandlerClass
argument_list|(
literal|"AboutHandler"
argument_list|)
expr_stmt|;
name|setAboutHandler
operator|=
name|getMethod
argument_list|(
literal|"setAboutHandler"
argument_list|,
name|aboutHandlerClass
argument_list|)
expr_stmt|;
name|preferencesHandlerClass
operator|=
name|getHandlerClass
argument_list|(
literal|"PreferencesHandler"
argument_list|)
expr_stmt|;
name|setPreferencesHandler
operator|=
name|getMethod
argument_list|(
literal|"setPreferencesHandler"
argument_list|,
name|preferencesHandlerClass
argument_list|)
expr_stmt|;
name|quitHandlerClass
operator|=
name|getHandlerClass
argument_list|(
literal|"QuitHandler"
argument_list|)
expr_stmt|;
name|setQuitHandler
operator|=
name|getMethod
argument_list|(
literal|"setQuitHandler"
argument_list|,
name|quitHandlerClass
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setHandler
parameter_list|(
name|Method
name|setMethod
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|handlerClass
parameter_list|,
name|Runnable
name|action
parameter_list|)
block|{
name|InvocationHandler
name|handler
init|=
parameter_list|(
name|proxy
parameter_list|,
name|method
parameter_list|,
name|args
parameter_list|)
lambda|->
block|{
name|action
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
decl_stmt|;
name|Object
name|proxy
init|=
name|createProxy
argument_list|(
name|handlerClass
argument_list|,
name|handler
argument_list|)
decl_stmt|;
try|try
block|{
name|setMethod
operator|.
name|invoke
argument_list|(
name|application
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Unable to call "
operator|+
name|setMethod
operator|.
name|getName
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Object
name|createProxy
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|handlerClass
parameter_list|,
name|InvocationHandler
name|handler
parameter_list|)
block|{
return|return
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|OSXApplicationWrapper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|handlerClass
block|}
argument_list|,
name|handler
argument_list|)
return|;
block|}
specifier|private
name|Method
name|getMethod
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
block|{
try|try
block|{
return|return
name|application
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|name
argument_list|,
name|parameters
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Unable to find method "
operator|+
name|name
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getHandlerClass
parameter_list|(
name|String
name|className
parameter_list|)
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|JAVA8_PACKAGE
operator|+
name|className
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|JAVA9_PACKAGE
operator|+
name|className
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex2
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

