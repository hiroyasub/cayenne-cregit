begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|osx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|DefaultWidgetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|syntax
operator|.
name|jedit
operator|.
name|DefaultInputHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|syntax
operator|.
name|jedit
operator|.
name|JEditTextArea
import|;
end_import

begin_class
specifier|public
class|class
name|OSXWidgetFactory
extends|extends
name|DefaultWidgetFactory
block|{
annotation|@
name|Override
specifier|public
name|JEditTextArea
name|createJEditTextArea
parameter_list|()
block|{
name|JEditTextArea
name|area
init|=
name|super
operator|.
name|createJEditTextArea
argument_list|()
decl_stmt|;
name|area
operator|.
name|setInputHandler
argument_list|(
operator|new
name|MacInputHandler
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|area
return|;
block|}
comment|/**      * Class for enabling Mac OS X keys      */
specifier|private
specifier|static
class|class
name|MacInputHandler
extends|extends
name|DefaultInputHandler
block|{
name|MacInputHandler
parameter_list|()
block|{
name|addDefaultKeyBindings
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addDefaultKeyBindings
parameter_list|()
block|{
name|addKeyBinding
argument_list|(
literal|"BACK_SPACE"
argument_list|,
name|BACKSPACE
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"M+BACK_SPACE"
argument_list|,
name|BACKSPACE_WORD
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"DELETE"
argument_list|,
name|DELETE
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"M+DELETE"
argument_list|,
name|DELETE_WORD
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"ENTER"
argument_list|,
name|INSERT_BREAK
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"TAB"
argument_list|,
name|INSERT_TAB
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"INSERT"
argument_list|,
name|OVERWRITE
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"M+\\"
argument_list|,
name|TOGGLE_RECT
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"HOME"
argument_list|,
name|HOME
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"END"
argument_list|,
name|END
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"M+A"
argument_list|,
name|SELECT_ALL
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"S+HOME"
argument_list|,
name|SELECT_HOME
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"S+END"
argument_list|,
name|SELECT_END
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"M+HOME"
argument_list|,
name|DOCUMENT_HOME
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"M+END"
argument_list|,
name|DOCUMENT_END
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"MS+HOME"
argument_list|,
name|SELECT_DOC_HOME
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"MS+END"
argument_list|,
name|SELECT_DOC_END
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"PAGE_UP"
argument_list|,
name|PREV_PAGE
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"PAGE_DOWN"
argument_list|,
name|NEXT_PAGE
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"S+PAGE_UP"
argument_list|,
name|SELECT_PREV_PAGE
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"S+PAGE_DOWN"
argument_list|,
name|SELECT_NEXT_PAGE
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"LEFT"
argument_list|,
name|PREV_CHAR
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"S+LEFT"
argument_list|,
name|SELECT_PREV_CHAR
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"A+LEFT"
argument_list|,
name|PREV_WORD
argument_list|)
expr_stmt|;
comment|// option + left
name|addKeyBinding
argument_list|(
literal|"AS+LEFT"
argument_list|,
name|SELECT_PREV_WORD
argument_list|)
expr_stmt|;
comment|// option + shift + left
name|addKeyBinding
argument_list|(
literal|"RIGHT"
argument_list|,
name|NEXT_CHAR
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"S+RIGHT"
argument_list|,
name|SELECT_NEXT_CHAR
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"A+RIGHT"
argument_list|,
name|NEXT_WORD
argument_list|)
expr_stmt|;
comment|// option + right
name|addKeyBinding
argument_list|(
literal|"AS+RIGHT"
argument_list|,
name|SELECT_NEXT_WORD
argument_list|)
expr_stmt|;
comment|// option + shift + right
name|addKeyBinding
argument_list|(
literal|"UP"
argument_list|,
name|PREV_LINE
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"S+UP"
argument_list|,
name|SELECT_PREV_LINE
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"DOWN"
argument_list|,
name|NEXT_LINE
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"S+DOWN"
argument_list|,
name|SELECT_NEXT_LINE
argument_list|)
expr_stmt|;
name|addKeyBinding
argument_list|(
literal|"M+ENTER"
argument_list|,
name|REPEAT
argument_list|)
expr_stmt|;
comment|// Clipboard
name|addKeyBinding
argument_list|(
literal|"M+C"
argument_list|,
name|CLIP_COPY
argument_list|)
expr_stmt|;
comment|// command + c
name|addKeyBinding
argument_list|(
literal|"M+V"
argument_list|,
name|CLIP_PASTE
argument_list|)
expr_stmt|;
comment|// command + v
name|addKeyBinding
argument_list|(
literal|"M+X"
argument_list|,
name|CLIP_CUT
argument_list|)
expr_stmt|;
comment|// command + x
block|}
annotation|@
name|Override
specifier|public
name|void
name|keyTyped
parameter_list|(
name|KeyEvent
name|evt
parameter_list|)
block|{
comment|// keys pressed with command key shouldn't generate text
name|int
name|modifiers
init|=
name|evt
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|modifiers
operator|&
name|KeyEvent
operator|.
name|META_MASK
operator|)
operator|==
literal|0
condition|)
block|{
name|super
operator|.
name|keyTyped
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

