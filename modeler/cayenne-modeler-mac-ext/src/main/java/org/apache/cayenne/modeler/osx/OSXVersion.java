begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|osx
package|;
end_package

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|OSXVersion
block|{
specifier|public
specifier|static
specifier|final
name|OSXVersion
name|UNKNOWN
init|=
operator|new
name|OSXVersion
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|OSXVersion
name|CATALINA
init|=
operator|new
name|OSXVersion
argument_list|(
literal|10
argument_list|,
literal|15
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|OSXVersion
name|BIG_SUR
init|=
operator|new
name|OSXVersion
argument_list|(
literal|10
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|major
decl_stmt|;
specifier|private
specifier|final
name|int
name|minor
decl_stmt|;
specifier|public
specifier|static
name|OSXVersion
name|fromSystemProperties
parameter_list|()
block|{
comment|// sanity check in case this code executed not on macOS
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|osName
operator|.
name|contains
argument_list|(
literal|"mac"
argument_list|)
condition|)
block|{
return|return
name|UNKNOWN
return|;
block|}
name|String
name|osVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.version"
argument_list|)
decl_stmt|;
name|String
index|[]
name|osVersionComponents
init|=
name|osVersion
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|osVersionComponents
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
return|return
name|UNKNOWN
return|;
block|}
try|try
block|{
name|int
name|major
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|osVersionComponents
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|minor
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|osVersionComponents
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|OSXVersion
argument_list|(
name|major
argument_list|,
name|minor
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
name|UNKNOWN
return|;
block|}
block|}
specifier|public
name|OSXVersion
parameter_list|(
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|)
block|{
name|this
operator|.
name|major
operator|=
name|major
expr_stmt|;
name|this
operator|.
name|minor
operator|=
name|minor
expr_stmt|;
block|}
specifier|public
name|boolean
name|gt
parameter_list|(
name|OSXVersion
name|version
parameter_list|)
block|{
return|return
name|getMajor
argument_list|()
operator|>=
name|version
operator|.
name|getMajor
argument_list|()
operator|&&
name|getMinor
argument_list|()
operator|>
name|version
operator|.
name|getMinor
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|eq
parameter_list|(
name|OSXVersion
name|version
parameter_list|)
block|{
return|return
name|getMajor
argument_list|()
operator|==
name|version
operator|.
name|getMajor
argument_list|()
operator|&&
name|getMinor
argument_list|()
operator|==
name|version
operator|.
name|getMinor
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMajor
parameter_list|()
block|{
return|return
name|major
return|;
block|}
specifier|public
name|int
name|getMinor
parameter_list|()
block|{
return|return
name|minor
return|;
block|}
block|}
end_class

end_unit

