begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|osx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Small wrapper around QuitResponse class that can reside in different packages:  * com.apple.eawt.QuitResponse in JDK 8 and java.awt.desktop.QuitResponse in JDK 9.  * Luckily it has same signature so we can dynamically resolve it's methods.  *  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|OSXQuitResponseWrapper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OSXQuitResponseWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Method
name|performQuit
decl_stmt|;
specifier|private
name|Method
name|cancelQuit
decl_stmt|;
specifier|private
specifier|final
name|Object
name|quitResponse
decl_stmt|;
specifier|public
name|OSXQuitResponseWrapper
parameter_list|(
name|Object
name|quitResponse
parameter_list|)
block|{
name|this
operator|.
name|quitResponse
operator|=
name|quitResponse
expr_stmt|;
try|try
block|{
name|performQuit
operator|=
name|quitResponse
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"performQuit"
argument_list|)
expr_stmt|;
name|cancelQuit
operator|=
name|quitResponse
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"cancelQuit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Unable to find methods for quit response"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|performQuit
parameter_list|()
block|{
name|safePerform
argument_list|(
name|performQuit
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|cancelQuit
parameter_list|()
block|{
name|safePerform
argument_list|(
name|cancelQuit
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|safePerform
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|quitResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Unable to call "
operator|+
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

