begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|InvocationTest
extends|extends
name|TestCase
block|{
specifier|private
name|String
name|_methodName
init|=
literal|"myListenerMethod"
decl_stmt|;
specifier|public
name|void
name|testEqualsReflexive
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Invocation
name|inv0
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|inv0
argument_list|,
name|inv0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEqualsSymmetric
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Invocation
name|inv01
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|Invocation
name|inv02
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|inv01
argument_list|,
name|inv02
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|inv02
argument_list|,
name|inv01
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEqualsTransitive
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Invocation
name|inv01
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|Invocation
name|inv02
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|Invocation
name|inv03
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|inv01
argument_list|,
name|inv02
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|inv02
argument_list|,
name|inv03
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|inv01
argument_list|,
name|inv03
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEqualsNull
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Invocation
name|inv0
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|inv0
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEqualsDifferentMethods
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Invocation
name|inv0
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|Invocation
name|inv1
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|inv0
operator|.
name|equals
argument_list|(
name|inv1
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEqualsNoVsOneArg
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Invocation
name|inv0
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|Invocation
name|inv1
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|inv0
operator|.
name|equals
argument_list|(
name|inv1
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddToSet
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|HashSet
name|set
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Invocation
name|inv0
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|inv0
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|inv0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddTwo
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Set
name|set
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Invocation
name|inv01
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|Invocation
name|inv02
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|inv01
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|inv02
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEmptyParamTypes
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
try|try
block|{
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testNullParamTypes0
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
try|try
block|{
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|,
operator|new
name|Class
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testNullParamTypes1
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
try|try
block|{
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testFireNoArgument
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Invocation
name|inv0
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|inv0
operator|.
name|fire
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFireOneArgument
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Invocation
name|inv1
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|inv1
operator|.
name|fire
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFireWrongArgumentCount0
parameter_list|()
throws|throws
name|Exception
block|{
name|Invocation
name|inv0
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|)
decl_stmt|;
try|try
block|{
name|inv0
operator|.
name|fire
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testFireWrongArgumentCount1
parameter_list|()
throws|throws
name|Exception
block|{
name|Invocation
name|inv1
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|inv1
operator|.
name|fire
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testFireWrongArgumentCount2
parameter_list|()
throws|throws
name|Exception
block|{
name|Invocation
name|inv1
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|inv1
operator|.
name|fire
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testFireNullArgArray
parameter_list|()
throws|throws
name|Exception
block|{
name|Invocation
name|inv1
init|=
operator|new
name|Invocation
argument_list|(
name|this
argument_list|,
name|_methodName
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|inv1
operator|.
name|fire
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testGarbageCollection
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
comment|// create an invocation with an listener that will be garbage collected
name|Invocation
name|inv0
init|=
operator|new
name|Invocation
argument_list|(
operator|new
name|String
argument_list|()
argument_list|,
literal|"toString"
argument_list|)
decl_stmt|;
comment|// (hopefully) make the listener go away
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|inv0
operator|.
name|fire
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// these methods exist for the test of Invocation equality
specifier|public
name|void
name|myListenerMethod
parameter_list|()
block|{
block|}
specifier|public
name|void
name|myListenerMethod
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

