begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_comment
comment|/**  * Defines constants for the possible values of ObjRelationship delete rules.  *   */
end_comment

begin_class
specifier|public
class|class
name|DeleteRule
block|{
specifier|public
specifier|static
specifier|final
name|int
name|NO_ACTION
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NO_ACTION_NAME
init|=
literal|"No Action"
decl_stmt|;
comment|/**       * Remove the reference that the destination has to this source (if the       * inverse relationship is toOne, nullify, if toMany, remove the source       * object)      */
specifier|public
specifier|static
specifier|final
name|int
name|NULLIFY
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NULLIFY_NAME
init|=
literal|"Nullify"
decl_stmt|;
comment|/** Delete the destination object(s)      */
specifier|public
specifier|static
specifier|final
name|int
name|CASCADE
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CASCADE_NAME
init|=
literal|"Cascade"
decl_stmt|;
comment|/** If the relationship has any objects (toOne or toMany), deny the delete.        * (Destination objects would therefore have to be deleted manually first)      */
specifier|public
specifier|static
specifier|final
name|int
name|DENY
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DENY_NAME
init|=
literal|"Deny"
decl_stmt|;
comment|/**      * Default delete rule for one-to-many relationships. It is used when new rels are      * created via modeler, or when synchrozining Obj- and DbEntities      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_DELETE_RULE_TO_MANY
init|=
name|DeleteRule
operator|.
name|DENY
decl_stmt|;
comment|/**      * Default delete rule for many-to-one relationships. It is used when new rels are      * created via modeler, or when synchrozining Obj- and DbEntities      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_DELETE_RULE_TO_ONE
init|=
name|DeleteRule
operator|.
name|NULLIFY
decl_stmt|;
comment|/**       * Returns String label for a delete rule state. Used for save/load (xml),      * display in modeler etc. Must remain the same, or else great care taken      * with loading old maps.      */
specifier|public
specifier|static
name|String
name|deleteRuleName
parameter_list|(
name|int
name|deleteRule
parameter_list|)
block|{
switch|switch
condition|(
name|deleteRule
condition|)
block|{
case|case
name|DeleteRule
operator|.
name|NULLIFY
case|:
return|return
name|NULLIFY_NAME
return|;
case|case
name|DeleteRule
operator|.
name|CASCADE
case|:
return|return
name|CASCADE_NAME
return|;
case|case
name|DeleteRule
operator|.
name|DENY
case|:
return|return
name|DENY_NAME
return|;
default|default :
return|return
name|NO_ACTION_NAME
return|;
block|}
block|}
comment|/**      * Translates a possible delete rule name (typically returned from      * deleteRuleName at some stage), into a deleteRule constant      */
specifier|public
specifier|static
name|int
name|deleteRuleForName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|DENY_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|DENY
return|;
block|}
if|else if
condition|(
name|CASCADE_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|CASCADE
return|;
block|}
if|else if
condition|(
name|NULLIFY_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|NULLIFY
return|;
block|}
return|return
name|NO_ACTION
return|;
block|}
block|}
end_class

end_unit

