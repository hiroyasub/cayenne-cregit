begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_comment
comment|/**  * Invocation represents a dynamic method invocation bound to a specific target. The  * target is kept with a WeakReference and can therefore be reclaimed by the Garbage  * Collector.  *   */
end_comment

begin_class
specifier|public
class|class
name|Invocation
block|{
specifier|private
name|WeakReference
name|_target
decl_stmt|;
specifier|private
name|Method
name|_method
decl_stmt|;
specifier|private
name|Class
index|[]
name|_parameterTypes
decl_stmt|;
comment|/**      * Prevent use of empty default constructor      */
specifier|private
name|Invocation
parameter_list|()
block|{
block|}
comment|/**      * Constructor for an Invocation without arguments in the target's method.      *       * @see #Invocation(Object, String, Class[])      */
specifier|public
name|Invocation
parameter_list|(
name|Object
name|target
parameter_list|,
name|String
name|methodName
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
name|this
argument_list|(
name|target
argument_list|,
name|methodName
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for an Invocation with a single argument in the target's method.      *       * @see #Invocation(Object, String, Class[])      */
specifier|public
name|Invocation
parameter_list|(
name|Object
name|target
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Class
name|parameterType
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
name|this
argument_list|(
name|target
argument_list|,
name|methodName
argument_list|,
operator|new
name|Class
index|[]
block|{
name|parameterType
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for an Invocation with arbitrary arguments in the target's method.      *       * @param target      * @param methodName      * @param parameterTypes      * @throws NoSuchMethodException if<code>methodName</code> could not be found in      *             the target      * @throws IllegalArgumentException if target or methodName are<code>null</code>,      *             or parameterTypes is empty or contains<code>null</code> elements      */
specifier|public
name|Invocation
parameter_list|(
name|Object
name|target
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Class
index|[]
name|parameterTypes
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"target argument must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|methodName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"method name must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|parameterTypes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parameterTypes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|parameterTypes
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parameter type["
operator|+
name|i
operator|+
literal|"] must not be null"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parameter types must not be empty"
argument_list|)
throw|;
block|}
block|}
comment|// allow access to public methods of inaccessible classes, if such methods were
comment|// declared in a public interface
name|_method
operator|=
name|lookupMethodInHierarchy
argument_list|(
name|target
operator|.
name|getClass
argument_list|()
argument_list|,
name|methodName
argument_list|,
name|parameterTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|_method
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchMethodException
argument_list|(
literal|"No such method: "
operator|+
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|methodName
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|isAccessible
argument_list|(
name|_method
argument_list|)
condition|)
block|{
name|_method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|_parameterTypes
operator|=
name|parameterTypes
expr_stmt|;
name|_target
operator|=
operator|new
name|WeakReference
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
name|Method
name|lookupMethodInHierarchy
parameter_list|(
name|Class
name|objectClass
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Class
index|[]
name|parameterTypes
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchMethodException
block|{
try|try
block|{
return|return
name|objectClass
operator|.
name|getDeclaredMethod
argument_list|(
name|methodName
argument_list|,
name|parameterTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|Class
name|superClass
init|=
name|objectClass
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superClass
operator|==
literal|null
operator|||
name|superClass
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return
name|lookupMethodInHierarchy
argument_list|(
name|superClass
argument_list|,
name|methodName
argument_list|,
name|parameterTypes
argument_list|)
return|;
block|}
block|}
comment|/**      * Invoke the target's method without any arguments.      *       * @see #fire(Object[])      */
specifier|public
name|boolean
name|fire
parameter_list|()
block|{
return|return
name|this
operator|.
name|fire
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Invoke the target's method with a single argument.      *       * @param argument an object passed to the target's method      * @see #fire(Object[])      */
specifier|public
name|boolean
name|fire
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
return|return
name|this
operator|.
name|fire
argument_list|(
operator|new
name|Object
index|[]
block|{
name|argument
block|}
argument_list|)
return|;
block|}
comment|/**      * Invoke the target's method with an arbitrary number of arguments. The number of      * arguments must be consistent with the arguments given at construction time of this      * Invocation.      *       * @param arguments an array of objects passed to the target's method      * @return<code>true</code> if invocation of the method succeeded, otherwise      *<code>false</code>.      * @throws IllegalArgumentException if the passed arguments are inconsistent with the      *             arguments passed to this instance's constructor      * @see #fire(Object[])      */
specifier|public
name|boolean
name|fire
parameter_list|(
name|Object
index|[]
name|arguments
parameter_list|)
block|{
if|if
condition|(
name|_parameterTypes
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|arguments
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"arguments unexpectedly != null"
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|arguments
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"arguments must not be null"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|_parameterTypes
operator|.
name|length
operator|!=
name|arguments
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"inconsistent number of arguments: expected"
operator|+
name|_parameterTypes
operator|.
name|length
operator|+
literal|", got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
name|Object
name|currentTarget
init|=
name|_target
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTarget
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|_method
operator|.
name|invoke
argument_list|(
name|currentTarget
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
comment|// this is the only type of exception that can be rethrown, since
comment|// listener can have a valid need to respond to an event with exception,
comment|// and this does not indicate that it is being in invalid state
name|Throwable
name|cause
init|=
name|ite
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// all other exceptions indicate propblems with the listener,
comment|// so return invalid status
return|return
literal|false
return|;
block|}
block|}
comment|/**      * @see Object#equals(java.lang.Object)      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|(
name|obj
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|Invocation
name|otherInvocation
init|=
operator|(
name|Invocation
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|_method
operator|.
name|equals
argument_list|(
name|otherInvocation
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|Object
name|otherTarget
init|=
name|otherInvocation
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|Object
name|target
init|=
name|_target
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|target
operator|==
literal|null
operator|)
operator|&&
operator|(
name|otherTarget
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|(
name|target
operator|==
literal|null
operator|)
operator|&&
operator|(
name|otherTarget
operator|!=
literal|null
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
return|return
name|target
operator|.
name|equals
argument_list|(
name|otherTarget
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
comment|/**      * @see Object#hashCode()      */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// IMPORTANT: DO NOT include Invocation target into whatever
comment|// algorithm is used to compute hashCode, since it is using a
comment|// WeakReference and can be released at a later time, altering
comment|// hashCode, and breaking collections using Invocation as a key
comment|// (e.g. event DispatchQueue)
comment|// TODO: use Jakarta commons HashBuilder
name|int
name|hash
init|=
literal|42
decl_stmt|,
name|hashMultiplier
init|=
literal|59
decl_stmt|;
return|return
name|hash
operator|*
name|hashMultiplier
operator|+
name|_method
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * @return the method to be invoked on the target      */
specifier|public
name|Method
name|getMethod
parameter_list|()
block|{
return|return
name|_method
return|;
block|}
comment|/**      * @return the target object of this Invocation      */
specifier|public
name|Object
name|getTarget
parameter_list|()
block|{
return|return
name|_target
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * @return an array of Classes describing the target method's parameters      */
specifier|public
name|Class
index|[]
name|getParameterTypes
parameter_list|()
block|{
return|return
name|_parameterTypes
return|;
block|}
block|}
end_class

end_unit

