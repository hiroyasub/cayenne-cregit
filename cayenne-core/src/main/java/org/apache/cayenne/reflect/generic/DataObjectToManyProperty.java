begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ValueHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ArcProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToManyProperty
import|;
end_import

begin_comment
comment|/**  * @since 3.0  */
end_comment

begin_class
class|class
name|DataObjectToManyProperty
extends|extends
name|DataObjectBaseProperty
implements|implements
name|ToManyProperty
block|{
specifier|protected
name|ObjRelationship
name|relationship
decl_stmt|;
specifier|protected
name|String
name|reverseName
decl_stmt|;
specifier|protected
name|String
name|reverseDbPath
decl_stmt|;
specifier|protected
name|ClassDescriptor
name|targetDescriptor
decl_stmt|;
specifier|protected
name|Fault
name|fault
decl_stmt|;
name|DataObjectToManyProperty
parameter_list|(
name|ObjRelationship
name|relationship
parameter_list|,
name|ClassDescriptor
name|targetDescriptor
parameter_list|,
name|Fault
name|fault
parameter_list|)
block|{
name|this
operator|.
name|relationship
operator|=
name|relationship
expr_stmt|;
name|this
operator|.
name|targetDescriptor
operator|=
name|targetDescriptor
expr_stmt|;
name|this
operator|.
name|reverseName
operator|=
name|relationship
operator|.
name|getReverseRelationshipName
argument_list|()
expr_stmt|;
name|this
operator|.
name|fault
operator|=
name|fault
expr_stmt|;
block|}
specifier|public
name|ArcProperty
name|getComplimentaryReverseArc
parameter_list|()
block|{
return|return
name|reverseName
operator|!=
literal|null
condition|?
operator|(
name|ArcProperty
operator|)
name|targetDescriptor
operator|.
name|getProperty
argument_list|(
name|reverseName
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|ClassDescriptor
name|getTargetDescriptor
parameter_list|()
block|{
return|return
name|targetDescriptor
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getComplimentaryReverseDbRelationshipPath
parameter_list|()
block|{
if|if
condition|(
name|reverseDbPath
operator|==
literal|null
condition|)
block|{
name|reverseDbPath
operator|=
name|relationship
operator|.
name|getReverseDbRelationshipPath
argument_list|()
expr_stmt|;
block|}
return|return
name|reverseDbPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|relationship
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|ObjRelationship
name|getRelationship
parameter_list|()
block|{
return|return
name|relationship
return|;
block|}
specifier|public
name|void
name|addTarget
parameter_list|(
name|Object
name|source
parameter_list|,
name|Object
name|target
parameter_list|,
name|boolean
name|setReverse
parameter_list|)
throws|throws
name|PropertyException
block|{
try|try
block|{
name|toDataObject
argument_list|(
name|source
argument_list|)
operator|.
name|addToManyTarget
argument_list|(
name|getName
argument_list|()
argument_list|,
name|toDataObject
argument_list|(
name|target
argument_list|)
argument_list|,
name|setReverse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyException
argument_list|(
literal|"Error setting to-many DataObject property: "
operator|+
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|source
argument_list|,
name|th
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|removeTarget
parameter_list|(
name|Object
name|source
parameter_list|,
name|Object
name|target
parameter_list|,
name|boolean
name|setReverse
parameter_list|)
throws|throws
name|PropertyException
block|{
try|try
block|{
name|toDataObject
argument_list|(
name|source
argument_list|)
operator|.
name|removeToManyTarget
argument_list|(
name|getName
argument_list|()
argument_list|,
name|toDataObject
argument_list|(
name|target
argument_list|)
argument_list|,
name|setReverse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyException
argument_list|(
literal|"Error unsetting to-many DataObject property: "
operator|+
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|source
argument_list|,
name|th
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|injectValueHolder
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
block|{
if|if
condition|(
name|readPropertyDirectly
argument_list|(
name|object
argument_list|)
operator|==
literal|null
condition|)
block|{
name|writePropertyDirectly
argument_list|(
name|object
argument_list|,
literal|null
argument_list|,
name|fault
operator|.
name|resolveFault
argument_list|(
operator|(
name|Persistent
operator|)
name|object
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isFault
parameter_list|(
name|Object
name|source
parameter_list|)
block|{
return|return
name|readPropertyDirectly
argument_list|(
name|source
argument_list|)
operator|instanceof
name|Fault
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|PropertyVisitor
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visitToMany
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|void
name|invalidate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|Object
name|value
init|=
name|readPropertyDirectly
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Fault
condition|)
block|{
comment|// nothing to do
block|}
if|else if
condition|(
name|value
operator|instanceof
name|ValueHolder
condition|)
block|{
operator|(
operator|(
name|ValueHolder
operator|)
name|value
operator|)
operator|.
name|invalidate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|writePropertyDirectly
argument_list|(
name|object
argument_list|,
literal|null
argument_list|,
name|fault
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addTargetDirectly
parameter_list|(
name|Object
name|source
parameter_list|,
name|Object
name|target
parameter_list|)
throws|throws
name|PropertyException
block|{
name|addTarget
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeTargetDirectly
parameter_list|(
name|Object
name|source
parameter_list|,
name|Object
name|target
parameter_list|)
throws|throws
name|PropertyException
block|{
name|removeTarget
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

